import{_ as a,o as n,c as s,d as p}from"./app-HBA039kk.js";const t={},e=p(`<h1 id="springboot核心特性-外部化配置" tabindex="-1"><a class="header-anchor" href="#springboot核心特性-外部化配置"><span>SpringBoot核心特性-外部化配置</span></a></h1><h2 id="外部化配置源" tabindex="-1"><a class="header-anchor" href="#外部化配置源"><span>外部化配置源</span></a></h2><p>支持一下外部配置源（排在后面的配置会覆盖前面的配置）：</p><ol><li>默认配置</li><li>配置类上使用<code>@PropertySource</code>指定的配置文件</li><li>application配置文件</li><li><code>RandomValuePropertySource</code>随机值属性</li><li>操作系统环境变量</li><li>Java系统变量(<code>System.getProperties()</code>)</li><li>命令行参数</li></ol><h3 id="_1-默认配置" tabindex="-1"><a class="header-anchor" href="#_1-默认配置"><span>1.默认配置</span></a></h3><p>通过<code>SpringApplication#defaultProperties()</code>方法设置的属性</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Properties</span> defaultProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultProperties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;server.port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8088&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SpringApplication</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span><span class="token function">setDefaultProperties</span><span class="token punctuation">(</span>defaultProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_2-配置类上使用-propertysource指定的配置文件" tabindex="-1"><a class="header-anchor" href="#_2-配置类上使用-propertysource指定的配置文件"><span>2.配置类上使用<code>@PropertySource</code>指定的配置文件</span></a></h3><p>例如：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;classpath:additional.properties&quot;</span><span class="token punctuation">,</span> ignoreResourceNotFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationApp</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre></div><p><em>additional.properties</em></p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8089</span>
</code></pre></div><h3 id="_3-配置文件" tabindex="-1"><a class="header-anchor" href="#_3-配置文件"><span>3.配置文件</span></a></h3><h4 id="application配置文件" tabindex="-1"><a class="header-anchor" href="#application配置文件"><span>application配置文件</span></a></h4><p>SpringBoot启动时，默认会加载以下位置的 <em>application.properties</em>、<em>application.yaml</em>、<em>application.yml</em> 文件，按优先级从小到大排序如下：</p><ul><li>classpath</li><li>classpath:/config</li><li>当前目录下（运行java命令的目录）</li><li>当前目录下的config目录</li></ul><p>如果同一优先级的目录下，同时存在properties和yaml文件，前者优先级较高。强烈不推荐同时使用多种配置文件格式！！</p><h4 id="profile配置文件" tabindex="-1"><a class="header-anchor" href="#profile配置文件"><span>Profile配置文件</span></a></h4><p>SpringBoot还会自动加载名称为 <em>application-{profile}</em> 的配置文件。</p><p>例如：</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">prod</span>
</code></pre></div><p>将使<em>application-prod.properties</em> 或 <em>application.yaml</em> 生效。</p><h4 id="指定配置文件的名称或查找位置" tabindex="-1"><a class="header-anchor" href="#指定配置文件的名称或查找位置"><span>指定配置文件的名称或查找位置</span></a></h4><p>配置文件默认名称为<em>application</em>，可以通过<code>spring.config.name</code>属性指定其它名称。如下：</p><p><code>java -jar myapp.jar --spring.config.name=app</code></p><p>还可以使用<code>spring.config.location</code>属性，指定从其它文件或目录查找配置文件，支持多个，用逗号隔开，使用*optional:*表示其为可选的。如下：</p><p><code>java -jar myapp.jar --spring.config.location=optional:classpath:default.properties,optional:classpath:conf/,optional:file:/etc/myapp/</code></p><h4 id="导入其它配置" tabindex="-1"><a class="header-anchor" href="#导入其它配置"><span>导入其它配置</span></a></h4><p>使用<code>spring.config.import</code>导入其它配置文件，使用 <em>optional:</em> 开头表示其为可选的</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.config.import[0]</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:mysql.properties</span>
<span class="token key attr-name">spring.config.import[1]</span><span class="token punctuation">=</span><span class="token value attr-value">optional:file:/etc/myapp/my.properties</span>
</code></pre></div><p>支持导入无扩展名的文件，需要使用方括号指定其扩展名</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.config.import[2]</span><span class="token punctuation">=</span><span class="token value attr-value">optional:classpath:redis[.properties]</span>
</code></pre></div><h4 id="在配置文件中使用属性占位符" tabindex="-1"><a class="header-anchor" href="#在配置文件中使用属性占位符"><span>在配置文件中使用属性占位符</span></a></h4><p>使用 <code>\${name}</code> 占位符语法，引用其它属性，也可以使用 <code>\${name:default}</code> 指定默认值</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">myapp</span>

<span class="token key attr-name">app.description</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.application.name} is a awesome! written by \${app.author:Unknown}</span>
</code></pre></div><h3 id="_4-randomvaluepropertysource随机值属性" tabindex="-1"><a class="header-anchor" href="#_4-randomvaluepropertysource随机值属性"><span>4.<code>RandomValuePropertySource</code>随机值属性</span></a></h3><p><code>RandomValuePropertySource</code>是SpringBoot用于生成随机值的一个特殊属性源。可以生成随机的字符串、UUID、int、long。</p><h4 id="在配置文件中使用随机值" tabindex="-1"><a class="header-anchor" href="#在配置文件中使用随机值"><span>在配置文件中使用随机值</span></a></h4><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">my.random.string</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.value}</span>
<span class="token key attr-name">my.random.uuid</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.uuid}</span>
<span class="token key attr-name">my.random.int</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int}</span>
<span class="token key attr-name">my.random.int1to9</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int(10)}</span>
<span class="token key attr-name">my.random.int1to99</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int[1,100)}</span>
<span class="token key attr-name">my.random.int1to100</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int[1,100]}</span>
<span class="token key attr-name">my.random.long</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.long}</span>
</code></pre></div><h4 id="在-value中使用随机值" tabindex="-1"><a class="header-anchor" href="#在-value中使用随机值"><span>在<code>@Value</code>中使用随机值</span></a></h4><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${random.string}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">String</span> string<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${random.uuid}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">String</span> uuid<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${random.int}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Integer</span> intVal<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${random.int(10)}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Integer</span> int1to9<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${random.int[1,100)}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Integer</span> int1to99<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${random.int[1,100]}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Integer</span> int1to100<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${random.long}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Long</span> longVal<span class="token punctuation">;</span>
</code></pre></div><h3 id="_5-操作系统环境变量" tabindex="-1"><a class="header-anchor" href="#_5-操作系统环境变量"><span>5.操作系统环境变量</span></a></h3><p>SpringBoot可以从系统环境变量中读取配置属性</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">@Value(&quot;\${JAVA_HOME}&quot;)</span> <span class="token value attr-value">private String javaHome;</span>
</code></pre></div><p>在生产环境中，SpringBoot应用中的敏感信息，推荐通过操作系统环境变量配置。例如JWT密钥。</p><h3 id="_6-java系统变量-system-getproperties" tabindex="-1"><a class="header-anchor" href="#_6-java系统变量-system-getproperties"><span>6.Java系统变量(<code>System.getProperties()</code>)</span></a></h3><p>SpringBoot可以从Java系统变量中读取配置属性</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">@Value(&quot;\${java.home}&quot;)</span> <span class="token value attr-value">private String javaHome;</span>
</code></pre></div><p>调用<code>System#setProperty</code>方法设置Java系统变量</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>或者，从properties文件中加载配置</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;my.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>或者，在<code>java</code>命令中，使用 <em>-D</em> 选项设置</p><p><code>java -jar -Dserver.port=9000 -Dfile.encoding=UTF-8 myapp.jar</code></p><h3 id="_7-命令行参数" tabindex="-1"><a class="header-anchor" href="#_7-命令行参数"><span>7.命令行参数</span></a></h3><p>SpringBoot可以使用命令行参数设置配置属性</p><p><code>java -jar myapp.jar --server.port=9000</code></p><h2 id="访问配置属性值" tabindex="-1"><a class="header-anchor" href="#访问配置属性值"><span>访问配置属性值</span></a></h2><h3 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span><code>@Value</code></span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
</code></pre></div><h3 id="environment" tabindex="-1"><a class="header-anchor" href="#environment"><span><code>Environment</code></span></a></h3><p>获取<code>Environment</code> Bean</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>
</code></pre></div><p>调用<code>Environment#getProperty</code>方法，获取配置属性值</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;server.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="configurationproperties" tabindex="-1"><a class="header-anchor" href="#configurationproperties"><span><code>@ConfigurationProperties</code></span></a></h3><p>SpringBoot支持将配置文件中的配置项，映射为Bean。</p><h4 id="_1-声明配置项" tabindex="-1"><a class="header-anchor" href="#_1-声明配置项"><span>1.声明配置项</span></a></h4><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">my.file.dir</span><span class="token punctuation">=</span><span class="token value attr-value">/www/myapp/file</span>
<span class="token key attr-name">my.file.image.dir</span><span class="token punctuation">=</span><span class="token value attr-value">/www/myapp/file/images</span>
<span class="token key attr-name">my.file.image.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>
<span class="token key attr-name">my.file.audio.dir</span><span class="token punctuation">=</span><span class="token value attr-value">/www/myapp/file/audio</span>
<span class="token key attr-name">my.file.audio.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">50</span>
</code></pre></div><h4 id="_2-定义属性配置类" tabindex="-1"><a class="header-anchor" href="#_2-定义属性配置类"><span>2.定义属性配置类</span></a></h4><p>使用<code>@ConfigurationProperties</code>注解。</p><p>下面的属性配置类中，省略了getter/setter方法</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my.file&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dir<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ImageProperties</span> image<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">AudioProperties</span> audio<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ImageProperties</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> dir<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AudioProperties</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> dir<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="_3-启用自定义的属性配置类" tabindex="-1"><a class="header-anchor" href="#_3-启用自定义的属性配置类"><span>3.启用自定义的属性配置类</span></a></h4><p>在任意一个配置类上，使用<code>@EnableConfigurationProperties</code> 指定要启用的配置类即可。例如，在启动引导类上</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">FileProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationApp</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><p>这样，SpringBoot就会将自定义的属性配置类作为Bean注入到容器中</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">FileProperties</span> fileProperties<span class="token punctuation">;</span>
</code></pre></div>`,78),o=[e];function c(l,i){return n(),s("div",null,o)}const u=a(t,[["render",c],["__file","SpringBoot核心特性-外部化配置.html.vue"]]);export{u as default};

import{_ as n,o as a,c as s,d as t}from"./app-HBA039kk.js";const p="/assets/20240214112011-9q4Lq7e0.png",e="/assets/20240214140824-647aMWUD.png",o="/assets/20240214144533-LihI3sub.png",c="/assets/20240214151216-PA58owgn.png",l="/assets/20240214161344-Pqhi6Dlf.png",u="/assets/20240214154614-IcRCk_H_.png",i="/assets/20240214155301-cboFMFRq.png",k="/assets/20240214155444-ARccXLll.png",r="/assets/20240215095305-5WVRa4su.png",d="/assets/20240215095455-Cm6W2WTy.png",g={},h=t('<h1 id="spring-cloud-alibaba-sentinel断路器" tabindex="-1"><a class="header-anchor" href="#spring-cloud-alibaba-sentinel断路器"><span>Spring Cloud Alibaba Sentinel断路器</span></a></h1><p>学习资料：</p><ul><li>https://sca.aliyun.com/zh-cn/docs/2022.0.0.0/user-guide/sentinel/overview</li><li>https://sentinelguard.io/zh-cn/</li><li>https://github.com/alibaba/Sentinel</li></ul><p>版本信息：</p><ul><li>Sentinel 1.8.6</li></ul><h2 id="sentinel控制台" tabindex="-1"><a class="header-anchor" href="#sentinel控制台"><span>Sentinel控制台</span></a></h2><h3 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h3><p>https://github.com/alibaba/Sentinel/releases</p><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h3><p>运行jar</p><p><code>java -jar -Dserver.port=8880 sentinel-dashboard-1.8.6.jar </code></p><p>控制台配置参数：</p><ul><li><code>server.port</code>，端口，默认8080</li><li><code>auth.enabled</code>，是否启用鉴权，默认true</li><li><code>sentinel.dashboard.auth.username</code>，用户名，默认sentinel</li><li><code>sentinel.dashboard.auth.password</code>，密码，默认sentinel</li></ul><h3 id="访问控制台" tabindex="-1"><a class="header-anchor" href="#访问控制台"><span>访问控制台</span></a></h3><p>http://localhost:8880/ ，用户名和密码默认sentinel</p><p><img src="'+p+`" alt=""></p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h2><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h3><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="使用注解-sentinelresource定义资源" tabindex="-1"><a class="header-anchor" href="#使用注解-sentinelresource定义资源"><span>使用注解<code> @SentinelResource</code>定义资源</span></a></h3><blockquote><p>Sentinel默认会给每个Controller方法创建1个资源，名称为URL路径。</p></blockquote><p>定义名称为hello的Sentinel资源。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/sentinel-service-a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="连接到控制台" tabindex="-1"><a class="header-anchor" href="#连接到控制台"><span>连接到控制台</span></a></h3><ul><li><code>spring.cloud.sentinel.transport.dashboard</code>，控制台地址</li><li><code>spring.cloud.sentinel.transport.port</code>，应用会在此端口启动1个HTTP Server，将控制台的配置推送到此Server，进而注册到Sentinel中。</li></ul><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.sentinel.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.cloud.sentinel.transport.dashboard</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8880</span>
<span class="token key attr-name">spring.cloud.sentinel.transport.port</span><span class="token punctuation">=</span><span class="token value attr-value">8719</span>
</code></pre></div><h3 id="实时监控" tabindex="-1"><a class="header-anchor" href="#实时监控"><span>实时监控</span></a></h3><p>随便调用几个接口，在sentinel控制台即可看到监控效果</p><p><img src="`+e+'" alt=""></p><h2 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制"><span>流量控制</span></a></h2><p><img src="'+o+'" alt=""></p><h3 id="流量统计类型" tabindex="-1"><a class="header-anchor" href="#流量统计类型"><span>流量统计类型</span></a></h3><p>支持2种统计类型：</p><ul><li>QPS</li><li>并发数</li></ul><h3 id="流控模式-根据调用关系限流" tabindex="-1"><a class="header-anchor" href="#流控模式-根据调用关系限流"><span>流控模式(根据调用关系限流)</span></a></h3><p>根据调用方和被调用方的关系，支持3种流控模式：</p><ul><li><p>直接，直接针对资源进行限流</p></li><li><p>关联，统计关联资源的QPS或并发数，当对关联资源的调用超过阈值时，对本资源进行限流</p><p><img src="'+c+'" alt=""></p></li><li><p>链路，统计调用链路入口资源的QPS或并发数，当对入口资源的调用超过阈值时，对本资源进行限流</p></li></ul><h3 id="流控效果" tabindex="-1"><a class="header-anchor" href="#流控效果"><span>流控效果</span></a></h3><blockquote><p>统计类型为并发数时，不支持设置流控效果。</p></blockquote><p>有3种流控效果：</p><ul><li><p>快速失败，QPS超过阈值，直接失败</p></li><li><p>预热，在设定的预热时长内，QPS逐渐恢复到设定的阈值。</p></li><li><p>排队等待，QPS超过阈值，请求排队，直到超时</p></li></ul><h2 id="热点参数限流" tabindex="-1"><a class="header-anchor" href="#热点参数限流"><span>热点参数限流</span></a></h2><p><img src="'+l+'" alt=""></p><h2 id="熔断降级" tabindex="-1"><a class="header-anchor" href="#熔断降级"><span>熔断降级</span></a></h2><h3 id="慢调用比例" tabindex="-1"><a class="header-anchor" href="#慢调用比例"><span>慢调用比例</span></a></h3><ul><li>统计时长，单位ms</li><li>最小请求数</li><li>最大RT，响应时长超过最大RT的请求，即为慢调用，单位ms</li><li>比例阈值，RT超过最大RT的调用占比</li><li>熔断时长，断路器断开的时间，单位s</li></ul><p><img src="'+u+'" alt=""></p><h3 id="异常比例" tabindex="-1"><a class="header-anchor" href="#异常比例"><span>异常比例</span></a></h3><ul><li>比例阈值，异常请求占比</li></ul><p><img src="'+i+'" alt=""></p><h3 id="异常数" tabindex="-1"><a class="header-anchor" href="#异常数"><span>异常数</span></a></h3><p><img src="'+k+'" alt=""></p><h2 id="系统自适应保护" tabindex="-1"><a class="header-anchor" href="#系统自适应保护"><span>系统自适应保护</span></a></h2><p><img src="'+r+'" alt=""></p><h2 id="授权保护-黑白名单" tabindex="-1"><a class="header-anchor" href="#授权保护-黑白名单"><span>授权保护(黑白名单)</span></a></h2><p><img src="'+d+`" alt=""></p><h2 id="sentinelresource" tabindex="-1"><a class="header-anchor" href="#sentinelresource"><span><code>@SentinelResource</code></span></a></h2><h3 id="处理blockexception" tabindex="-1"><a class="header-anchor" href="#处理blockexception"><span>处理<code>BlockException</code></span></a></h3><p><code>BlockException</code>由Sentinel在Sentinel规则生效时抛出，包括以下几个子类：</p><ul><li>流量控制：<code>FlowException</code></li><li>熔断降级：<code>DegradeException</code></li><li>热点参数限流：<code>ParamFlowException</code></li><li>授权保护：<code>AuthorityException</code></li><li>系统自适应保护：<code>SystemBlockException</code></li></ul><p>使用 <code>blockHandler</code> 属性指定处理器，处理器方法必须定义在同一个类中</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">&quot;helloBlockHandler&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloBlockHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">FlowException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理流量控制&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">DegradeException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理熔断降级&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">ParamFlowException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理热点参数限流&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SystemBlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理系统自适应保护&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">AuthorityException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理授权(黑白名单保护)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>或者，将处理器方法定义在另一个类中（必须为static方法），然后通过 <code>blockHandlerClass</code> 属性指定</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">&quot;helloBlockHandler&quot;</span><span class="token punctuation">,</span> blockHandlerClass <span class="token operator">=</span> <span class="token class-name">SentinelBlockHandlers</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">helloBlockHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">FlowException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理流量控制&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">DegradeException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理熔断降级&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">ParamFlowException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理热点参数限流&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SystemBlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理系统自适应保护&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">AuthorityException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;处理授权(黑白名单保护)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="使用后备模式" tabindex="-1"><a class="header-anchor" href="#使用后备模式"><span>使用后备模式</span></a></h3><p>使用 <code>fallback</code> 属性指定后备处理器，处理任何异常。处理器方法必须位于同一个类中</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> 
                  blockHandler <span class="token operator">=</span> <span class="token string">&quot;helloBlockHandler&quot;</span><span class="token punctuation">,</span> blockHandlerClass <span class="token operator">=</span> <span class="token class-name">SentinelBlockHandlers</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 
                  fallback <span class="token operator">=</span> <span class="token string">&quot;helloFallback&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloFallback</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>或者，将后备处理器方法定义到另一个类中（必须为static方法），然后通过 <code>fallbackClass</code> 属性指定</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelFallbacks</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">helloFallback</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> 
                  blockHandler <span class="token operator">=</span> <span class="token string">&quot;helloBlockHandler&quot;</span><span class="token punctuation">,</span> blockHandlerClass <span class="token operator">=</span> <span class="token class-name">SentinelBlockHandlers</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 
                  fallback <span class="token operator">=</span> <span class="token string">&quot;helloFallback&quot;</span><span class="token punctuation">,</span> fallbackClass <span class="token operator">=</span> <span class="token class-name">SentinelFallbacks</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;name is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="sentinel规则持久化" tabindex="-1"><a class="header-anchor" href="#sentinel规则持久化"><span>Sentinel规则持久化</span></a></h2><h3 id="使用nacos作为数据源" tabindex="-1"><a class="header-anchor" href="#使用nacos作为数据源"><span>使用nacos作为数据源</span></a></h3><p>1.将当前应用注册到nacos注册中心</p><p>2.添加依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>3.配置Sentinel数据源</p><ul><li><p>data-type，<code> Converter</code>类型，内置json和xml，默认json</p></li><li><p>rule-type，规则类型，包括flow, degrade, authority, system, param-flow, gw-flow, gw-api-group</p></li></ul><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># sentinel规则持久化</span>
<span class="token comment"># flow: 流量控制</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds1.nacos.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.cloud.nacos.server-addr}</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds1.nacos.username</span><span class="token punctuation">=</span><span class="token value attr-value">nacos</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds1.nacos.password</span><span class="token punctuation">=</span><span class="token value attr-value">nacos</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds1.nacos.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">public</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds1.nacos.group-id</span><span class="token punctuation">=</span><span class="token value attr-value">DEFAULT_GROUP</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds1.nacos.data-id</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.application.name}-flow-rules</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds1.nacos.data-type</span><span class="token punctuation">=</span><span class="token value attr-value">json</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds1.nacos.rule-type</span><span class="token punctuation">=</span><span class="token value attr-value">flow</span>
<span class="token comment"># degrade: 熔断降级</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds2.nacos.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.cloud.nacos.server-addr}</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds2.nacos.username</span><span class="token punctuation">=</span><span class="token value attr-value">nacos</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds2.nacos.password</span><span class="token punctuation">=</span><span class="token value attr-value">nacos</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds2.nacos.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">public</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds2.nacos.group-id</span><span class="token punctuation">=</span><span class="token value attr-value">DEFAULT_GROUP</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds2.nacos.data-id</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.application.name}-degrade-rules</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds2.nacos.data-type</span><span class="token punctuation">=</span><span class="token value attr-value">json</span>
<span class="token key attr-name">spring.cloud.sentinel.datasource.ds2.nacos.rule-type</span><span class="token punctuation">=</span><span class="token value attr-value">degrade</span>
</code></pre></div><p>4.在nacos控制台中，新建配置文件，namespace, group, dataId要与Sentinel配置的一致。在其中定义流控规则，即可实现持久化的目的。</p><h2 id="openfeign启用sentinel" tabindex="-1"><a class="header-anchor" href="#openfeign启用sentinel"><span>OpenFeign启用Sentinel</span></a></h2><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">feign.sentinel.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div>`,80),m=[h];function y(w,b){return a(),s("div",null,m)}const q=n(g,[["render",y],["__file","Spring Cloud Alibaba Sentinel断路器.html.vue"]]);export{q as default};

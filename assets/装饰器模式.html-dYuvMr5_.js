const t=JSON.parse('{"key":"v-33974ec0","path":"/posts/coder/design-patterns/structural/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"装饰器模式","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"装饰器模式 装饰器模式（Decorator Pattern），是一种结构型模式，允许在不改变原有对象的情况下，增强其功能。 代码实现 以手机为例，假设出售手机时，有2种套餐：裸机，裸机+保护套。 定义手机接口Phone 定义裸机类SimplePhone 定义装饰器抽象类，实现Phone接口，必须声明1个被装饰的对象，作为成员变量 定义具体的装饰器类：保...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/design-patterns/structural/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"装饰器模式"}],["meta",{"property":"og:description","content":"装饰器模式 装饰器模式（Decorator Pattern），是一种结构型模式，允许在不改变原有对象的情况下，增强其功能。 代码实现 以手机为例，假设出售手机时，有2种套餐：裸机，裸机+保护套。 定义手机接口Phone 定义裸机类SimplePhone 定义装饰器抽象类，实现Phone接口，必须声明1个被装饰的对象，作为成员变量 定义具体的装饰器类：保..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"使用装饰器类","slug":"使用装饰器类","link":"#使用装饰器类","children":[]}],"git":{},"filePathRelative":"posts/coder/design-patterns/structural/装饰器模式.md","autoDesc":true}');export{t as data};

import{_ as a,o as n,c as s,d as t}from"./app-HBA039kk.js";const e="/assets/20240212155154-jHMEErue.png",p={},o=t(`<h1 id="spring-cloud-gateway-api网关" tabindex="-1"><a class="header-anchor" href="#spring-cloud-gateway-api网关"><span>Spring Cloud Gateway API网关</span></a></h1><p>学习资料：</p><ul><li>官方文档：https://spring.io/projects/spring-cloud-gateway</li></ul><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h2><h3 id="_1-创建gateway服务器应用" tabindex="-1"><a class="header-anchor" href="#_1-创建gateway服务器应用"><span>1.创建Gateway服务器应用</span></a></h3><p>1.添加依赖</p><p>gateway基于webflux实现，不需要添加web依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>2.创建启动引导类</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayServerApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayServerApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>3.application配置文件</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8888</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">gateway-server</span>

<span class="token key attr-name">spring.cloud.gateway.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><h3 id="_2-定义路由" tabindex="-1"><a class="header-anchor" href="#_2-定义路由"><span>2.定义路由</span></a></h3><p>在Gateway服务器应用配置文件中，定义2个路由，分别将Gateway应用收到的请求，路由到2个网关客户端应用。使用了Path路由断言工厂。</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].id</span><span class="token punctuation">=</span><span class="token value attr-value">gateway-client-a</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].uri</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:9001</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">Path</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[0].args.patterns</span><span class="token punctuation">=</span><span class="token value attr-value">/gateway-client-a/**</span>

<span class="token key attr-name">spring.cloud.gateway.routes[1].id</span><span class="token punctuation">=</span><span class="token value attr-value">gateway-client-b</span>
<span class="token key attr-name">spring.cloud.gateway.routes[1].uri</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:9002</span>
<span class="token key attr-name">spring.cloud.gateway.routes[1].predicates[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">Path</span>
<span class="token key attr-name">spring.cloud.gateway.routes[1].predicates[0].args.patterns</span><span class="token punctuation">=</span><span class="token value attr-value">/gateway-client-b/**</span>
</code></pre></div><h3 id="_3-验证" tabindex="-1"><a class="header-anchor" href="#_3-验证"><span>3.验证</span></a></h3><p>在2个网关客户端应用中，都定义了1个Controller方法，返回其应用名和端口号</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/gateway-client-a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.application.name}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">String</span> appName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${server.port}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/info&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;appName&quot;</span><span class="token punctuation">,</span> appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;port&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>1.启动2个网关客户端应用，启动网关服务器应用</p><p>2.通过网关服务器，请求2个客户端应用的API接口</p><ul><li><p>请求 http://localhost:8888/gateway-client-a/info</p><div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">9001</span><span class="token punctuation">,</span>
    <span class="token property">&quot;appName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gateway-client-a&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>请求 http://localhost:8888/gateway-client-b/info</p><div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">9002</span><span class="token punctuation">,</span>
    <span class="token property">&quot;appName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gateway-client-b&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div></li></ul><h2 id="定义路由的2种方式" tabindex="-1"><a class="header-anchor" href="#定义路由的2种方式"><span>定义路由的2种方式</span></a></h2><h3 id="使用配置文件定义路由" tabindex="-1"><a class="header-anchor" href="#使用配置文件定义路由"><span>使用配置文件定义路由</span></a></h3><p>在配置文件中定义路由，通过指定id和uri，以及断言工厂和过滤器集合。</p><p>指定路由断言工厂和过滤器时，可以选择使用完整参数(name和args)的形式</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].id</span><span class="token punctuation">=</span><span class="token value attr-value">gateway-client-a</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].uri</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:9001</span>

<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">Path</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[0].args.patterns</span><span class="token punctuation">=</span><span class="token value attr-value">/gateway-client-a/**</span>

<span class="token key attr-name">spring.cloud.gateway.routes[0].filters[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">AddRequestHeader</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].filters[0].args.name</span><span class="token punctuation">=</span><span class="token value attr-value">X-Custom-Header</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].filters[0].args.value</span><span class="token punctuation">=</span><span class="token value attr-value">abc</span>
</code></pre></div><p>也可以使用简写形式</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].id</span><span class="token punctuation">=</span><span class="token value attr-value">gateway-client-a</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].uri</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:9001</span>

<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[0]</span><span class="token punctuation">=</span><span class="token value attr-value">Path=/gateway-client-a/**</span>

<span class="token key attr-name">spring.cloud.gateway.routes[0].filters[0]</span><span class="token punctuation">=</span><span class="token value attr-value">AddRequestHeader=X-Custom-Header, abc</span>
</code></pre></div><h3 id="使用注入-routelocator-bean定义路由" tabindex="-1"><a class="header-anchor" href="#使用注入-routelocator-bean定义路由"><span>使用注入 <code>RouteLocator</code> Bean定义路由</span></a></h3><p>通过<code>RouteLocatorBuilder</code>构建<code>RouteLocator</code></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayRouteConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">routeLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PredicateSpec</span><span class="token punctuation">,</span> <span class="token class-name">Buildable</span><span class="token punctuation">&lt;</span><span class="token class-name">Route</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> gatewayClientARoute <span class="token operator">=</span> predicateSpec <span class="token operator">-&gt;</span> predicateSpec<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;/gateway-client-a/**&quot;</span><span class="token punctuation">)</span>
                                                                                                      <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>filterSpec <span class="token operator">-&gt;</span> filterSpec<span class="token punctuation">.</span><span class="token function">addRequestHeader</span><span class="token punctuation">(</span>
                                                                                                              <span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                                                                      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:9001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PredicateSpec</span><span class="token punctuation">,</span> <span class="token class-name">Buildable</span><span class="token punctuation">&lt;</span><span class="token class-name">Route</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> gatewayClientBRoute <span class="token operator">=</span> predicateSpec <span class="token operator">-&gt;</span> predicateSpec<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;/gateway-client-b/**&quot;</span><span class="token punctuation">)</span>
                                                                                                      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:9002&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;gateway-client-a&quot;</span><span class="token punctuation">,</span> gatewayClientARoute<span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;gateway-client-b&quot;</span><span class="token punctuation">,</span> gatewayClientBRoute<span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="基于服务发现的路由" tabindex="-1"><a class="header-anchor" href="#基于服务发现的路由"><span>基于服务发现的路由</span></a></h2><p>Spring Cloud Gateway可以结合服务发现，实现动态路由功能。</p><h3 id="_1-将gateway服务器和客户端应用-都注册到注册中心" tabindex="-1"><a class="header-anchor" href="#_1-将gateway服务器和客户端应用-都注册到注册中心"><span>1.将Gateway服务器和客户端应用，都注册到注册中心</span></a></h3><blockquote><p>以Nacos注册中心为例，Netflix Eureka, Consul, or Zookeeper同理</p></blockquote><p>添加依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>配置Nacos服务发现</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># nacos</span>
<span class="token key attr-name">spring.cloud.nacos.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>
<span class="token key attr-name">spring.cloud.nacos.username</span><span class="token punctuation">=</span><span class="token value attr-value">nacos</span>
<span class="token key attr-name">spring.cloud.nacos.password</span><span class="token punctuation">=</span><span class="token value attr-value">nacos</span>

<span class="token key attr-name">spring.cloud.nacos.discovery.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.cloud.nacos.server-addr}</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.username</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.cloud.nacos.username}</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.password</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.cloud.nacos.password}</span>
</code></pre></div><p>启用服务发现</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayServerApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayServerApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>另外，在Gateway服务器应用中，启用客户端负载均衡</p><p><em>pom.xml</em></p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><em>application.properties</em></p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.loadbalancer.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.cloud.loadbalancer.nacos.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><p><img src="`+e+`" alt=""></p><h3 id="_2-启用gateway基于服务发现的自动路由" tabindex="-1"><a class="header-anchor" href="#_2-启用gateway基于服务发现的自动路由"><span>2.启用Gateway基于服务发现的自动路由</span></a></h3><p>使用<code>spring.cloud.gateway.discovery.locator.enabled=true</code>启用自动路由，自动使用<code>DiscoveryClient</code>对每个微服务创建路由</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.discovery.locator.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.cloud.gateway.discovery.locator.lower-case-service-id</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><p>自动创建的路由，默认添加了1个Path断言和1个RewritePath过滤器：</p><ul><li>Path断言的<em>patterns</em>为：/serviceId/**</li><li>RewritePath过滤器匹配 /serviceId开头的URL，然后重写URL，将开头的/serviceId去掉</li></ul><p>以gateway-client-a为例，自动添加如下配置：</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.discovery.locator.predicates[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">Path</span>
<span class="token key attr-name">spring.cloud.gateway.discovery.locator.predicates[0].args.patterns</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;&#39;/&#39; + serviceId + &#39;/**&#39;&quot;</span>

<span class="token key attr-name">spring.cloud.gateway.discovery.locator.filters[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">RewritePath</span>
<span class="token key attr-name">spring.cloud.gateway.discovery.locator.filters[0].args.regexp</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;&#39;/&#39; + serviceId + &#39;/?(?&lt;remaining&gt;.*)&#39;&quot;</span>
<span class="token key attr-name">spring.cloud.gateway.discovery.locator.filters[0].args.replacement</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;&#39;/\${remaining}&#39;&quot;</span>
</code></pre></div><h3 id="_3-验证-1" tabindex="-1"><a class="header-anchor" href="#_3-验证-1"><span>3.验证</span></a></h3><blockquote><p>因为自动添加的RewritePath过滤器会去掉开头的 /serviceId，所以，请求的时候，需要多加一层 /serviceId</p></blockquote><p>请求 http://localhost:8888/gateway-client-a/gateway-client-a/info</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>{
    &quot;port&quot;: 9001,
    &quot;appName&quot;: &quot;gateway-client-a&quot;
}
</code></pre></div><p>请求 http://localhost:8888/gateway-client-b/gateway-client-b/info</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>{
    &quot;port&quot;: 9002,
    &quot;appName&quot;: &quot;gateway-client-b&quot;
}
</code></pre></div><h3 id="_4-启用gateway基于服务发现的自定义路由" tabindex="-1"><a class="header-anchor" href="#_4-启用gateway基于服务发现的自定义路由"><span>4.启用Gateway基于服务发现的自定义路由</span></a></h3><p>不需要启用自动路由</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.discovery.locator.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre></div><p>定义路由，使用 <em>lb://serviceId</em> 作为uri的值，将对serviceId启用客户端负载均衡</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].id</span><span class="token punctuation">=</span><span class="token value attr-value">gateway-client-a</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].uri</span><span class="token punctuation">=</span><span class="token value attr-value">lb://gateway-client-a</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[0]</span><span class="token punctuation">=</span><span class="token value attr-value">Path=/gateway-client-a/**</span>

<span class="token key attr-name">spring.cloud.gateway.routes[1].id</span><span class="token punctuation">=</span><span class="token value attr-value">gateway-client-b</span>
<span class="token key attr-name">spring.cloud.gateway.routes[1].uri</span><span class="token punctuation">=</span><span class="token value attr-value">lb://gateway-client-b</span>
<span class="token key attr-name">spring.cloud.gateway.routes[1].predicates[0]</span><span class="token punctuation">=</span><span class="token value attr-value">Path=/gateway-client-b/**</span>
</code></pre></div><h2 id="内置路由断言工厂" tabindex="-1"><a class="header-anchor" href="#内置路由断言工厂"><span>内置路由断言工厂</span></a></h2><p>路由断言用于匹配HTTP请求属性，1个路由可以有多个断言，必须同时满足。</p><h3 id="after" tabindex="-1"><a class="header-anchor" href="#after"><span>After</span></a></h3><p>After断言接收1个参数，<em>datetime</em>（<code>java.time.ZonedDateTime</code>），匹配在给定时间之后发送的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[1]</span><span class="token punctuation">=</span><span class="token value attr-value">After=2023-01-01T23:59:59.00+08:00</span>
</code></pre></div><h3 id="before" tabindex="-1"><a class="header-anchor" href="#before"><span>Before</span></a></h3><p>Before断言接收1个参数，<em>datetime</em>（<code>java.time.ZonedDateTime</code>），匹配在给定时间之前发送的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[2]</span><span class="token punctuation">=</span><span class="token value attr-value">Before=2025-01-01T23:59:59.00+08:00</span>
</code></pre></div><h3 id="between" tabindex="-1"><a class="header-anchor" href="#between"><span>Between</span></a></h3><p>Before断言接收2个参数，<em>datetime1</em>和<em>datetime2</em>（<code>java.time.ZonedDateTime</code>），匹配在给定2个时间之间发送的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[3]</span><span class="token punctuation">=</span><span class="token value attr-value">Between=2023-01-01T23:59:59.00+08:00, 2025-01-01T23:59:59.00+08:00</span>
</code></pre></div><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>Cookie</span></a></h3><p>Cookie断言接收2个参数，<em>name</em> 和 <em>regexp</em>，匹配Cookie包含给定名称，且值匹配给定正则表达式的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[4]</span><span class="token punctuation">=</span><span class="token value attr-value">Cookie=tag, t_\\\\d+</span>
</code></pre></div><h3 id="header" tabindex="-1"><a class="header-anchor" href="#header"><span>Header</span></a></h3><p>Header断言接收2个参数，<em>header</em> 和 <em>regexp</em>，匹配具有给定请求头，且其值匹配给定正则表达式的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[5]</span><span class="token punctuation">=</span><span class="token value attr-value">Header=X-Request-ID, \\\\d+</span>
</code></pre></div><h3 id="host" tabindex="-1"><a class="header-anchor" href="#host"><span>Host</span></a></h3><p>Host断言接收1个参数，<em>patterns</em>，匹配主机名在给定模式列表中的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[6]</span><span class="token punctuation">=</span><span class="token value attr-value">Host=localhost, **.example.com</span>
</code></pre></div><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method"><span>Method</span></a></h3><p>Method断言接收1个参数，<em>methods</em>，匹配HTTP请求方法在给定列表中的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[7]</span><span class="token punctuation">=</span><span class="token value attr-value">Method=GET,POST,DELETE</span>
</code></pre></div><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span>Path</span></a></h3><p>Path断言接收2个参数，<em>patterns</em> 和 可选的 <em>matchTrailingSlash</em>，匹配URL路径，可以有多个，用逗号分割。如果matchTrailingSlash设置为true，表示匹配末尾的斜线</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[0]</span><span class="token punctuation">=</span><span class="token value attr-value">Path=/gateway-client-a/**</span>
</code></pre></div><h3 id="query" tabindex="-1"><a class="header-anchor" href="#query"><span>Query</span></a></h3><p>Query断言接收2个参数，<em>param</em> 和可选的 <em>regexp</em>，匹配包含指定URL参数名称的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[8]</span><span class="token punctuation">=</span><span class="token value attr-value">Query=id</span>
</code></pre></div><h3 id="remoteaddr" tabindex="-1"><a class="header-anchor" href="#remoteaddr"><span>RemoteAddr</span></a></h3><p>RemoteAddr断言接收1个参数，<em>sources</em>，匹配远程地址在给定列表中的请求</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[9]</span><span class="token punctuation">=</span><span class="token value attr-value">RemoteAddr=168.251.135.41</span>
</code></pre></div><h3 id="weight" tabindex="-1"><a class="header-anchor" href="#weight"><span>Weight</span></a></h3><p>Weight断言接收2个参数，<em>group</em> 和 <em>weight</em>。</p><h3 id="xforwardedremoteaddr" tabindex="-1"><a class="header-anchor" href="#xforwardedremoteaddr"><span>XForwardedRemoteAddr</span></a></h3><h2 id="内置路由过滤器工厂" tabindex="-1"><a class="header-anchor" href="#内置路由过滤器工厂"><span>内置路由过滤器工厂</span></a></h2><p>路由过滤器可以在网关服务将HTTP请求转发到下游服务之前或之后，对请求和响应进行处理。</p><h3 id="addrequestheader" tabindex="-1"><a class="header-anchor" href="#addrequestheader"><span>AddRequestHeader</span></a></h3><p>AddRequestHeader过滤器接收2个参数，<em>name</em> 和 <em>value</em>，给HTTP请求添加请求头</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].filters[0]</span><span class="token punctuation">=</span><span class="token value attr-value">AddRequestHeader=X-Custom-Header, abc</span>
</code></pre></div><h3 id="addrequestheadersifnotpresent" tabindex="-1"><a class="header-anchor" href="#addrequestheadersifnotpresent"><span>AddRequestHeadersIfNotPresent</span></a></h3><p>AddRequestHeadersIfNotPresent过滤器接收多个用逗号分割的 <em>name:value</em> 参数，添加多个请求头</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].filters[1]</span><span class="token punctuation">=</span><span class="token value attr-value">AddRequestHeadersIfNotPresent=X-Custom-Header-A:a,X-Custom-Header-B:b</span>
</code></pre></div><h3 id="addrequestparameter" tabindex="-1"><a class="header-anchor" href="#addrequestparameter"><span>AddRequestParameter</span></a></h3><p>AddRequestParameter过滤器接收2个参数，<em>name</em> 和 <em>value</em>，给HTTP请求添加URL参数</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].filters[3]</span><span class="token punctuation">=</span><span class="token value attr-value">AddRequestParameter=foo,bar</span>
</code></pre></div><h3 id="addresponseheader" tabindex="-1"><a class="header-anchor" href="#addresponseheader"><span>AddResponseHeader</span></a></h3><h3 id="deduperesponseheader" tabindex="-1"><a class="header-anchor" href="#deduperesponseheader"><span>DedupeResponseHeader</span></a></h3><h3 id="circuitbreaker" tabindex="-1"><a class="header-anchor" href="#circuitbreaker"><span>CircuitBreaker</span></a></h3><h3 id="fallbackheaders" tabindex="-1"><a class="header-anchor" href="#fallbackheaders"><span>FallbackHeaders</span></a></h3><h3 id="cacherequestbody" tabindex="-1"><a class="header-anchor" href="#cacherequestbody"><span>CacheRequestBody</span></a></h3><h2 id="内置路由全局过滤器" tabindex="-1"><a class="header-anchor" href="#内置路由全局过滤器"><span>内置路由全局过滤器</span></a></h2><h2 id="配置路由元数据" tabindex="-1"><a class="header-anchor" href="#配置路由元数据"><span>配置路由元数据</span></a></h2><h2 id="配置超时" tabindex="-1"><a class="header-anchor" href="#配置超时"><span>配置超时</span></a></h2><h3 id="全局超时配置" tabindex="-1"><a class="header-anchor" href="#全局超时配置"><span>全局超时配置</span></a></h3><ul><li>connect-timeout，连接超时，单位ms</li><li>response-timeout，响应超时，<code>java.time.Duration</code>类型</li></ul><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.httpclient.connect-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span>
<span class="token key attr-name">spring.cloud.gateway.httpclient.response-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">5s</span>
</code></pre></div><h3 id="特定路由超时配置" tabindex="-1"><a class="header-anchor" href="#特定路由超时配置"><span>特定路由超时配置</span></a></h3><p>特定路由超时通过路由元数据配置：</p><ul><li>metadata.connect-timeout，连接超时，单位ms</li><li>metadata.response-timeout，响应超时，单位ms</li></ul><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.routes[0].metadata.connect-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].metadata.response-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span>
</code></pre></div><h2 id="自定义路由断言工厂" tabindex="-1"><a class="header-anchor" href="#自定义路由断言工厂"><span>自定义路由断言工厂</span></a></h2><p>路由断言工厂都是<code>RoutePredicateFactory</code>接口的实现类，一般通过继承其抽象子类<code>AbstractRoutePredicateFactory</code>实现自定义。</p><h3 id="_1-定义routepredicatefactory的子类" tabindex="-1"><a class="header-anchor" href="#_1-定义routepredicatefactory的子类"><span>1.定义<code>RoutePredicateFactory</code>的子类</span></a></h3><p>自定义路由断言工厂类名必须以<em>RoutePredicateFactory</em>结尾。</p><p>重写<code>RoutePredicateFactory#apply</code>抽象方法：</p><ul><li>获取<code>ServerHttpRequest</code>对象，在其中获取需要的请求信息</li><li>获取Config对象，获取配置信息</li><li>匹配请求信息和配置信息，返回<code>Predicate</code>，true表示匹配，false表示不匹配</li></ul><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRoutePredicateFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutePredicateFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomRoutePredicateFactory<span class="token punctuation">.</span>Config</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerWebExchange</span><span class="token punctuation">&gt;</span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;run CustomRoutePredicateFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> exchange <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取请求</span>
            <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 从请求中获取信息</span>

            <span class="token comment">// 从Config中获取配置信息</span>
            <span class="token class-name">String</span> attr1 <span class="token operator">=</span> config<span class="token punctuation">.</span>attr1<span class="token punctuation">;</span>
            <span class="token class-name">String</span> attr2 <span class="token operator">=</span> config<span class="token punctuation">.</span>attr2<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;attr1=%s, attr2=%s%n&quot;</span><span class="token punctuation">,</span> attr1<span class="token punctuation">,</span> attr2<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 匹配</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 配置信息
     * */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attr1<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attr2<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAttr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attr1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Config</span> <span class="token function">setAttr1</span><span class="token punctuation">(</span><span class="token class-name">String</span> attr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>attr1 <span class="token operator">=</span> attr1<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAttr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attr2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Config</span> <span class="token function">setAttr2</span><span class="token punctuation">(</span><span class="token class-name">String</span> attr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>attr2 <span class="token operator">=</span> attr2<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_2-注入自定义路由断言工厂bean" tabindex="-1"><a class="header-anchor" href="#_2-注入自定义路由断言工厂bean"><span>2.注入自定义路由断言工厂Bean</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayRouteConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomRoutePredicateFactory</span> <span class="token function">customRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_3-使用自定义路由断言工厂" tabindex="-1"><a class="header-anchor" href="#_3-使用自定义路由断言工厂"><span>3.使用自定义路由断言工厂</span></a></h3><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 使用自定义RoutePredicateFactory</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[1].name</span><span class="token punctuation">=</span><span class="token value attr-value">Custom</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[1].args.attr1</span><span class="token punctuation">=</span><span class="token value attr-value">foo</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].predicates[1].args.attr2</span><span class="token punctuation">=</span><span class="token value attr-value">bar</span>
</code></pre></div><h2 id="自定义路由过滤器" tabindex="-1"><a class="header-anchor" href="#自定义路由过滤器"><span>自定义路由过滤器</span></a></h2><p>路由过滤器都是<code>GatewayFilterFactory</code>接口的实现类，一般通过继承其抽线子类<code>AbstractGatewayFilterFactory</code>实现自定义。</p><h3 id="_1-定义abstractgatewayfilterfactory的子类" tabindex="-1"><a class="header-anchor" href="#_1-定义abstractgatewayfilterfactory的子类"><span>1.定义<code>AbstractGatewayFilterFactory</code>的子类</span></a></h3><p>自定义路由过滤器类名必须以<em>GatewayFilterFactory</em>结尾。</p><p>路由前置过滤器，处理HTTP请求</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPreGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomPreGatewayFilterFactory<span class="token punctuation">.</span>Config</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomPreGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从Config中获取配置信息</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 操作HTTP请求</span>
            <span class="token class-name">ServerHttpRequest<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attr1<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attr2<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAttr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attr1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">CustomPreGatewayFilterFactory<span class="token punctuation">.</span>Config</span> <span class="token function">setAttr1</span><span class="token punctuation">(</span><span class="token class-name">String</span> attr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>attr1 <span class="token operator">=</span> attr1<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAttr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attr2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">CustomPreGatewayFilterFactory<span class="token punctuation">.</span>Config</span> <span class="token function">setAttr2</span><span class="token punctuation">(</span><span class="token class-name">String</span> attr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>attr2 <span class="token operator">=</span> attr2<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>路由后置过滤器，处理HTTP响应</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPostGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomPostGatewayFilterFactory<span class="token punctuation">.</span>Config</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomPostGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从Config中获取配置信息</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 操作HTTP响应</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attr1<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attr2<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAttr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attr1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">CustomPreGatewayFilterFactory<span class="token punctuation">.</span>Config</span> <span class="token function">setAttr1</span><span class="token punctuation">(</span><span class="token class-name">String</span> attr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>attr1 <span class="token operator">=</span> attr1<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAttr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attr2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">CustomPreGatewayFilterFactory<span class="token punctuation">.</span>Config</span> <span class="token function">setAttr2</span><span class="token punctuation">(</span><span class="token class-name">String</span> attr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>attr2 <span class="token operator">=</span> attr2<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_2-注入自定义路由过滤器bean" tabindex="-1"><a class="header-anchor" href="#_2-注入自定义路由过滤器bean"><span>2.注入自定义路由过滤器Bean</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayRouteConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomPreGatewayFilterFactory</span> <span class="token function">customPreGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomPreGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomPostGatewayFilterFactory</span> <span class="token function">customPostGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomPostGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_3-使用自定义路由过滤器" tabindex="-1"><a class="header-anchor" href="#_3-使用自定义路由过滤器"><span>3.使用自定义路由过滤器</span></a></h3><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 使用自定义GatewayFilterFactory</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].filters[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">CustomPre</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].filters[0].args.attr1</span><span class="token punctuation">=</span><span class="token value attr-value">foo</span>
<span class="token key attr-name">spring.cloud.gateway.routes[0].filters[0].args.attr2</span><span class="token punctuation">=</span><span class="token value attr-value">bar</span>
</code></pre></div><h2 id="自定义路由全局过滤器" tabindex="-1"><a class="header-anchor" href="#自定义路由全局过滤器"><span>自定义路由全局过滤器</span></a></h2><p>全局过滤器都是<code>GlobaFilter</code>接口的实现类。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPreGlobalFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,152),c=[o];function l(u,r){return n(),s("div",null,c)}const k=a(p,[["render",l],["__file","Spring Cloud Gateway API网关.html.vue"]]);export{k as default};

const t=JSON.parse('{"key":"v-d9330384","path":"/posts/coder/design-patterns/creational/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html","title":"工厂方法模式","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"工厂方法模式 工厂方法模式（Factory Method），其核心是，提供1个工厂接口，然后对每种具体的产品，创建1个具体的工厂类，负责创建具体的产品。 代码实现 定义产品接口以及具体的产品类 实现工厂接口以及具体的工厂类 使用工厂方法创建对象 工厂方法模式的优缺点 优点： 当有新的产品时，只需要新建新的具体产品类和具体工厂类即可，不需要修改已有的代码...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/design-patterns/creational/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"工厂方法模式"}],["meta",{"property":"og:description","content":"工厂方法模式 工厂方法模式（Factory Method），其核心是，提供1个工厂接口，然后对每种具体的产品，创建1个具体的工厂类，负责创建具体的产品。 代码实现 定义产品接口以及具体的产品类 实现工厂接口以及具体的工厂类 使用工厂方法创建对象 工厂方法模式的优缺点 优点： 当有新的产品时，只需要新建新的具体产品类和具体工厂类即可，不需要修改已有的代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂方法模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[{"level":3,"title":"定义产品接口以及具体的产品类","slug":"定义产品接口以及具体的产品类","link":"#定义产品接口以及具体的产品类","children":[]},{"level":3,"title":"实现工厂接口以及具体的工厂类","slug":"实现工厂接口以及具体的工厂类","link":"#实现工厂接口以及具体的工厂类","children":[]}]},{"level":2,"title":"使用工厂方法创建对象","slug":"使用工厂方法创建对象","link":"#使用工厂方法创建对象","children":[]},{"level":2,"title":"工厂方法模式的优缺点","slug":"工厂方法模式的优缺点","link":"#工厂方法模式的优缺点","children":[]}],"git":{},"filePathRelative":"posts/coder/design-patterns/creational/工厂方法模式.md","autoDesc":true}');export{t as data};

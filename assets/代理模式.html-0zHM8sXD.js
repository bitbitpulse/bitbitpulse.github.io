const t=JSON.parse('{"key":"v-04447c50","path":"/posts/coder/design-patterns/structural/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html","title":"代理模式","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"代理模式 代理模式（Proxy Pattern）是一种结构型设计模式，包括2个主要角色：代理对象和目标对象（真实对象）。 代理对象和目标对象实现相同的接口，这样，客户端就可以通过代理对象间接访问目标对象，并且可以在代理对象中，调用真实目标对象的前后进行特定的操作。 代码实现 定义主题接口：Subject 实现真实对象类：RealSubject 实现代理...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/design-patterns/structural/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"代理模式"}],["meta",{"property":"og:description","content":"代理模式 代理模式（Proxy Pattern）是一种结构型设计模式，包括2个主要角色：代理对象和目标对象（真实对象）。 代理对象和目标对象实现相同的接口，这样，客户端就可以通过代理对象间接访问目标对象，并且可以在代理对象中，调用真实目标对象的前后进行特定的操作。 代码实现 定义主题接口：Subject 实现真实对象类：RealSubject 实现代理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"使用代理对象","slug":"使用代理对象","link":"#使用代理对象","children":[]}],"git":{},"filePathRelative":"posts/coder/design-patterns/structural/代理模式.md","autoDesc":true}');export{t as data};

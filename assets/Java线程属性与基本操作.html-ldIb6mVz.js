const e=JSON.parse('{"key":"v-16b14d98","path":"/posts/java/se/concurrent/Java%E7%BA%BF%E7%A8%8B%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html","title":"Java线程属性与基本操作","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"Java线程属性与基本操作 线程名称 可以在创建线程时，使用构造器参数设置线程的名称，或者在线程创建后，使用setName(String)方法设置；不设置时，会有默认的名称。 获取线程的名称，可以使用getName()方法。 示例： 线程优先级 线程的调度模型主要有2类： 分时调度模型，所有线程轮流占用CPU时间片 抢占式调度模型，按照线程的优先级分配...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/java/se/concurrent/Java%E7%BA%BF%E7%A8%8B%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"Java线程属性与基本操作"}],["meta",{"property":"og:description","content":"Java线程属性与基本操作 线程名称 可以在创建线程时，使用构造器参数设置线程的名称，或者在线程创建后，使用setName(String)方法设置；不设置时，会有默认的名称。 获取线程的名称，可以使用getName()方法。 示例： 线程优先级 线程的调度模型主要有2类： 分时调度模型，所有线程轮流占用CPU时间片 抢占式调度模型，按照线程的优先级分配..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java线程属性与基本操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"线程名称","slug":"线程名称","link":"#线程名称","children":[]},{"level":2,"title":"线程优先级","slug":"线程优先级","link":"#线程优先级","children":[]},{"level":2,"title":"守护线程","slug":"守护线程","link":"#守护线程","children":[]},{"level":2,"title":"线程休眠","slug":"线程休眠","link":"#线程休眠","children":[]},{"level":2,"title":"线程中断","slug":"线程中断","link":"#线程中断","children":[]},{"level":2,"title":"线程让步","slug":"线程让步","link":"#线程让步","children":[]},{"level":2,"title":"线程合并","slug":"线程合并","link":"#线程合并","children":[]},{"level":2,"title":"线程生命周期","slug":"线程生命周期","link":"#线程生命周期","children":[]}],"git":{},"filePathRelative":"posts/java/se/concurrent/Java线程属性与基本操作.md","autoDesc":true}');export{e as data};

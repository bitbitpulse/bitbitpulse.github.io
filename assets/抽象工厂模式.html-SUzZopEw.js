const t=JSON.parse('{"key":"v-7172a425","path":"/posts/coder/design-patterns/creational/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html","title":"抽象工厂模式","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"抽象工厂模式 抽象工厂模式（Abstract Factory），在抽象工厂接口中，定义一系列创建产品的方法，由具体工厂实现。 代码实现 定义抽象产品接口及具体产品类 定义抽象工厂接口及具体实现类 使用抽象工厂创建对象 优缺点 优点： 1一个工厂可以创建多种产品，解决了工厂方法模式中，工厂类爆炸的问题 缺点： 如果需要添加新的产品接口，需要修改工厂接口及...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/design-patterns/creational/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"抽象工厂模式"}],["meta",{"property":"og:description","content":"抽象工厂模式 抽象工厂模式（Abstract Factory），在抽象工厂接口中，定义一系列创建产品的方法，由具体工厂实现。 代码实现 定义抽象产品接口及具体产品类 定义抽象工厂接口及具体实现类 使用抽象工厂创建对象 优缺点 优点： 1一个工厂可以创建多种产品，解决了工厂方法模式中，工厂类爆炸的问题 缺点： 如果需要添加新的产品接口，需要修改工厂接口及..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[{"level":3,"title":"定义抽象产品接口及具体产品类","slug":"定义抽象产品接口及具体产品类","link":"#定义抽象产品接口及具体产品类","children":[]},{"level":3,"title":"定义抽象工厂接口及具体实现类","slug":"定义抽象工厂接口及具体实现类","link":"#定义抽象工厂接口及具体实现类","children":[]}]},{"level":2,"title":"使用抽象工厂创建对象","slug":"使用抽象工厂创建对象","link":"#使用抽象工厂创建对象","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}],"git":{},"filePathRelative":"posts/coder/design-patterns/creational/抽象工厂模式.md","autoDesc":true}');export{t as data};

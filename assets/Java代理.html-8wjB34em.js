const e=JSON.parse('{"key":"v-5810925a","path":"/posts/java/se/Java%E4%BB%A3%E7%90%86.html","title":"Java代理","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"Java代理 静态代理设计模式 示例： JDK动态代理 JDK动态代理是Java实现动态代理的一种方式，是基于接口的代理模式。 JDK动态代理通过ava.lang.reflect.Proxy和java.lang.reflect.InvocationHandler这2个接口实现。 示例： CGLIB动态代理 CGLIB(Code Generation L...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/java/se/Java%E4%BB%A3%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"Java代理"}],["meta",{"property":"og:description","content":"Java代理 静态代理设计模式 示例： JDK动态代理 JDK动态代理是Java实现动态代理的一种方式，是基于接口的代理模式。 JDK动态代理通过ava.lang.reflect.Proxy和java.lang.reflect.InvocationHandler这2个接口实现。 示例： CGLIB动态代理 CGLIB(Code Generation L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java代理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"静态代理设计模式","slug":"静态代理设计模式","link":"#静态代理设计模式","children":[]},{"level":2,"title":"JDK动态代理","slug":"jdk动态代理","link":"#jdk动态代理","children":[]},{"level":2,"title":"CGLIB动态代理","slug":"cglib动态代理","link":"#cglib动态代理","children":[]}],"git":{},"filePathRelative":"posts/java/se/Java代理.md","autoDesc":true}');export{e as data};

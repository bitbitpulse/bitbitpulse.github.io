const e=JSON.parse('{"key":"v-afc44436","path":"/posts/java/se/concurrent/Java%E7%BA%BF%E7%A8%8B%E9%94%81.html","title":"Java线程锁","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"Java线程锁 锁的分类 从不同角度，锁可以分为以下几类： 可重入锁和不可重入锁，1个线程是否可以重复占有同1个锁 悲观锁和乐观锁，线程进入临界区前，是否锁住同步资源 公平锁和非公平锁，公平锁保证获取锁的机会是平等的，先到先得。 可中断锁和不可中断锁，在抢锁的时候，是否可以中断抢锁 共享锁和独占锁，是否允许多个线程同时获取锁 内置锁 内置锁（隐式锁，对...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/java/se/concurrent/Java%E7%BA%BF%E7%A8%8B%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"Java线程锁"}],["meta",{"property":"og:description","content":"Java线程锁 锁的分类 从不同角度，锁可以分为以下几类： 可重入锁和不可重入锁，1个线程是否可以重复占有同1个锁 悲观锁和乐观锁，线程进入临界区前，是否锁住同步资源 公平锁和非公平锁，公平锁保证获取锁的机会是平等的，先到先得。 可中断锁和不可中断锁，在抢锁的时候，是否可以中断抢锁 共享锁和独占锁，是否允许多个线程同时获取锁 内置锁 内置锁（隐式锁，对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java线程锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"锁的分类","slug":"锁的分类","link":"#锁的分类","children":[]},{"level":2,"title":"内置锁","slug":"内置锁","link":"#内置锁","children":[{"level":3,"title":"同步代码块","slug":"同步代码块","link":"#同步代码块","children":[]},{"level":3,"title":"同步方法","slug":"同步方法","link":"#同步方法","children":[]},{"level":3,"title":"静态同步方法","slug":"静态同步方法","link":"#静态同步方法","children":[]},{"level":3,"title":"内置锁的4种状态","slug":"内置锁的4种状态","link":"#内置锁的4种状态","children":[{"level":4,"title":"无锁","slug":"无锁","link":"#无锁","children":[]},{"level":4,"title":"偏向锁","slug":"偏向锁","link":"#偏向锁","children":[]},{"level":4,"title":"轻量级锁","slug":"轻量级锁","link":"#轻量级锁","children":[]},{"level":4,"title":"重量级锁","slug":"重量级锁","link":"#重量级锁","children":[]}]}]},{"level":2,"title":"显式锁","slug":"显式锁","link":"#显式锁","children":[{"level":3,"title":"Lock接口","slug":"lock接口","link":"#lock接口","children":[]},{"level":3,"title":"ReentrantLock","slug":"reentrantlock","link":"#reentrantlock","children":[{"level":4,"title":"实现公平锁与非公平锁","slug":"实现公平锁与非公平锁","link":"#实现公平锁与非公平锁","children":[]},{"level":4,"title":"实现中断锁与不可中断锁","slug":"实现中断锁与不可中断锁","link":"#实现中断锁与不可中断锁","children":[]}]},{"level":3,"title":"ReadWriteLock","slug":"readwritelock","link":"#readwritelock","children":[]},{"level":3,"title":"Semaphore","slug":"semaphore","link":"#semaphore","children":[]},{"level":3,"title":"StampedLock","slug":"stampedlock","link":"#stampedlock","children":[]}]},{"level":2,"title":"线程间通信","slug":"线程间通信","link":"#线程间通信","children":[{"level":3,"title":"基于隐式锁实现\\"等待-通知\\"","slug":"基于隐式锁实现-等待-通知","link":"#基于隐式锁实现-等待-通知","children":[]},{"level":3,"title":"基于显式锁实现\\"等待-通知\\"","slug":"基于显式锁实现-等待-通知","link":"#基于显式锁实现-等待-通知","children":[]}]},{"level":2,"title":"死锁","slug":"死锁","link":"#死锁","children":[]}],"git":{},"filePathRelative":"posts/java/se/concurrent/Java线程锁.md","autoDesc":true}');export{e as data};

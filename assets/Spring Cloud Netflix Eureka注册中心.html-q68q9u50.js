import{_ as a,o as n,c as s,d as t}from"./app-HBA039kk.js";const e="/assets/20240209205525-ZMYXnJC-.png",p="/assets/20240209213445-cOj488Tf.png",o="/assets/20240209213508-COIxJOEm.png",c={},l=t(`<h1 id="spring-cloud-netflix-eureka注册中心" tabindex="-1"><a class="header-anchor" href="#spring-cloud-netflix-eureka注册中心"><span>Spring Cloud Netflix Eureka注册中心</span></a></h1><p>参考：</p><ul><li>https://docs.spring.io/spring-cloud-netflix/reference/index.html</li></ul><p>版本信息：</p><ul><li>Java 17</li><li>Spring Boot 3.0.2</li><li>Spring Cloud 2022.0.0</li><li>Netflix Eureka 4.0.0</li></ul><h2 id="eureka注册中心服务端" tabindex="-1"><a class="header-anchor" href="#eureka注册中心服务端"><span>Eureka注册中心服务端</span></a></h2><h3 id="eureka单机模式" tabindex="-1"><a class="header-anchor" href="#eureka单机模式"><span>Eureka单机模式</span></a></h3><p>1.创建SpirngBoot应用</p><p>2.添加<code>spring-cloud-starter-netflix-eureka-server</code>依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>3.配置</p><p>默认情况下，Eureka服务端同时也是Eureka客户端，单机模式时，需要关闭客户端行为（维持心跳、拉取注册信息等）</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8761</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">eureka-server</span>

<span class="token key attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>
<span class="token key attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token key attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token key attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token value attr-value">http://\${eureka.instance.hostname}:\${server.port}/eureka/</span>
</code></pre></div><p>4.在启动引导类上添加<code>@EnableEurekaServer</code>注解</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaServerApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>5.测试</p><p>启动应用，访问 http://localhost:8761/</p><p><img src="`+e+`" alt=""></p><h3 id="eureka集群模式" tabindex="-1"><a class="header-anchor" href="#eureka集群模式"><span>Eureka集群模式</span></a></h3><blockquote><p>本机可以通过修改hosts文件，模拟多台主机，hosts文件位置：</p><ul><li><p>windows: C:\\Windows\\System32\\drivers\\etc\\hosts</p></li><li><p>linux: /etc/hosts</p></li></ul><p>添加域名映射，例如：</p><ul><li>127.0.0.1 eureka-a</li><li>127.0.0.1 eureka-b</li></ul></blockquote><p>1.为每一个Eureka实例创建一个application配置文件</p><blockquote><p>注意：<code>eureka.client.service-url.defaultZone</code>中，defaultZone不能写为default-zone，否则不生效。</p></blockquote><p><em>application-peer-a.properties</em></p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8761</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">eureka-server-a</span>

<span class="token key attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token value attr-value">eureka-a</span>
<span class="token key attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token value attr-value">http://eureka-b:8762/eureka/</span>
</code></pre></div><p><em>application-peer-b.properties</em></p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8762</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">eureka-server-b</span>

<span class="token key attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token value attr-value">eureka-b</span>
<span class="token key attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token value attr-value">http://eureka-a:8761/eureka/</span>
</code></pre></div><p>2.启动2个Eureka实例</p><p>依次使用<code>-Dspring.profiles.active=peer-a</code>和<code>-Dspring.profiles.active=peer-b</code>启动2个Eureka服务器</p><p>访问 http://eureka-a:8761/eureka/</p><p><img src="`+p+'" alt=""></p><p>访问 http://eureka-b:8762/eureka/</p><p><img src="'+o+`" alt=""></p><h3 id="服务端自我保护模式" tabindex="-1"><a class="header-anchor" href="#服务端自我保护模式"><span>服务端自我保护模式</span></a></h3><p>默认情况下，在一段时间未收到客户端的心跳包时（3次心跳检测时间间隔之内），Eureka服务器并不会立即将其从注册表中移除。与客户端发送心跳包的时间间隔以及租约到期时间搭配使用。</p><p>可以通过下面的配置项关闭自我保护模式</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">eureka.server.enable-self-preservation</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre></div><h2 id="eureka注册中心客户端" tabindex="-1"><a class="header-anchor" href="#eureka注册中心客户端"><span>Eureka注册中心客户端</span></a></h2><h3 id="应用注册到eureka注册中心" tabindex="-1"><a class="header-anchor" href="#应用注册到eureka注册中心"><span>应用注册到Eureka注册中心</span></a></h3><p>1.添加依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>2.配置</p><p>Eureka单机模式</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">11010</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">eureka-provider-a</span>

<span class="token key attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>
<span class="token key attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:8761/eureka/</span>
</code></pre></div><p>Eureka集群模式</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">#eureka.instance.hostname=localhost</span>
<span class="token key attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token value attr-value">http://eureka-a:8761/eureka/,http://eureka-b:8762/eureka/</span>
</code></pre></div><p>3.启用Eureka服务发现(可选)</p><blockquote><p>注意：Spring Cloud 2022.0.0之后，<code>@EnableEurekaClient</code>注解已被移除，可以使用<code>@EnableDiscoveryClient</code>替代，或者使用较早版本，例如Spring Cloud 2021.0.9</p></blockquote><p>只要添加了<code>spring-cloud-starter-netflix-eureka-client</code>依赖，应用默认启用Eureka服务发现。</p><p><code>@EnableEurekaClient</code>或<code>@EnableDiscoveryClient</code>注解是可选的。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaConsumerAApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaConsumerAApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="使用ip注册客户端实例" tabindex="-1"><a class="header-anchor" href="#使用ip注册客户端实例"><span>使用IP注册客户端实例</span></a></h3><p>应用注册到Eureka服务器时，默认使用hostname。推荐使用IP注册。</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><h3 id="修改客户端实例id" tabindex="-1"><a class="header-anchor" href="#修改客户端实例id"><span>修改客户端实例ID</span></a></h3><p>默认客户端实例ID为：<em>\${spring.cloud.client.hostname}😒{spring.application.name}😒{spring.application.instance_id:\${server.port}}</em></p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">11010</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">eureka-provider-a</span>

<span class="token key attr-name">eureka.instance.instance-id</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.application.name}:\${server.port}</span>
</code></pre></div><h3 id="调整客户端应用发送心跳包的时间间隔和租约过期时间" tabindex="-1"><a class="header-anchor" href="#调整客户端应用发送心跳包的时间间隔和租约过期时间"><span>调整客户端应用发送心跳包的时间间隔和租约过期时间</span></a></h3><p>客户端默认发送心跳包的间隔时间为30s，租约过期时间为90s。当Eureka服务器开启自我保护模式时，过期后，才会被Eureka服务器从注册表中移除。</p><p>可以通过下面配置项进行调整</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">eureka.instance.lease-renewal-interval-in-seconds</span><span class="token punctuation">=</span><span class="token value attr-value">30</span>
<span class="token key attr-name">eureka.instance.lease-expiration-duration-in-seconds</span><span class="token punctuation">=</span><span class="token value attr-value">90</span>
</code></pre></div><h3 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现"><span>服务发现</span></a></h3><p>使用<code>EurekaClient</code>或<code>DiscoveryClient</code>发现服务，从Eureka注册中心获取注册表信息。</p><p><code>com.netflix.discovery.EurekaClient</code></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> <span class="token class-name">EurekaClient</span> eurekaClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/eureka/instances&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">instancesByEurekaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">InstanceInfo</span> eurekaProviderAInstance <span class="token operator">=</span> eurekaClient<span class="token punctuation">.</span><span class="token function">getNextServerFromEureka</span><span class="token punctuation">(</span><span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">InstanceInfo</span> eurekaConsumerAInstance <span class="token operator">=</span> eurekaClient<span class="token punctuation">.</span><span class="token function">getNextServerFromEureka</span><span class="token punctuation">(</span><span class="token string">&quot;eureka-consumer-a&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;服务: %s, 实例ID: %s, 实例Host: %s, 实例Port: %s&quot;</span><span class="token punctuation">,</span>
                                  eurekaProviderAInstance<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  eurekaProviderAInstance<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eurekaProviderAInstance<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eurekaProviderAInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>org.springframework.cloud.client.discovery.DiscoveryClient</code></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/discovery/instances&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">instancesByDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;服务: %s\\n&quot;</span><span class="token punctuation">,</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;\\t实例: id=%s %s:%s\\n&quot;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="服务调用" tabindex="-1"><a class="header-anchor" href="#服务调用"><span>服务调用</span></a></h3><p>在Eureka客户端应用中添加<code>spring-cloud-starter-netflix-eureka-client</code>依赖，同时包含了<code>spring-cloud-starter-loadbalancer</code>，默认支持负载均衡。</p><p>在服务提供者中添加一个Controller方法，用于测试</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/provider-a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;hello, %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在服务消费者中。注入一个<code>RestTemplate</code>类型的Bean，并使用<code>@LoadBalanced</code>注解开启负载均衡</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>添加一个Controller方法，使用服务ID调用服务提供者中的接口</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer-a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://{serviceId}/provider-a/hello?name={name}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>测试，访问服务消费者接口 http://localhost:12099/consumer-a/hello?name=tom，响应</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>hello, tom
</code></pre></div>`,76),u=[l];function i(r,k){return n(),s("div",null,u)}const g=a(c,[["render",i],["__file","Spring Cloud Netflix Eureka注册中心.html.vue"]]);export{g as default};

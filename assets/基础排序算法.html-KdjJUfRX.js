const t=JSON.parse('{"key":"v-fd9d3246","path":"/posts/coder/algorithm/sort/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html","title":"基础排序算法","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"基础排序算法 选择排序 选择排序（Selection Sort）： 首先，找到数组中最小的元素，将其与数组第1个元素交换位置； 然后，在剩下的元素中，找到最小的元素，将其与数组第2个元素交换位置； 如此往复，直到最后一个元素。 冒泡排序 冒泡排序（Bubble Sort）： 从前到后比较数组中的元素，将较大的元素向后移动。 第1轮比较后，最大的元素排在...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/algorithm/sort/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"基础排序算法"}],["meta",{"property":"og:description","content":"基础排序算法 选择排序 选择排序（Selection Sort）： 首先，找到数组中最小的元素，将其与数组第1个元素交换位置； 然后，在剩下的元素中，找到最小的元素，将其与数组第2个元素交换位置； 如此往复，直到最后一个元素。 冒泡排序 冒泡排序（Bubble Sort）： 从前到后比较数组中的元素，将较大的元素向后移动。 第1轮比较后，最大的元素排在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础排序算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"选择排序","slug":"选择排序","link":"#选择排序","children":[]},{"level":2,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":2,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[]},{"level":2,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":2,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]}],"git":{},"filePathRelative":"posts/coder/algorithm/sort/基础排序算法.md","autoDesc":true}');export{t as data};

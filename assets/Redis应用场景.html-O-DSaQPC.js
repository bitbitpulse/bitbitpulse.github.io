import{_ as n,o as s,c as a,d as t}from"./app-HBA039kk.js";const p={},o=t(`<h1 id="redis应用场景" tabindex="-1"><a class="header-anchor" href="#redis应用场景"><span>Redis应用场景</span></a></h1><p>参考：</p><ul><li>数据类型：https://redis.io/docs/data-types/</li><li>命令大全：https://redis.io/commands/</li></ul><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h2><p>将Java对象序列化为字符串，保存到Redis中，并设置缓存有效时间。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取用户信息:
 * 1.优先从Redis缓存中获取
 * 2.如果Redis中存在,直接返回; 如果不存在,再从数据库中查询,缓存到Redis并返回
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">UserInfo</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;u:info:&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">UserInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token function">selectUserInfo</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            value <span class="token operator">=</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            client<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">60L</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存有效期30min</span>
            <span class="token keyword">return</span> userInfo<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 模拟查询数据库
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">UserInfo</span> <span class="token function">selectUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userInfo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userInfo<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userInfo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> userInfo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="计数器" tabindex="-1"><a class="header-anchor" href="#计数器"><span>计数器</span></a></h2><p>使用string的<code>incr</code>命令，或者hash的<code>hincrby</code>命令实现计数器</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 文章访问量计数器
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">incrPostVisitCount</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> postId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;post:visits&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>postId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 查询文章访问量
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getPostVisitCount</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> postId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;post:visits&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>postId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="http-session共享" tabindex="-1"><a class="header-anchor" href="#http-session共享"><span>HTTP Session共享</span></a></h2><p>分布式系统中，将Session信息统一存储到Redis中，从而实现Session共享。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 缓存Session
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveSession</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;u:session&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 查询Session
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;u:session&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="限制频率" tabindex="-1"><a class="header-anchor" href="#限制频率"><span>限制频率</span></a></h2><p>发送短信验证码接口中，限制每分钟最多只能向同一个手机号发送1条短信</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 发送验证码,限制每分钟只能发送一次
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendSMSVerification</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;sms:code:&quot;</span> <span class="token operator">+</span> phone<span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SetParams</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        params<span class="token punctuation">.</span><span class="token function">nx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 不存在</span>
              <span class="token punctuation">.</span><span class="token function">ex</span><span class="token punctuation">(</span><span class="token number">60L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 过期时间60s</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> code<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送验证码: &quot;</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最近60s已经发送过1次验证码, 不允许发送&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 从Redis中查询验证码
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSMSVerification</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;sms:code:&quot;</span> <span class="token operator">+</span> phone<span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="实现栈和队列数据结构" tabindex="-1"><a class="header-anchor" href="#实现栈和队列数据结构"><span>实现栈和队列数据结构</span></a></h2><p>利用list可以实现栈和队列数据结构。</p><p>栈：<code>lpush</code> +<code>lpop</code> 或 <code>rpush</code>+<code>rpop</code></p><p>队列：<code>lpush</code>+<code>rpop</code> 或 <code>rpush</code>+<code>lpop</code></p><p>阻塞队列：<code>lpush</code>+<code>brpop</code> 或 <code>rpush</code>+<code>blpop</code></p><p>以及用<code>exists</code>判断是否存在，<code>llen</code>查询集合大小。</p><h2 id="排行榜" tabindex="-1"><a class="header-anchor" href="#排行榜"><span>排行榜</span></a></h2><p>使用zset实现排行榜系统：最新文章排行榜、得分排行榜</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 发布文章:
 * 1.保存文章信息
 * 2.添加文章到时间排行榜zset中
 * 3.添加文章到得分排行榜zset中
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addPost</span><span class="token punctuation">(</span><span class="token class-name">Post</span> post<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> postInfoKey <span class="token operator">=</span> <span class="token string">&quot;post:&quot;</span> <span class="token operator">+</span> post<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 保存文章信息的hash</span>
    <span class="token class-name">String</span> postRankingByTimeKey <span class="token operator">=</span> <span class="token string">&quot;post:rank:time&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// 文章排行榜zset: 按照发布时间排序</span>
    <span class="token class-name">String</span> postRankingByScoreKey <span class="token operator">=</span> <span class="token string">&quot;post:rank:score&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 文章排行榜zset: 按照得分排序</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">hmset</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">,</span> <span class="token function">translatePost2Map</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        client<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span>postRankingByTimeKey<span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 分值为时间戳</span>
        client<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span>postRankingByScoreKey<span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分值为时间戳</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 投票:
 * 1.更新得分排行榜zset中相应的元素, 每得1票, 分值增加100
 * 2.更新文章信息hash, 票数加1
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">votePost</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> postId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> postInfoKey <span class="token operator">=</span> <span class="token string">&quot;post:&quot;</span> <span class="token operator">+</span> postId<span class="token punctuation">;</span>
    <span class="token class-name">String</span> postRankingByScoreKey <span class="token operator">=</span> <span class="token string">&quot;post:rank:score&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">zincrby</span><span class="token punctuation">(</span>postRankingByScoreKey<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        client<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">,</span> <span class="token string">&quot;votes&quot;</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 查询最新文章Top10:
 * 1.从文章发布时间排行榜zset中获取最新的10篇文章ID
 * 2.从hash查询每篇文章的详细信息
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span> <span class="token function">latestPostRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span> posts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> postRankingByTimeKey <span class="token operator">=</span> <span class="token string">&quot;post:rank:time&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> postInfoKeys <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span>postRankingByTimeKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> postInfoKey <span class="token operator">:</span> postInfoKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> postId <span class="token operator">=</span> postInfoKey<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> postId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            posts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">translateMap2Post</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> posts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 查询得分最高的文章Top10:
 * 1.从文章得分排行榜zset中获取得分最高的10篇文章ID
 * 2.从hash查询每篇文章的详细信息
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span> <span class="token function">hotPostRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span> posts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> postRankingByScoreKey <span class="token operator">=</span> <span class="token string">&quot;post:rank:score&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> postInfoKeys <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span>postRankingByScoreKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> postInfoKey <span class="token operator">:</span> postInfoKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> postId <span class="token operator">=</span> postInfoKey<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> postId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            posts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">translateMap2Post</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> posts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">translatePost2Map</span><span class="token punctuation">(</span><span class="token class-name">Post</span> post<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;votes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Post</span> <span class="token function">translateMap2Post</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Post</span> post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setLink</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;createTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setVotes</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;votes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> post<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,24),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(p,[["render",e],["__file","Redis应用场景.html.vue"]]);export{i as default};

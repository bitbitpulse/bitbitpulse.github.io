import{_ as s,r as t,o as p,c as o,a,e,b as c,d as l}from"./app-HBA039kk.js";const u={},i=a("h1",{id:"java新特性总结",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java新特性总结"},[a("span",null,"Java新特性总结")])],-1),k={class:"custom-container tip"},r=a("p",{class:"custom-container-title"},"参考",-1),d={href:"https://www.oracle.com/java/technologies/javase/jdk-relnotes-index.html",target:"_blank",rel:"noopener noreferrer"},m=l(`<h2 id="_8" tabindex="-1"><a class="header-anchor" href="#_8"><span>8</span></a></h2><h3 id="接口中的默认方法和静态方法" tabindex="-1"><a class="header-anchor" href="#接口中的默认方法和静态方法"><span>接口中的默认方法和静态方法</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式接口"><span>函数式接口</span></a></h3><p>函数式接口表示有且仅有1个抽象方法的接口。</p><p>注意，<code>java.lang.Object</code>中的方法不计入数量。可以存在非抽象的default方法或static方法。</p><p>函数式接口用于接收Lambda表达式和方法引用。</p><p>定义函数式接口时，推荐用<code>@FunctionalInterface</code>注解进行标注</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomFunctionalInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>java.util.function</code>包中预定义了许多函数是接口，常见的几个如下：</p><table><thead><tr><th>函数式接口</th><th>函数签名</th></tr></thead><tbody><tr><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>BiPredicate&lt;T, U&gt;</code></td><td><code>(T, U) -&gt; boolean</code></td></tr><tr><td><code>Consumer&lt;T&gt;</code></td><td><code>T -&gt; void</code></td></tr><tr><td><code>BiConsumer&lt;T, U&gt;</code></td><td>(T, U) -&gt; void</td></tr><tr><td><code>Supplier&lt;T&gt;</code></td><td><code>() -&gt; T</code></td></tr><tr><td><code>Function&lt;T, R&gt;</code></td><td><code>T -&gt; R</code></td></tr><tr><td><code>BiFunction&lt;T, U, R&gt;</code></td><td><code>(T, U) -&gt; R</code></td></tr></tbody></table><p>还有一些老版本的API接口，在Java8中，也被声明成了函数式接口，常见的几个如下：</p><table><thead><tr><th>函数式接口</th><th>函数签名</th></tr></thead><tbody><tr><td><code>java.lang.Runnable</code></td><td><code>() -&gt; void</code></td></tr><tr><td><code>java.util.concurrent.Callable&lt;V&gt;</code></td><td><code>() -&gt; V</code></td></tr><tr><td><code>java.util.Comparator&lt;T&gt;</code></td><td><code>(T, T) -&gt; int</code></td></tr></tbody></table><h3 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>Lambda表达式</span></a></h3><p>Lambda表达式有2种语法风格：</p><ol><li><p>表达式风格</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>(parameters) -&gt; expression
</code></pre></div></li><li><p>块风格</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>(parameters) -&gt; { statements }
</code></pre></div></li></ol><p>Lambda表达式可以使用函数式接口接收，有效的Lambda表达式示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> biConsumer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> a<span class="token punctuation">,</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> a<span class="token punctuation">,</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Lambda表达式中，允许使用自由变量(定义在外层作用域的变量)。但是，不允许在Lambda中修改自由局部变量，推荐将其声明为final变量。</p><p>不推荐的写法</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 修改实例变量(静态变量), OK</span>
        b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 修改外层方法参数, 报错</span>
        c <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 修改外层局部变量, 报错</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>推荐的写法，将自由局部变量声明为final</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 实例变量(静态变量), 允许修改</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="方法引用和构造函数引用" tabindex="-1"><a class="header-anchor" href="#方法引用和构造函数引用"><span>方法引用和构造函数引用</span></a></h3><h4 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用"><span>方法引用</span></a></h4><p>方法引用是Lambda表达式的快捷写法，如果1个Lambda表达式仅仅是调用目标的某个方法，就可以使用方法引用进行替换。</p><p>方法引用主要有3类</p><table><thead><tr><th>方法引用</th><th>等价的Lambda表达式</th><th>说明</th></tr></thead><tbody><tr><td><code>ClassName::staticMethod</code></td><td><code>(args) -&gt; ClassName.staticMethod(args)</code></td><td>调用静态方法</td></tr><tr><td><code>ClassName::instanceMethod</code></td><td><code>(instance, args) -&gt; instance.instanceMethod(args)</code></td><td>instance是ClassName类型</td></tr><tr><td><code>obj::instanceMethod</code></td><td><code>(args) -&gt; obj.instanceMethod(args)</code></td><td>obj是已存在的对象</td></tr></tbody></table><h4 id="构造函数引用" tabindex="-1"><a class="header-anchor" href="#构造函数引用"><span>构造函数引用</span></a></h4><p>构造函数引用语法为：<code>ClassName::new</code>。</p><p>示例：</p><table><thead><tr><th>构造函数签名</th><th>构造函数引用</th><th>等价的Lambda表达式</th></tr></thead><tbody><tr><td><code>ClassName()</code></td><td><code>ClassName::new</code></td><td><code>() -&gt; new ClassName()</code></td></tr><tr><td><code>ClassName(T, U)</code></td><td><code>ClassName::new</code></td><td><code>(t, u) -&gt; new ClassName(t, u)</code></td></tr><tr><td><code>ClassName(T, U, V)</code></td><td><code>ClassName::new</code></td><td><code>(t, u, v) -&gt; new ClassName(t, u, v)</code></td></tr></tbody></table><h3 id="stream-api" tabindex="-1"><a class="header-anchor" href="#stream-api"><span>Stream API</span></a></h3><h4 id="中间操作" tabindex="-1"><a class="header-anchor" href="#中间操作"><span>中间操作</span></a></h4><ul><li><p>过滤</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>去重</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>限制元素个数</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>跳过前n个元素</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>映射</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>流的扁平化</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-&gt;</span> word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [h, e, l, l, o, w, o, r, l, d]</span>
</code></pre></div></li></ul><h4 id="终端操作" tabindex="-1"><a class="header-anchor" href="#终端操作"><span>终端操作</span></a></h4><ul><li><p>遍历</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>计数</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">long</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>获取第一个元素</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>获取任意一个元素</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>匹配任意一个元素</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>匹配全部元素</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>不匹配全部元素</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>归约</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 求和</span>
<span class="token class-name">Integer</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始值0</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无初始值</span>
</code></pre></div></li></ul><h4 id="数值流" tabindex="-1"><a class="header-anchor" href="#数值流"><span>数值流</span></a></h4><ul><li><p>普通流转换为数值流</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">IntStream</span> intStream <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DoubleStream</span> doubleStream <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LongStream</span> longStream <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToLong</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>数值流转换为普通流</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Integerstream</span> <span class="token operator">=</span> intStream<span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>生成数值范围流</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">IntStream</span> intRangeStream <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// [1, 10)</span>
<span class="token class-name">IntStream</span> intRangeClosedStream <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 10]</span>
<span class="token class-name">LongStream</span> longRangeStream <span class="token operator">=</span> <span class="token class-name">LongStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LongStream</span> longRangeClosedStream <span class="token operator">=</span> <span class="token class-name">LongStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>数值流常见操作</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">OptionalInt</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OptionalInt</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OptionalDouble</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li></ul><h3 id="optional类" tabindex="-1"><a class="header-anchor" href="#optional类"><span><code>Optional</code>类</span></a></h3><p>声明<code>Optional</code></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 值为null</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 值非null</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 值可以为null</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>提取Optional中的值</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 如果值为null, 抛出异常NoSuchElementException</span>
<span class="token class-name">Integer</span> i <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果值为null, 返回默认值</span>
<span class="token class-name">Integer</span> i <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果值为null, 抛出自定义异常</span>
<span class="token class-name">Integer</span> i <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;值为null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>注意，<code>Optional&lt;T&gt;</code>设计的初衷，仅仅是为了支持方法返回<code>Optional</code>对象的语法，不建议在domain类中将实例变量定义为<code>Optional</code>类型，因为它不支持序列化。</p><h3 id="新日期时间api" tabindex="-1"><a class="header-anchor" href="#新日期时间api"><span>新日期时间API</span></a></h3><p><em>java.time</em>包</p><h3 id="并行数组操作api" tabindex="-1"><a class="header-anchor" href="#并行数组操作api"><span>并行数组操作API</span></a></h3><h2 id="_9" tabindex="-1"><a class="header-anchor" href="#_9"><span>9</span></a></h2><h3 id="模块化系统" tabindex="-1"><a class="header-anchor" href="#模块化系统"><span>模块化系统</span></a></h3><div class="custom-container tip"><p class="custom-container-title">参考</p><ul><li>https://www.oracle.com/corporate/features/understanding-java-9-modules.html</li></ul></div><p>查看模块列表</p><p><code>java --list-modules</code></p><h3 id="jshell" tabindex="-1"><a class="header-anchor" href="#jshell"><span>JShell</span></a></h3><h3 id="接口中的私有默认方法和私有静态方法" tabindex="-1"><a class="header-anchor" href="#接口中的私有默认方法和私有静态方法"><span>接口中的私有默认方法和私有静态方法</span></a></h3><h2 id="_10" tabindex="-1"><a class="header-anchor" href="#_10"><span>10</span></a></h2><h3 id="本地变量类型推断" tabindex="-1"><a class="header-anchor" href="#本地变量类型推断"><span>本地变量类型推断</span></a></h3><div class="custom-container tip"><p class="custom-container-title">参考</p><ul><li>https://developer.oracle.com/zh/learn/technical-articles/jdk-10-local-variable-type-inference</li></ul></div><h2 id="_11" tabindex="-1"><a class="header-anchor" href="#_11"><span>11</span></a></h2><h3 id="新的http和websocket客户端api" tabindex="-1"><a class="header-anchor" href="#新的http和websocket客户端api"><span>新的HTTP和WebSocket客户端API</span></a></h3><h2 id="_12" tabindex="-1"><a class="header-anchor" href="#_12"><span>12</span></a></h2><h2 id="_13" tabindex="-1"><a class="header-anchor" href="#_13"><span>13</span></a></h2><h2 id="_14" tabindex="-1"><a class="header-anchor" href="#_14"><span>14</span></a></h2><h2 id="_15" tabindex="-1"><a class="header-anchor" href="#_15"><span>15</span></a></h2><h2 id="_16" tabindex="-1"><a class="header-anchor" href="#_16"><span>16</span></a></h2><h2 id="_17" tabindex="-1"><a class="header-anchor" href="#_17"><span>17</span></a></h2><h2 id="_18" tabindex="-1"><a class="header-anchor" href="#_18"><span>18</span></a></h2><h2 id="_19" tabindex="-1"><a class="header-anchor" href="#_19"><span>19</span></a></h2><h2 id="_20" tabindex="-1"><a class="header-anchor" href="#_20"><span>20</span></a></h2><h2 id="_21" tabindex="-1"><a class="header-anchor" href="#_21"><span>21</span></a></h2>`,70);function g(h,v){const n=t("ExternalLinkIcon");return p(),o("div",null,[i,a("div",k,[r,a("ul",null,[a("li",null,[a("a",d,[e("Oracle JDK Release Notes"),c(n)])])])]),m])}const b=s(u,[["render",g],["__file","Java新特性总结.html.vue"]]);export{b as default};

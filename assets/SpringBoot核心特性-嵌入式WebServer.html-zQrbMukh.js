import{_ as a,o as e,c as n,d as s}from"./app-HBA039kk.js";const t={},c=s(`<h1 id="springboot核心特性-嵌入式webserver" tabindex="-1"><a class="header-anchor" href="#springboot核心特性-嵌入式webserver"><span>SpringBoot核心特性-嵌入式WebServer</span></a></h1><p>SpringBoot将Servlet容器抽象为WebServer</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h2><h3 id="webserver" tabindex="-1"><a class="header-anchor" href="#webserver"><span>WebServer</span></a></h3><p><code>WebServer</code>接口</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WebServer</span> <span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WebServerException</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WebServerException</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">shutDownGracefully</span><span class="token punctuation">(</span><span class="token class-name">GracefulShutdownCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		callback<span class="token punctuation">.</span><span class="token function">shutdownComplete</span><span class="token punctuation">(</span><span class="token class-name">GracefulShutdownResult</span><span class="token punctuation">.</span><span class="token constant">IMMEDIATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>由具体的Servlet容器实现：</p><ul><li><code>TomcatWebServer</code></li><li><code>UndertowWebServer</code></li><li><code>JettyWebServer</code></li><li><code>NettyWebServer</code></li></ul><h3 id="webserverfactory" tabindex="-1"><a class="header-anchor" href="#webserverfactory"><span>WebServerFactory</span></a></h3><p><code>WebServerFactory</code>接口及其子接口<code>ServletWebServerFactory</code>和<code>ReactiveWebServerFactory</code></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WebServerFactory</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletWebServerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">WebServerFactory</span> <span class="token punctuation">{</span>
	<span class="token class-name">WebServer</span> <span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReactiveWebServerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">WebServerFactory</span> <span class="token punctuation">{</span>
	<span class="token class-name">WebServer</span> <span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token class-name">HttpHandler</span> httpHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>ServletWebServerFactory</code>由具体的Servlet容器实现：</p><ul><li><code>TomcatServletWebServerFactory</code></li><li><code>UndertowServletWebServerFactory</code></li><li><code>JettyServletWebServerFactory</code></li></ul><p><code>ReactiveWebServerFactory</code>由具体的Reactive容器实现：</p><ul><li><code>TomcatReactiveWebServerFactory</code></li><li><code>UndertowReactiveWebServerFactory</code></li><li><code>JettyReactiveWebServerFactory</code></li><li><code>NettyReactiveWebServerFactory</code></li></ul><p>在具体的Servlet或Reactive容器工厂中，实现<code>getWebServer</code>方法，创建具体的<code>WebServer</code>实例。</p><h2 id="使用其它servlet容器" tabindex="-1"><a class="header-anchor" href="#使用其它servlet容器"><span>使用其它Servlet容器</span></a></h2><h2 id="使用servlet" tabindex="-1"><a class="header-anchor" href="#使用servlet"><span>使用Servlet</span></a></h2><h2 id="使用filter" tabindex="-1"><a class="header-anchor" href="#使用filter"><span>使用Filter</span></a></h2><h2 id="使用listener" tabindex="-1"><a class="header-anchor" href="#使用listener"><span>使用Listener</span></a></h2>`,20),o=[c];function p(r,l){return e(),n("div",null,o)}const d=a(t,[["render",p],["__file","SpringBoot核心特性-嵌入式WebServer.html.vue"]]);export{d as default};

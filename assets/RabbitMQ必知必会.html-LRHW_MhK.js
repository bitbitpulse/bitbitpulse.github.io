import{_ as n,o as s,c as a,d as t}from"./app-HBA039kk.js";const p={},o=t(`<h1 id="rabbitmq必知必会" tabindex="-1"><a class="header-anchor" href="#rabbitmq必知必会"><span>RabbitMQ必知必会</span></a></h1><h2 id="rabbitmq命令" tabindex="-1"><a class="header-anchor" href="#rabbitmq命令"><span>RabbitMQ命令</span></a></h2><p>查看帮助信息</p><p><code>rabbitmqctl help set_permissions</code></p><p>查看RabbitMQ服务状态</p><p><code>rabbitmqctl status</code></p><p><code>rabbitmqctl cluster_status</code></p><p>查看队列和消息</p><p><code>rabbitmqctl list_queues</code></p><p><code>rabbitmqctl list_queues name messages messages_ready messages_unacknowledged</code></p><p>查看Exchange</p><p><code> rabbitmqctl list_exchanges</code></p><p>查看Binding</p><p><code>rabbitmqctl list_bindings</code></p><p>添加用户</p><p><code>rabbitmqctl add_user root root</code></p><p>给用户设置权限</p><p><code>rabbitmqctl set_permissions -p / root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p><p>给用户设置标签</p><p><code>rabbitmqctl set_user_tags root administrator</code></p><h2 id="rabbitmq模型架构及核心概念" tabindex="-1"><a class="header-anchor" href="#rabbitmq模型架构及核心概念"><span>RabbitMQ模型架构及核心概念</span></a></h2><p>参考：</p><ul><li>https://rabbitmq.com/tutorials/amqp-concepts.html</li></ul><p>RabbitMQ作为一个消息代理(Message Broker)，负责接收、存储、转发消息。</p><p><strong>核心概念</strong></p><ul><li><p>Connection，客户端与RabbitMQ建立TCP长连接。同一时刻，推荐一个客户端不要打开多个连接，使用完毕需要断开</p></li><li><p>Channel，信道，共享单个TCP连接的“轻量级连接”</p></li><li><p>Virtual Hosts，虚拟主机，提供隔离环境</p></li><li><p>Publisher，消息发布者、消息生产者，发布消息到RabbitMQ中</p></li><li><p>Consumer，消息订阅者、消息消费者，从RabbitMQ接收/拉取消息</p></li><li><p>Queue，消息队列、工作队列，存储消息</p></li><li><p>Exchange，交换器，负责将消息发布者发布的消息路由到消息队列中</p></li><li><p>Binding，绑定Exchange与Queue，Exchange根据路由规则将消息路由到目标Queue中。路由规则取决于Exchange类型、routingKey</p></li><li><p>RoutingKey，绑定Exchange与Queue时，指定routingKey；消息发布者发布消息时，指定Exchange和routingKey；2个routingKey进行匹配，其结果用于确定Exchange将消息路由到哪个消息队列</p></li></ul><h2 id="rabbitmq快速开始" tabindex="-1"><a class="header-anchor" href="#rabbitmq快速开始"><span>RabbitMQ快速开始</span></a></h2><p>参考：</p><ul><li>https://rabbitmq.com/tutorials/tutorial-one-java.html</li></ul><p><strong>添加依赖库</strong></p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.20.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>消息发布者示例</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Publisher</span> publisher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        publisher<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        publisher<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;RabbitMQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EXCHANGE_NAME_TEST</span> <span class="token operator">=</span> <span class="token string">&quot;x_test&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME_TEST</span> <span class="token operator">=</span> <span class="token string">&quot;q_test&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ROUTING_KEY_TEST</span> <span class="token operator">=</span> <span class="token string">&quot;r_test&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建ConnectionFactory</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建Connection, Channel</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Channel</span> channel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 声明Exchange</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> xArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>
                    <span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span>  <span class="token comment">// 交换器名称</span>
                    <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">,</span> <span class="token comment">// 交换器类型: direct</span>
                    <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 持久化?</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 自动删除?</span>
                    xArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 声明Queue</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> qAgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>
                    <span class="token constant">QUEUE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token comment">// 队列名称</span>
                    <span class="token boolean">false</span><span class="token punctuation">,</span>           <span class="token comment">// 持久化队列?</span>
                    <span class="token boolean">false</span><span class="token punctuation">,</span>           <span class="token comment">// 独占队列?</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 自动删除队列?</span>
                    qAgs<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 绑定Exchange和Queue</span>
            channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token constant">ROUTING_KEY_TEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 发布消息</span>
            <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> props <span class="token operator">=</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token constant">ROUTING_KEY_TEST</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>消息消费者示例</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME_TEST</span> <span class="token operator">=</span> <span class="token string">&quot;q_test&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建ConnectionFactory</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建Connection, Channel</span>
            <span class="token class-name">Connection</span> conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Channel</span> channel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer: Waiting for messages...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 接收消息</span>
            <span class="token class-name">DeliverCallback</span> deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name">CancelCallback</span> cancelCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>
                    <span class="token constant">QUEUE_NAME_TEST</span><span class="token punctuation">,</span>  <span class="token comment">// 队列名称</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment">// 自动确认消息</span>
                    deliverCallback<span class="token punctuation">,</span>  <span class="token comment">// 消息送达回调</span>
                    cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 取消消费消息回调</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>测试</strong></p><ol><li>启动消息发布者应用</li><li>启动消息消费者应用</li></ol><p>消息消费者输出：</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Consumer: Waiting for messages...
Received message: Hello
Received message: RabbitMQ
</code></pre></div><h2 id="connection与channel" tabindex="-1"><a class="header-anchor" href="#connection与channel"><span>Connection与Channel</span></a></h2><p>参考：</p><ul><li>https://www.rabbitmq.com/uri-spec.html</li></ul><p><code>Connection</code>是客户端与RabbitMQ之间建立TCP连接，<code>Channel</code>是共享同一个<code>Connection</code>的“轻量级连接”。</p><p>通过<code>ConnectionFactory</code>设置连接参数，使用API方法的方式</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>也可以使用URI的方式</p><blockquote><p>注意：vhost如果包含/，需要用%2f代替</p></blockquote><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> uri <span class="token operator">=</span> <span class="token string">&quot;amqp://guest:guest@127.0.0.1:5672/%2f&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>打开连接和信道</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="交换机" tabindex="-1"><a class="header-anchor" href="#交换机"><span>交换机</span></a></h2><h3 id="声明exchange" tabindex="-1"><a class="header-anchor" href="#声明exchange"><span>声明Exchange</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exchange<span class="token punctuation">.</span>DeclareOk</span> <span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token class-name">String</span> exchange<span class="token punctuation">,</span>
                                   <span class="token class-name">String</span> type<span class="token punctuation">,</span>
                                   <span class="token keyword">boolean</span> durable<span class="token punctuation">,</span>
                                   <span class="token keyword">boolean</span> autoDelete<span class="token punctuation">,</span>
                                   <span class="token keyword">boolean</span> internal<span class="token punctuation">,</span>
                                   <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p>参数：</p><ul><li><p>exchange，交换器名称</p></li><li><p>type，交换器类型: direct, fanout, topic, headers</p></li><li><p>durable，是否持久化</p></li><li><p>autoDelete，是否自动删除。与当前交换器绑定的全部交换器和队列都解绑后，自动删除</p></li><li><p>internal，是否属于内置交换器。客户端不能直接发布消息到内置交换器，可以与非内置交换器绑定，客户端发送消息到非内置交换器，间接发送消息到内置交换器。</p></li><li><p>arguments，其它参数</p></li></ul><h3 id="删除exchange" tabindex="-1"><a class="header-anchor" href="#删除exchange"><span>删除Exchange</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exchange<span class="token punctuation">.</span>DeleteOk</span> <span class="token function">exchangeDelete</span><span class="token punctuation">(</span><span class="token class-name">String</span> exchange<span class="token punctuation">,</span> 
                                 <span class="token keyword">boolean</span> ifUnused<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p>参数：</p><ul><li>exchange，交换器名称</li><li>ifUnused，交换器在没有使用时才允许删除？</li></ul><h3 id="exchange类型" tabindex="-1"><a class="header-anchor" href="#exchange类型"><span>Exchange类型</span></a></h3><p>参考：</p><ul><li>https://rabbitmq.com/tutorials/tutorial-five-java.html</li></ul><p><strong>direct</strong></p><p>Queue与当前Exchange绑定时使用的routingKey，与消息发布者发布消息时使用的routingKey完全一样时，Exchange才将消息路由到到Queue。</p><p><strong>topic</strong></p><p>topic类型的Exchange，在绑定Queue时，routingKey模式规则如下:</p><ul><li>使用句点.分割多个单词，例如：<code>a.b.c</code></li><li>使用星号*表示单个单词，例如：<code>a.*.*</code></li><li>使用井号#表示0或多个用句点分割的单词，例如：<code>a.#</code></li></ul><p>消息发布者发布消息时，使用完整的routingKey，如果与绑定Queue时指定的routingKey模式匹配，Exchange就路由消息到该Queue中。</p><p>例如，消息发布者发布消息时，指定的routingKey如下</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token string">&quot;test.x&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;x: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token string">&quot;test.x.y&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;x.y: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>绑定Queue时，routingKey模式如下</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> routingKey1 <span class="token operator">=</span> <span class="token string">&quot;test.*&quot;</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> routingKey1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> routingKey2 <span class="token operator">=</span> <span class="token string">&quot;test.#&quot;</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME_TEST_2</span><span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> routingKey2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>那么：</p><ul><li>QUEUE_NAME_TEST队列，只能收到Exchange转发的routingKey是test.x的消息</li><li>QUEUE_NAME_TEST_2队列，可以收到Exchange转发的routingKey是test.x和test.x.y的消息</li></ul><p>在消息消费者程序中，消费这2个队列中的消息</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME_TEST_2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">DeliverCallback</span> deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;q_test Received message: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">DeliverCallback</span> deliverCallback2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;q_test_2 Received message: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME_TEST_2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deliverCallback2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>输出：</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>q_test Received message: x: 1
q_test_2 Received message: x: 1
q_test_2 Received message: x.y: 1
q_test_2 Received message: x: 2
q_test Received message: x: 2
q_test_2 Received message: x.y: 2
q_test Received message: x: 3
q_test_2 Received message: x: 3
q_test_2 Received message: x.y: 3
</code></pre></div><p><strong>fanout</strong></p><p>广播模式，与当前Exchange绑定的任何Queue，都能收到消息。与routingKey无关。</p><p>例如，消息发布者发布消息，routingKey指定为x</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token string">&quot;fanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>绑定Queue时，routingKey是y</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 声明Exchange</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token string">&quot;fanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 声明一个随机名称队列: 非持久化, 独占, 自动删除</span>
<span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 绑定Exchange和队列</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>运行消息消费者和消息发布者，虽然routingKey不一致，消费者一样可以收到消息</p><p><strong>headers</strong></p><p>不根据routingKey匹配，而是使用headers参数匹配。</p><h3 id="exchange其它属性" tabindex="-1"><a class="header-anchor" href="#exchange其它属性"><span>Exchange其它属性</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;alternate-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x.ae&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 备用交换器</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;x.normal&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h2><p>参考：</p><ul><li>https://rabbitmq.com/queues.html</li></ul><h3 id="声明queue" tabindex="-1"><a class="header-anchor" href="#声明queue"><span>声明Queue</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Queue<span class="token punctuation">.</span>DeclareOk</span> <span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> 
                             <span class="token keyword">boolean</span> durable<span class="token punctuation">,</span> 
                             <span class="token keyword">boolean</span> exclusive<span class="token punctuation">,</span> 
                             <span class="token keyword">boolean</span> autoDelete<span class="token punctuation">,</span>
                             <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p>参数：</p><ul><li>queue，队列名</li><li>durable，持久？</li><li>exclusive，独占？仅对当前连接可用，连接断开自动删除</li><li>autoDelete，自动删除？与该队列连接的消费者都断开时，自动删除</li><li>arguments，其它参数</li></ul><h3 id="删除queue" tabindex="-1"><a class="header-anchor" href="#删除queue"><span>删除Queue</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Queue<span class="token punctuation">.</span>DeleteOk</span> <span class="token function">queueDelete</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span>
                           <span class="token keyword">boolean</span> ifUnused<span class="token punctuation">,</span>
                           <span class="token keyword">boolean</span> ifEmpty<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p>参数：</p><ul><li>queue，队列名称</li><li>ifUnused，队列无客户端在使用时才允许删除？</li><li>ifEmpty，队列为空时才允许删除？</li></ul><h3 id="queue其它属性" tabindex="-1"><a class="header-anchor" href="#queue其它属性"><span>Queue其它属性</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-expires&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 队列过期时间: 1h</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 队列中的消息的过期时间, 1min</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-max-priority&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 队列中的消息的最大优先级</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x.dlx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 死信DLX</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.dlx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 死信路由键</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="绑定queue和exchange" tabindex="-1"><a class="header-anchor" href="#绑定queue和exchange"><span>绑定Queue和Exchange</span></a></h2><p><strong>绑定Queue和Exchange</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Queue<span class="token punctuation">.</span>BindOk</span> <span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> 
                       <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> 
                       <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> 
                       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>解绑Queue和Exchange</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Queue<span class="token punctuation">.</span>UnbindOk</span> <span class="token function">queueUnbind</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> 
                           <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> 
                           <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span>
                           <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>绑定Exchange和Exchange</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exchange<span class="token punctuation">.</span>BindOk</span> <span class="token function">exchangeBind</span><span class="token punctuation">(</span><span class="token class-name">String</span> destination<span class="token punctuation">,</span> 
                             <span class="token class-name">String</span> source<span class="token punctuation">,</span> 
                             <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> 
                             <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p>下面的示例代码中，消息发布者发布消息到source交换器，source交换器将消息转发到destination交换器，destination交换器与队列绑定，最终将消息路由到队列queue</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 交换器source和destination绑定</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;source&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;destination&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeBind</span><span class="token punctuation">(</span><span class="token string">&quot;destination&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;routingKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 交换器destination和队列queue绑定</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;destination&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发布消息到交换器source</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;routingKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>解绑Exchange和Exchange</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exchange<span class="token punctuation">.</span>UnbindOk</span> <span class="token function">exchangeUnbind</span><span class="token punctuation">(</span><span class="token class-name">String</span> destination<span class="token punctuation">,</span> 
                                 <span class="token class-name">String</span> source<span class="token punctuation">,</span> 
                                 <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> 
                                 <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="发布消息" tabindex="-1"><a class="header-anchor" href="#发布消息"><span>发布消息</span></a></h2><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">void</span> <span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">String</span> exchange<span class="token punctuation">,</span> 
                   <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> 
                   <span class="token keyword">boolean</span> mandatory<span class="token punctuation">,</span>
                   <span class="token keyword">boolean</span> immediate<span class="token punctuation">,</span> 
                   <span class="token class-name">BasicProperties</span> props<span class="token punctuation">,</span>
                   <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p>参数：</p><ul><li>exchange，交换器名</li><li>routingKey，路由键</li><li>mandatory，true，消息无法被路由到任何队列时，RabbitMQ将消息返回给发布者；false，直接丢弃。</li><li>immediate，true，消息被路由到的队列上没有任何消费者订阅时，RabbitMQ将消息返回给发布者；false，直接丢弃。(<strong>RabbitMQ3.0后不再支持此参数</strong>)</li><li>props，消息额外属性，共有14个，例如contentType, headers, deliveryMode, priority, expiration等</li><li>body，消息体</li></ul><h3 id="mandatory" tabindex="-1"><a class="header-anchor" href="#mandatory"><span>mandatory</span></a></h3><p>示例</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EXCHANGE_NAME_TEST</span> <span class="token operator">=</span> <span class="token string">&quot;x_test&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            factory<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span><span class="token string">&quot;amqp://guest:guest@127.0.0.1:5672/%2f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Channel</span> channel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> mandatory <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> immediate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME_TEST</span><span class="token punctuation">,</span> <span class="token string">&quot;routingKey&quot;</span><span class="token punctuation">,</span> mandatory<span class="token punctuation">,</span> immediate<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 监听返回值</span>
                <span class="token class-name">ReturnListener</span> returnListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReturnListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturn</span><span class="token punctuation">(</span><span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> <span class="token class-name">String</span> replyText<span class="token punctuation">,</span> <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> 
                            <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Return message: &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">addReturnListener</span><span class="token punctuation">(</span>returnListener<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="消息其它属性" tabindex="-1"><a class="header-anchor" href="#消息其它属性"><span>消息其它属性</span></a></h3><p>props参数类型为<code>AMQP.BasicProperties</code>。</p><p>可以使用工具类<code>MessageProperties</code>中的方法获取常见属性组合的实例：</p><ul><li>MINIMAL_BASIC，所有属性都为null</li><li>MINIMAL_PERSISTENT_BASIC，deliveryMode为2，即持久化消息</li><li>BASIC，contentType为application/octet-stream</li><li>PERSISTENT_BASIC，contentType为application/octet-stream，deliveryMode为2，即持久化消息</li><li>TEXT_PLAIN，contentType为text/plain，deliveryMode为1，priority为0</li><li>PERSISTENT_TEXT_PLAIN，contentType为text/plain，deliveryMode为2，priority为0</li></ul><p>也可以使用<code>AMQP.BasicProperties.Builder</code>自己构建：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;date&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2023&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">deliveryMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 持久化消息</span>
    <span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">&quot;60000&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 过期时间: 1min</span>
    <span class="token punctuation">.</span><span class="token function">replyTo</span><span class="token punctuation">(</span><span class="token string">&quot;callbackQueueName&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 用于RPC,通常设置为回调队列名</span>
    <span class="token punctuation">.</span><span class="token function">correlationId</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 用于RPC, 用于关联请求与响应</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="消费消息" tabindex="-1"><a class="header-anchor" href="#消费消息"><span>消费消息</span></a></h2><h3 id="push模式" tabindex="-1"><a class="header-anchor" href="#push模式"><span>Push模式</span></a></h3><p>Push(推)模式，消息代理主动推送消息给消费者，消费者订阅队列，并提供回调函数处理接收到的消息。</p><p>这种模式适用于需要实时处理消息的场景。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> 
                    <span class="token keyword">boolean</span> autoAck<span class="token punctuation">,</span> 
                    <span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> 
                    <span class="token keyword">boolean</span> noLocal<span class="token punctuation">,</span>
                    <span class="token keyword">boolean</span> exclusive<span class="token punctuation">,</span>
                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">,</span> 
                    <span class="token class-name">DeliverCallback</span> deliverCallback<span class="token punctuation">,</span> 
                    <span class="token class-name">CancelCallback</span> cancelCallback<span class="token punctuation">,</span>
                    <span class="token class-name">ConsumerShutdownSignalCallback</span> shutdownSignalCallback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p>参数：</p><ul><li>queue，订阅的队列名</li><li>autoAck，自动确认？</li><li>consumerTag，消费者标记</li><li>noLocal，不接收同一Connection的消息发布者发布的消息？</li><li>exclusive，独占？</li><li>arguments，其它参数</li><li>deliverCallback，分发消息回调</li><li>cancelCallback，取消分发消息回调</li><li>shutdownSignalCallback，Channel或Connection断开时回调</li></ul><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DeliverCallback</span> deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">CancelCallback</span> cancelCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;consumerTag&quot;</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="pull模式" tabindex="-1"><a class="header-anchor" href="#pull模式"><span>Pull模式</span></a></h3><p>Pull(拉)模式，消费者主动拉取消息。</p><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">GetResponse</span> response <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">basicGet</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="消息分发策略" tabindex="-1"><a class="header-anchor" href="#消息分发策略"><span>消息分发策略</span></a></h2><h3 id="轮询分发" tabindex="-1"><a class="header-anchor" href="#轮询分发"><span>轮询分发</span></a></h3><p>轮询分发(Round-robin-dispatching)，RabbitMQ默认消息分发策略。</p><p>多个消费者订阅同一个队列时，按照轮询的方式，依次将消息分发给不同的消费者。1个消息只会被分发给1个消费者。</p><h3 id="公平分发" tabindex="-1"><a class="header-anchor" href="#公平分发"><span>公平分发</span></a></h3><p>公平分发(Fair-dispatching)，消费方通过调用<code>Channel#basicQos</code>方法，表示其最多只能接收固定个数的未确认消息。这样，RabbitMQ就可以在轮询分发的基础上，根据消费方的工作负载来分配消息。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="队列和消息ttl" tabindex="-1"><a class="header-anchor" href="#队列和消息ttl"><span>队列和消息TTL</span></a></h2><p>TTL(Time-to-live)，存活时间。</p><p>设置队列过期时间</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-expires&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 队列TTL: 1h</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>设置消息过期时间，可以在声明队列的时候统一设置，也可在发布消息时设置单个消息的过期时间</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 队列中的消息TTL: 1min</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">&quot;60000&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 消息TTL: 1min</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;routingKey&quot;</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="几种特殊的队列" tabindex="-1"><a class="header-anchor" href="#几种特殊的队列"><span>几种特殊的队列</span></a></h2><h3 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列"><span>死信队列</span></a></h3><p>死信(Dead-letter)产生的几种情况：</p><ul><li>消息过期</li><li>消息队列已满</li><li>消息被拒绝：<code>channel#basicReject</code>和<code>channel#basicNack</code>，且消息没有重新入队</li></ul><p>在声明一个消息队列时，可以通过参数设置1个<strong>死信交换机</strong>(DLX, Dead-letter-exchange)，这个交换器绑定1个队列，即<strong>死信队列</strong>。RabbitMQ会自动将消息队列中的死信重新发布到DLX，进而被路由到死信队列中。</p><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span><span class="token string">&quot;amqp://guest:guest@127.0.0.1:5672/%2f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 声明DLX和死信队列,并绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;x.dlx&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;q.dlx&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;q.dlx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x.dlx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.dlx&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 声明普通交换机和队列,通过参数指定队列的DLX,并绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;x.normal&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 消息5s后过期,成为死信</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x.dlx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.dlx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;q.normal&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;q.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.normal&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 发布消息到普通交换机,消息过期后成为死信,RabbitMQ自动将其发送到DLX,进而被路由到死信队列</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;x.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.normal&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1200L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="延迟队列" tabindex="-1"><a class="header-anchor" href="#延迟队列"><span>延迟队列</span></a></h3><p>通过TTL和DLX结合，可以实现延迟队列。</p><p>上面的示例中的死信队列就是一个延迟队列：</p><ul><li><p>声明DLX和死信队列，并绑定</p></li><li><p>给普通队列中的消息设置TTL</p></li><li><p>给普通队列设置DLX</p></li><li><p>消息发布到普通队列中，到了过期时间后，成为死信，RabbitMQ自动将死信分发到DLX，进而路由到死信队列</p></li><li><p>消费者消费死信队列中的消息</p></li></ul><h3 id="优先级队列" tabindex="-1"><a class="header-anchor" href="#优先级队列"><span>优先级队列</span></a></h3><p>声明队列的时候，设置队列中消息允许的最大优先级</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-max-priority&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>发布消息时，设置单条消息的优先级</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k&quot;</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc"><span>RPC</span></a></h2><p>远程过程调用(RPC, Remote-procedure-call)。</p><p>参考：</p><ul><li>https://rabbitmq.com/tutorials/tutorial-six-java.html</li></ul><p>RabbitMQ实现RPC的思路：</p><ol><li>定义RPC请求和响应的消息格式</li><li>声明2个队列：接收RPC请求的请求队列、发送RPC响应的响应队列</li><li>客户端发送RPC请求：发送RPC请求到请求队列，监听响应队列中的消息</li><li>服务端处理RPC请求：监听RPC请求队列中的消息，收到请求后执行具体的过程调用逻辑，将响应数据发送到响应队列中</li></ol><h2 id="rabbitmq消息可靠性机制" tabindex="-1"><a class="header-anchor" href="#rabbitmq消息可靠性机制"><span>RabbitMQ消息可靠性机制</span></a></h2><h3 id="消息发布方确认机制" tabindex="-1"><a class="header-anchor" href="#消息发布方确认机制"><span>消息发布方确认机制</span></a></h3><p>消息发布方确认机制是确保发布方将消息成功发送到RabbitMQ交换机的机制。RabbitMQ提供了2种发布方确认机制：事务机制(Transaction)和发布确认机制(Publisher-confirm)。</p><p><strong>事务机制</strong></p><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Channel</span> channel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">{</span>
    channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 开启事务</span>
    channel<span class="token punctuation">.</span><span class="token function">txSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发布消息</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;routingKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 提交事务</span>
        channel<span class="token punctuation">.</span><span class="token function">txCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Messages send successfully!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 异常,回滚事务</span>
        channel<span class="token punctuation">.</span><span class="token function">txRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>发布确认机制</strong></p><p>发布确认是一种异步的确认机制，启用发布确认模式后，注册确认回调接口，在其中处理确认和未确认的消息。</p><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 启用发布确认模式</span>
    channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 注册确认回调接口</span>
    <span class="token class-name">ConfirmCallback</span> ackCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>multiple<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 多条消息被确认</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Multiple messages confirmed up to delivery tag: &quot;</span> <span class="token operator">+</span> deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">// 单条消息被确认</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message confirmed with delivery tag: &quot;</span> <span class="token operator">+</span> deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">ConfirmCallback</span> nackCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 消息未被确认</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message not confirmed with delivery tag: &quot;</span> <span class="token operator">+</span> deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span>ackCallback<span class="token punctuation">,</span> nackCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发布消息</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;routingKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 等待确认</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message confirmed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message not confirmed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="消息消费方确认-拒绝机制" tabindex="-1"><a class="header-anchor" href="#消息消费方确认-拒绝机制"><span>消息消费方确认/拒绝机制</span></a></h3><p>消息消费方确认机制，可以确保消息被完全处理后，才会消息队列中删除。</p><p><strong>消息消费方确认机制</strong></p><p>消费者成功处理一条消息后，向RabbitMQ发送一个确认信号，RabbitMQ将该消息标记为可清除。分为自动确认和手动确认。</p><p>自动确认：消费者收到消息后，自动发送确认信号。</p><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> autoAck <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// Push模式</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> autoAck<span class="token punctuation">,</span> <span class="token string">&quot;consumerTag&quot;</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Pull模式</span>
<span class="token class-name">GetResponse</span> response <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">basicGet</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> autoAck<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>手动确认：消费者收到消息并处理完毕后，手动调用<code>Channel#basicAck</code>方法</p><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> autoAck <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// Push模式</span>
<span class="token class-name">DeliverCallback</span> deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Delivery</span> message<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Envelope</span> envelope <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">CancelCallback</span> cancelCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> autoAck<span class="token punctuation">,</span> <span class="token string">&quot;consumerTag&quot;</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Pull模式</span>
<span class="token class-name">GetResponse</span> response <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">basicGet</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> autoAck<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Envelope</span> envelope <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>消息消费方拒绝机制</strong></p><p><code>Channel#basicReject</code>：1次只能拒绝1条消息，并可以选择将消息丢弃还是重新入队</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">basicReject</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> 
                 <span class="token keyword">boolean</span> requeue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p><code>Channel#basicNack</code>：1次可以拒绝1条或多条消息，并可以选择将消息丢弃还是重新入队</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">basicNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span>
               <span class="token keyword">boolean</span> multiple<span class="token punctuation">,</span> 
               <span class="token keyword">boolean</span> requeue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre></div><p>参数：</p><ul><li>deliveryTag：消息唯一标记</li><li>multiple：true，表示拒绝所有比deliveryTag小的多条消息；false，表示只拒绝1条消息</li><li>requeue：true，重新入队；false，直接丢弃</li></ul><h3 id="持久化机制" tabindex="-1"><a class="header-anchor" href="#持久化机制"><span>持久化机制</span></a></h3><p>持久化机制确保RabbitMQ服务器重启后，消息不会丢失。</p><p><strong>持久化Exchange</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">,</span> durable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>持久化Queue</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> durable<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>持久化消息</strong></p><p>发布消息时，设置deliveryMode属性为2，表示启用持久化</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">deliveryMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;routingKey&quot;</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="备用交换机" tabindex="-1"><a class="header-anchor" href="#备用交换机"><span>备用交换机</span></a></h3><p>备用交换机（AE, Altemate Exchange），是在消息无法被路由到任何队列时的一种备用机制。</p><p>声明交换机时设置<em>alternate-exchange</em>属性，将未被路由的消息发送到备用交换机。</p><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Channel</span> channel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明AE,并绑定一个消息队列</span>
    channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;x.ae&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">FANOUT</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;q.ae&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;q.ae&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x.ae&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.ae&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 声明普通交换器, 通过alternate-exchange属性指定AE, 并绑定一个消息队列</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;alternate-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x.ae&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;x.normal&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;q.normal&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;q.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.normal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 发布消息到普通交换器,路由正确</span>
    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;x.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.normal&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发布消息到普通交换器,路由错误,消息将被发送到AE,进而路由到AE绑定的队列</span>
    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;x.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k.bad&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,215),c=[o];function e(u,l){return s(),a("div",null,c)}const i=n(p,[["render",e],["__file","RabbitMQ必知必会.html.vue"]]);export{i as default};

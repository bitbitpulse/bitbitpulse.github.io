import{_ as n,o as a,c as s,d as t}from"./app-HBA039kk.js";const p="/assets/20240308094149-CO29CEup.png",o={},e=t(`<h1 id="springboot集成jpa" tabindex="-1"><a class="header-anchor" href="#springboot集成jpa"><span>SpringBoot集成jpa</span></a></h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>版本信息：</p><ul><li>Spring Boot 3.2.3</li><li>Spring Data JPA 3.2.3</li></ul><p>参考：</p><ul><li>https://docs.spring.io/spring-data/jpa/reference/jpa.html</li></ul></div><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h2><p>1.添加依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>2.配置数据源</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
</code></pre></div><p>3.定义数据表对应的实体类</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_publisher&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>6.创建实体Repository</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PublisherRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Publisher</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><p>7.测试：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaAppTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PublisherRepository</span> publisherRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPublisherRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 新增save</span>
        <span class="token class-name">Publisher</span> publisher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        publisher<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;湖南文艺出版社&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Publisher</span> savedPublisher <span class="token operator">=</span> publisherRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>savedPublisher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="定义实体类" tabindex="-1"><a class="header-anchor" href="#定义实体类"><span>定义实体类</span></a></h2><h3 id="定义实体类-1" tabindex="-1"><a class="header-anchor" href="#定义实体类-1"><span>定义实体类</span></a></h3><p><code>@Entity</code>注解标记实体类，<code>@Table</code>注解指定表名信息</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_book&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre></div><h3 id="定义主键字段" tabindex="-1"><a class="header-anchor" href="#定义主键字段"><span>定义主键字段</span></a></h3><h4 id="普通主键" tabindex="-1"><a class="header-anchor" href="#普通主键"><span>普通主键</span></a></h4><p><code>@Id</code>注解标记主键字段。要求数据表列名与字段名相同，可以用<code>@Column</code>指定数据表列名</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Id</span>
<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
</code></pre></div><h4 id="联合主键" tabindex="-1"><a class="header-anchor" href="#联合主键"><span>联合主键</span></a></h4><p>如果数据表主键为联合主键，由2种定义联合主键的方式：<code>@IdClass</code> 和 <code>@EmbeddedId</code></p><p><code>@IdClass</code>方式示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PKBorrowRecord</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> bookId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> readerId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_borrow_record&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@IdClass</span><span class="token punctuation">(</span><span class="token class-name">PKBorrowRecord</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorrowRecord</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> bookId<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> readerId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> borrowAt<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> returnAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>@EmbeddedId</code>方式示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Embeddable</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PKBorrowRecord</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> bookId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> readerId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_borrow_record&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorrowRecord</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@EmbeddedId</span>
    <span class="token keyword">private</span> <span class="token class-name">PKBorrowRecord</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Date</span> borrowAt<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> returnAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="自动生成主键" tabindex="-1"><a class="header-anchor" href="#自动生成主键"><span>自动生成主键</span></a></h4><p>使用<code>Id</code>结合<code>@GeneratedValue</code>注解，定义自动生成主键。</p><p><code>@GeneratedValue</code>注解的<code>strategy</code>属性，指定主键生成策略，<code>GenerationType</code>枚举类中定义了以下几种策略：</p><ul><li><code>TABLE</code>：使用序列表或主键表存储主键值，每次获取主键值时，从表中生成并获取</li><li><code>SEQUENCE</code>：使用数据库序列生成主键值</li><li><code>IDENTITY</code>：使用数据库自增字段生成主键值</li><li><code>UUID</code>：使用数据库的UUID生成器生成主键值</li><li><code>AUTO</code>，由JPA根据具体的数据库类型，自动选择合适的生成策略</li></ul><p><code>GenerationType.Table</code>示例：</p><p>首先，需要提供1张主键表</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_library_id_generator<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>pk_name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键列名称&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>pk_value<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键列值&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4
</code></pre></div><p>然后，在<code>@GeneratedValue</code>注解中，指定主键生成策略为<code>TABLE</code>，并指定主键表生成器。</p><p>生成器使用<code>@TableGenerator</code>注解定义：指定主键表名、主键列列名、主键值列名、初始值、步进值</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Id</span>
<span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">TABLE</span><span class="token punctuation">,</span> generator <span class="token operator">=</span> <span class="token string">&quot;id_generator&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id_generator&quot;</span><span class="token punctuation">,</span> table <span class="token operator">=</span> <span class="token string">&quot;t_library_id_generator&quot;</span><span class="token punctuation">,</span> pkColumnName <span class="token operator">=</span> <span class="token string">&quot;pk_name&quot;</span><span class="token punctuation">,</span> valueColumnName <span class="token operator">=</span> <span class="token string">&quot;pk_value&quot;</span><span class="token punctuation">,</span> initialValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> allocationSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
</code></pre></div><h3 id="定义关联实体" tabindex="-1"><a class="header-anchor" href="#定义关联实体"><span>定义关联实体</span></a></h3><p>关联关系使用以下几个注解表示：</p><ul><li><code>@OneToOne</code></li><li><code>@OneToMany</code></li><li><code>@ManyToOne</code></li><li><code>@@ManyToMany</code></li></ul><p>定义关联关系使用以下2个注解：</p><ul><li><code>@JoinColumn</code>：通过外键字段建立关联关系时</li><li><code>@JoinTable</code>，通过关联表建立关联关系时</li></ul><p>另外，当在同一个实体中，使用<code>@JoinColumn</code>标记的字段和使用<code>@Column</code>标记的字段，引用相同的列时，不符合JPA的规定（不允许多个逻辑列指向同一个物理列），需要在其中一个注解中，设置属性<code>insertable = false, updatable = false</code>，如下：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;publisher_id&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> publisherId<span class="token punctuation">;</span>

<span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;publisher_id&quot;</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> insertable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Publisher</span> publisher<span class="token punctuation">;</span>
</code></pre></div><h4 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一"><span>&quot;一对一&quot;</span></a></h4><p>示例：图书表和图书简介表</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_book&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;publisher_id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Long</span> publisherId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OneToOne</span><span class="token punctuation">(</span>targetEntity <span class="token operator">=</span> <span class="token class-name">BookIntro</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mappedBy <span class="token operator">=</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span> fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">BookIntro</span> intro<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_book_intro&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookIntro</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;book_id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> bookId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> intro<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OneToOne</span>
    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;book_id&quot;</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Book</span> book<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="一对多-与-多对一" tabindex="-1"><a class="header-anchor" href="#一对多-与-多对一"><span>&quot;一对多&quot; 与 &quot;多对一&quot;</span></a></h4><p>示例：出版社表和图书表</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_publisher&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>targetEntity <span class="token operator">=</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mappedBy <span class="token operator">=</span> <span class="token string">&quot;publisher&quot;</span><span class="token punctuation">,</span> fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_book&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;publisher_id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> publisherId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;publisher_id&quot;</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> insertable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Publisher</span> publisher<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多"><span>&quot;多对多&quot;</span></a></h4><p>示例：图书表和读者表，使用借阅记录表作为中间表</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_borrow_record&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@IdClass</span><span class="token punctuation">(</span><span class="token class-name">PKBorrowRecord</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorrowRecord</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;book_id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> bookId<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;reader_id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> readerId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;borrow_at&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Date</span> borrowAt<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;return_at&quot;</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Date</span> returnAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_book&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_borrow_record&quot;</span><span class="token punctuation">,</span>
            joinColumns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;reader_id&quot;</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            inverseJoinColumns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;book_id&quot;</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Reader</span><span class="token punctuation">&gt;</span></span> readers<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;t_library_reader&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reader</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>targetEntity <span class="token operator">=</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mappedBy <span class="token operator">=</span> <span class="token string">&quot;readers&quot;</span><span class="token punctuation">,</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="repository" tabindex="-1"><a class="header-anchor" href="#repository"><span>Repository</span></a></h2><p><code>Repository&lt;T, ID&gt;</code>接口是Spring Data JPA的核心接口，其子接口中预定义了用于CRUD的许多方法</p><p><img src="`+p+`" alt=""></p><p>在定义自己的<code>Repository</code>时，只需要继承<code>Repository&lt;T, ID&gt;</code>接口的某一个子接口即可。</p><p>例如：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PublisherRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Publisher</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="repository预定义的crud方法" tabindex="-1"><a class="header-anchor" href="#repository预定义的crud方法"><span>Repository预定义的CRUD方法</span></a></h2><h3 id="插入-更新记录" tabindex="-1"><a class="header-anchor" href="#插入-更新记录"><span>插入/更新记录</span></a></h3><p>预定义的用于插入或更新记录的方法如下：</p><ul><li><code>&lt;S extends T&gt; S save(S)</code>：保存单条记录：如果主键字段为null，则执行插入操作；否则，执行更新操作。返回插入或更新后的记录</li><li><code>&lt;S extends T&gt; List&lt;S&gt; saveAll(Iterable&lt;S&gt;)</code>：保存多条记录</li></ul><p>需要注意的是，插入或更新时，JPA生成的sql会设置所有的列。因此，需要为每一个字段设置值，否则，该列将被设置为null。</p><p>插入示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;太白金星有点烦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">&quot;马伯庸&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book<span class="token punctuation">.</span><span class="token function">setPublisherId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Book</span> savedBook <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>更新示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Book</span> book <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;太白金星有点烦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Book</span> savedBook <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>savedBook<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="删除记录" tabindex="-1"><a class="header-anchor" href="#删除记录"><span>删除记录</span></a></h3><p>预定的用于删除记录的方法如下：</p><ul><li><code>void deleteById(ID）</code>：根据主键删除单条记录</li><li><code>void deleteAllById(Iterable&lt;? extends ID&gt;)</code>：根据主键删除多条记录</li><li><code>void deleteAll()</code>：删除全部记录</li></ul><h3 id="查询记录" tabindex="-1"><a class="header-anchor" href="#查询记录"><span>查询记录</span></a></h3><h4 id="查询单条记录" tabindex="-1"><a class="header-anchor" href="#查询单条记录"><span>查询单条记录</span></a></h4><p>预定义的用于查询单条记录的方法如下：</p><ul><li><code>Optional&lt;T&gt; findById(ID)</code>：根据主键查询单条记录，返回<code>Optinal&lt;T&gt;</code>对象</li></ul><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> bookOptional <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Book</span> book <span class="token operator">=</span> bookOptional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="查询多条记录" tabindex="-1"><a class="header-anchor" href="#查询多条记录"><span>查询多条记录</span></a></h4><p>预定义的用于查询多条记录的方法如下：</p><ul><li><code>List&lt;T&gt; findAll()</code>：查询全部记录</li><li><code>List&lt;T&gt; findAllById(Iterable&lt;ID&gt;)</code>：根据ID查询多条记录</li></ul><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token number">2L</span><span class="token punctuation">,</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="排序和分页查询" tabindex="-1"><a class="header-anchor" href="#排序和分页查询"><span>排序和分页查询</span></a></h4><p>JAP中，<code>PagingAndSortingRepository&lt;T, ID&gt;</code>接口中定义了用于排序和分页的方法：</p><ul><li><code>Iterable&lt;T&gt; findAll(Sort sort)</code></li><li><code>Page&lt;T&gt; findAll(Pageable pageable)</code></li></ul><p>排序示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">ASC</span><span class="token punctuation">,</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>分页示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">ASC</span><span class="token punctuation">,</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>

pageNo <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pageSize <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> totalPages <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getTotalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> totalSize <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="使用example查询" tabindex="-1"><a class="header-anchor" href="#使用example查询"><span>使用<code>Example</code>查询</span></a></h4><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Book</span> probe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
probe<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;太白金星&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withStringMatcher</span><span class="token punctuation">(</span><span class="token class-name">ExampleMatcher<span class="token punctuation">.</span>StringMatcher</span><span class="token punctuation">.</span><span class="token constant">CONTAINING</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withIgnoreCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withIgnoreNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>probe<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books <span class="token operator">=</span> bookRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="使用根据方法名派生的查询" tabindex="-1"><a class="header-anchor" href="#使用根据方法名派生的查询"><span>使用根据方法名派生的查询</span></a></h2><p>Repository方法名称构造参考：</p><p>https://docs.spring.io/spring-data/jpa/reference/repositories/query-keywords-reference.html</p><p>Repository方法返回值类型参考：</p><p>https://docs.spring.io/spring-data/jpa/reference/repositories/query-return-types-reference.html</p><p>示例：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 删除记录: publisher_id NOT IN (?)
 */</span>
<span class="token keyword">void</span> <span class="token function">deleteByPublisherIdNotIn</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> publisherIds<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 查询1条记录: name = ?
 */</span>
<span class="token class-name">Book</span> <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 查询多条记录: name LIKE &#39;%?%&#39;
 */</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllByNameLike</span><span class="token punctuation">(</span><span class="token class-name">String</span> namePattern<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 查询多条记录: publisher_id IN (?) ORDER BY publisher_id ASC
 */</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllByPublisherIdInOrderByPublisherIdAsc</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> publisherIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="使用-query" tabindex="-1"><a class="header-anchor" href="#使用-query"><span>使用<code>@Query</code></span></a></h2><p><code>@Query</code>注解在Repository方法上，执行给定的SQL语句。</p><p>注意：</p><ul><li>当执行<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>DDL</code>类型的SQL时，需要同时使用<code>@Modifying</code>注解</li><li>当执行<code>UPDATE</code>, <code>DELETE</code>类型的SQL时，还需要使用<code>@Transactional</code>注解开启事务</li></ul><h3 id="执行原生sql" tabindex="-1"><a class="header-anchor" href="#执行原生sql"><span>执行原生SQL</span></a></h3><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;update t_library_book set name = ?2 where id = ?1&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token class-name">Integer</span> <span class="token function">updateName</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="jpa属性配置" tabindex="-1"><a class="header-anchor" href="#jpa属性配置"><span>JPA属性配置</span></a></h2><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.data.jpa.repositories.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token comment"># 显示sql语句</span>
<span class="token key attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div>`,107),c=[e];function l(u,i){return a(),s("div",null,c)}const r=n(o,[["render",l],["__file","SpringBoot集成jpa.html.vue"]]);export{r as default};

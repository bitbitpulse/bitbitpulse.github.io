import{_ as s,o as a,c as n,d as p}from"./app-HBA039kk.js";const e="/assets/20240310165412-mF1Lq6F2.png",o="/assets/20240310165708-PLV1mPF6.png",t="/assets/20240310170608-DiiLMsDf.png",c="/assets/20240310172150--jRk8G6b.png",l={},k=p(`<h1 id="sql查询" tabindex="-1"><a class="header-anchor" href="#sql查询"><span>sql查询</span></a></h1><h2 id="sql查询子句语法与执行顺序" tabindex="-1"><a class="header-anchor" href="#sql查询子句语法与执行顺序"><span>sql查询子句语法与执行顺序</span></a></h2><p>1个sql查询语句包括1个或多个子句，其语法如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span><span class="token keyword">DISTINCT</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>结果集字段列表<span class="token operator">&gt;</span>
<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表<span class="token number">1</span><span class="token operator">&gt;</span>
<span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token operator">|</span><span class="token keyword">LEFT</span><span class="token operator">|</span><span class="token keyword">RIGHT</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> <span class="token operator">&lt;</span>表<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>联结条件<span class="token operator">&gt;</span>
<span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>过滤条件表达式<span class="token operator">&gt;</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>分组字段列表<span class="token operator">&gt;</span>
<span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>分组过滤条件表达式<span class="token operator">&gt;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>排序字段列表 <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token keyword">LIMIT</span> <span class="token operator">&lt;</span>限制结果集记录数<span class="token operator">&gt;</span> <span class="token keyword">OFFSET</span> <span class="token operator">&lt;</span>限制开始的行号<span class="token operator">&gt;</span>
</code></pre></div><p>sql子句的执行顺序如下：</p><ol><li><code>FROM</code>子句：确定从哪个表中取数据。如果存在多表联结，就按照联结条件进行组合，返回结果集</li><li><code>WHERE</code>子句：过滤不满足条件的记录</li><li><code>GROUP BY</code>子句：将WHERE过滤后的结果集进行分组，</li><li>聚合函数：执行<code>SELECT</code>中的聚合计算：求和、计数等</li><li><code>HAVING</code>子句：对分组、聚合的结果集进行过滤</li><li><code>SELECT</code>子句：执行完所有的过滤条件后，从结果集中选取需要的列</li><li><code>DISTINCT</code>：从<code>SELECT</code>子句的结果集中，去除重复的记录</li><li><code>ORDER BY</code>子句：对结果集进行排序</li><li><code>LIMIT</code>子句：限制结果集返回的记录数</li></ol><h2 id="select子句" tabindex="-1"><a class="header-anchor" href="#select子句"><span><code>SELECT</code>子句</span></a></h2><p><code>SELECT</code>子句指定结果集包含的列。1个sql至少需要包含<code>SELECT</code>子句</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">&#39;9787020002207&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;红楼梦&#39;</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">;</span>
</code></pre></div><p>可以为列设置别名</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">&#39;9787020002207&#39;</span> <span class="token keyword">AS</span> id<span class="token punctuation">,</span> <span class="token string">&#39;红楼梦&#39;</span> <span class="token keyword">AS</span> title<span class="token punctuation">,</span> <span class="token number">120</span> <span class="token keyword">AS</span> price<span class="token punctuation">,</span> <span class="token keyword">CURRENT_DATE</span> <span class="token keyword">AS</span> create_at<span class="token punctuation">;</span>
</code></pre></div><p>如果别名为非英文字母、数字、下划线，需要用双引号括起来</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">&#39;9787020002207&#39;</span> <span class="token keyword">AS</span> <span class="token string">&quot;编号&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;红楼梦&#39;</span> <span class="token keyword">AS</span> <span class="token string">&quot;书名&quot;</span><span class="token punctuation">,</span> <span class="token number">120</span> <span class="token keyword">AS</span> <span class="token string">&quot;价格&quot;</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_DATE</span> <span class="token keyword">AS</span> <span class="token string">&quot;创建时间&quot;</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="from子句" tabindex="-1"><a class="header-anchor" href="#from子句"><span><code>FROM</code>子句</span></a></h2><p><code>FROM</code>子句指定要查询的数据表。</p><p><code>SELECT</code>子句中，使用星号*表示查询所有列</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><p>查询列出的列</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> price
<span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><h2 id="where子句" tabindex="-1"><a class="header-anchor" href="#where子句"><span><code>WHERE子句</code></span></a></h2><p><code>WHERE</code>子句用于过滤结果集。</p><p>在条件表达式中，可以使用各种运算符：</p><ul><li>算术运算符：<code>+ - * /</code></li><li>比较运算符：<code>= &lt;&gt; &gt; &gt;- &lt; &lt;=</code></li><li>逻辑运算符：<code>NOT AND OR</code></li></ul><p>还可以使用以下谓词：</p><ul><li><p><code>LIKE</code>：<code>_</code>表示1个任意字符，<code>%</code>表示0或多个任意字符</p></li><li><p><code>IS NULL</code> <code>IS NOT NULL</code></p></li><li><p><code>BETWEEN</code></p></li><li><p><code>IN</code> <code>NOT IN</code></p></li><li><p><code>EXISTS</code> <code>NOT EXISTS</code></p></li></ul><p>需要注意的是，<code>NULL</code>与任何数进行算术或比较运算，结果都是<code>NULL</code>，也不能参与逻辑运算，结果是不确定的。</p><p>错误示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token number">0</span> <span class="token operator">&gt;</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">&lt;&gt;</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token boolean">NULL</span>
</code></pre></div><p>在条件表达式中使用<code>NULL</code>时，要用<code>IS NULL</code> 或 <code>IS NOT NULL</code></p><p>正确示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">WHERE</span> publisher <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="distinct去重" tabindex="-1"><a class="header-anchor" href="#distinct去重"><span><code>DISTINCT</code>去重</span></a></h2><p><code>DISTINCT</code>关键词可以对<code>SELECT</code>的结果集进行去重，支持对多列的组合去重。</p><p>示例：从图书表中查询所有的作者</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> author <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><h2 id="聚合函数与group-by、having子句" tabindex="-1"><a class="header-anchor" href="#聚合函数与group-by、having子句"><span>聚合函数与<code>GROUP BY</code>、<code>Having</code>子句</span></a></h2><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数"><span>聚合函数</span></a></h3><p>5个常用的聚合函数：</p><ul><li><code>COUNT</code>：统计记录数量</li><li><code>SUM</code>：求和</li><li><code>AVG</code>：求平均值</li><li><code>MIN</code>：求最小值</li><li><code>MAX</code>：求最大值</li></ul><p>聚合函数在进行统计时，会自动去除值为NULL的记录。不过，对于<code>COUNT</code>函数，可以使用<code>count(*)</code> 或 <code>count(1)</code>的方式，使其包括NULL值记录。</p><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><p>聚合函数中，支持先使用<code>DISTINCT</code>去除重复记录后，再进行统计。</p><p>示例：统计图书表中图书作者的数量</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> author<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;authors&quot;</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><h3 id="group-by子句" tabindex="-1"><a class="header-anchor" href="#group-by子句"><span><code>GROUP BY</code>子句</span></a></h3><p><code>GROUP BY</code>子句将表中的记录按照聚合键进行分组，然后进行聚合计算。</p><p>使用<code>GROUP BY</code>子句时，<code>SELECT</code>子句中只能存在以下3种元素：</p><ul><li>常数</li><li>聚合函数</li><li>聚合键(GROUP BY中指定的列名)</li></ul><p>另外，因为sql执行顺序：<code>GROUP BY</code>子句在前，<code>SELECT</code>子句在后：</p><ul><li><p><code>GROUP BY</code>以及<code>HAVING</code>子句中，不能使用列别名，因为此时还没定义列别名</p></li><li><p>同样的道理，在<code>WHERE</code>子句中也不能使用聚合函数，因为此时还没进行分组、聚合</p></li></ul><p>示例：统计图书表中，每个出版社图书的数量、总价、平均价、最高单价、最低单价</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> publisher      <span class="token keyword">AS</span> <span class="token string">&quot;出版社&quot;</span><span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>   <span class="token keyword">AS</span> <span class="token string">&quot;数量&quot;</span><span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">&quot;总价&quot;</span><span class="token punctuation">,</span>
       <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">&quot;均价&quot;</span><span class="token punctuation">,</span>
       <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">&quot;最高单价&quot;</span><span class="token punctuation">,</span>
       <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">&quot;最低单价&quot;</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> publisher
</code></pre></div><h3 id="having子句" tabindex="-1"><a class="header-anchor" href="#having子句"><span><code>HAVING</code>子句</span></a></h3><p><code>HAVING</code>子句对分组、聚合结果进行过滤。</p><p><code>HAVING</code>子句中可以使用常数、聚合键、聚合函数构造分组过滤条件表达式。</p><p>示例：统计图书表中，每个出版社图书的数量、总价、平均价、最高单价、最低单价，排除出版社为NULL，且总价小于100的记录</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> publisher      <span class="token keyword">AS</span> <span class="token string">&quot;出版社&quot;</span><span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>   <span class="token keyword">AS</span> <span class="token string">&quot;数量&quot;</span><span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">&quot;总价&quot;</span><span class="token punctuation">,</span>
	   <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">&quot;均价&quot;</span><span class="token punctuation">,</span>
       <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">&quot;最高单价&quot;</span><span class="token punctuation">,</span>
	   <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">&quot;最低单价&quot;</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> publisher
<span class="token keyword">HAVING</span> publisher <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
   <span class="token operator">AND</span> <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span>
</code></pre></div><h2 id="order-by子句" tabindex="-1"><a class="header-anchor" href="#order-by子句"><span><code>ORDER BY</code>子句</span></a></h2><p><code>ORDER BY</code>子句对结果集进行排序。</p><p>可以在排序键后使用<code>ASC</code>或<code>DESC</code>关键字，指定排序数量；另外，可以指定多个排序键。</p><p>示例：查询图书表中的所有记录，按照出版社和作者名升序排序（字典顺序）</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ASC</span><span class="token punctuation">,</span> author <span class="token keyword">ASC</span>
</code></pre></div><p>需要注意的是，当排序键的列包括NULL值时，NULL值记录会排在结果集的开头或末尾（取决于具体DBMS的实现）。</p><p>不过，借助一些NULL相关的方言函数，或者CASE表达式，可以明确的将NULL值记录排在结果集的开头或者末尾。</p><p>例如：查询图书表中的所有记录，按照出版社和作者名升序排序（字典顺序），出版社为NULL的排最前面</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> publisher <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">ASC</span><span class="token punctuation">,</span> publisher <span class="token keyword">ASC</span><span class="token punctuation">,</span> author <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="limit子句" tabindex="-1"><a class="header-anchor" href="#limit子句"><span><code>LIMIT</code>子句</span></a></h2><p><code>LIMIT</code>子句用于限制结果集的大小，结合<code>OFFSET</code>关键字，可以实现分页查询。</p><p>示例：查询图书表中，按照图书名称排序后的前3本图书</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> title
<span class="token keyword">LIMIT</span> <span class="token number">3</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span>
</code></pre></div><p>示例：查询图书表中，价格最高的图书</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">WHERE</span> price <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">DESC</span>
<span class="token keyword">LIMIT</span> <span class="token number">1</span>
</code></pre></div><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图"><span>视图</span></a></h2><p>视图(View)是一种虚拟表，其内部存储sql查询语句，而不是数据。</p><h3 id="创建视图" tabindex="-1"><a class="header-anchor" href="#创建视图"><span>创建视图</span></a></h3><p>使用<code>CREATE VIEW</code>语句创建视图，语法如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> <span class="token operator">&lt;</span>视图名<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>视图列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>视图列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">(</span>
	<span class="token operator">&lt;</span><span class="token keyword">SELECT</span>语句<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre></div><p>创建视图需要注意以下2点：</p><ul><li>不要在SELECT语句中使用<code>ORDER BY</code>子句</li><li>不推荐基于视图创建视图</li></ul><p>示例：创建视图，将读者按照性别分组，统计每种性别的读者人数</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v_readers_group_by_gender<span class="token punctuation">(</span>gender<span class="token punctuation">,</span> readers<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">FROM</span> t_reader
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender
<span class="token punctuation">)</span>
</code></pre></div><h3 id="使用视图" tabindex="-1"><a class="header-anchor" href="#使用视图"><span>使用视图</span></a></h3><p>使用视图进行<code>SELECT</code>查询时，可以将其视作数据表。</p><p>示例：使用视图查询每种性别的读者人数</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v_readers_group_by_gender<span class="token punctuation">;</span>
</code></pre></div><p>使用视图进行更新操作(<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>)，有严格的限制，不推荐对视图进行更新操作。</p><h3 id="删除视图" tabindex="-1"><a class="header-anchor" href="#删除视图"><span>删除视图</span></a></h3><p>使用<code>DROP VIEW</code>语句删除视图</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> v_readers_group_by_gender<span class="token punctuation">;</span>
</code></pre></div><p>如果要删除的视图存在关联视图，需要使用<code>CASCADE</code>关键字</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> v_readers_group_by_gender <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询"><span>子查询</span></a></h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><p>子查询可以理解为&quot;一次性视图&quot;。</p><p>通常将子查询语句放到一对括号<code>()</code>中，然后使用<code>AS</code>关键字指定子查询的名称，例如：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> readers <span class="token keyword">FROM</span>
<span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> readers
	<span class="token keyword">FROM</span> t_reader
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender
<span class="token punctuation">)</span> <span class="token keyword">AS</span> readers<span class="token punctuation">;</span>
</code></pre></div><p>子查询可以嵌套子查询，不过不推荐编写嵌套层次太深的子查询。</p><h3 id="标量子查询" tabindex="-1"><a class="header-anchor" href="#标量子查询"><span>标量子查询</span></a></h3><p>标量子查询是指返回单一值的子查询（有且只有1个值）。可以用在sql中任何允许单一值的地方。</p><p>在<code>SELECT</code>子句中使用标量子查询，示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询图书信息，包括所有图书的平均价格</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;平均价格&quot;</span>
<span class="token keyword">FROM</span> t_book
</code></pre></div><p>在<code>WHERE</code>子句中使用标量子查询，示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询价格大于平均值的图书</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">WHERE</span> price <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">)</span>
</code></pre></div><h3 id="关联子查询" tabindex="-1"><a class="header-anchor" href="#关联子查询"><span>关联子查询</span></a></h3><p>关联子查询涉及外部查询和内部查询之间的关联：外部查询的每一行记录传递1个值给内部查询，内部查询中使用这个值进行查询，返回相应的记录。</p><p>关联子查询常用于以下场景：</p><ul><li>在细分的组内进行比较</li><li>与<code>EXISTS</code>或<code>NOT EXISTS</code>结合使用</li></ul><p>在细分的组内进行比较，示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询每个出版社中, 价格大于各个出版社图书平均价格的图书</span>
<span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book <span class="token keyword">AS</span> t1
<span class="token keyword">WHERE</span> price <span class="token operator">&gt;</span> <span class="token punctuation">(</span>
  	<span class="token keyword">SELECT</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>
	<span class="token keyword">FROM</span> t_book <span class="token keyword">AS</span> t2
	<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>publisher <span class="token operator">=</span> t2<span class="token punctuation">.</span>publisher
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> publisher
<span class="token punctuation">)</span>
</code></pre></div><p>与<code>EXISTS</code>或<code>NOT EXISTS</code>结合使用，示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询从来没有出借过的图书</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book <span class="token keyword">AS</span> t1
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> <span class="token operator">*</span>
	<span class="token keyword">FROM</span> t_borrow_record <span class="token keyword">AS</span> t2
	<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>book_id
<span class="token punctuation">)</span>
</code></pre></div><h2 id="集合操作" tabindex="-1"><a class="header-anchor" href="#集合操作"><span>集合操作</span></a></h2><p>在sql中，数据表、视图、<code>SELECT</code>结果集等都属于集合。</p><p>在进行集合运算时，参与运算的各个集合必须满足以下要求：</p><ul><li>列数一致</li><li>各列数据类型一致</li><li><code>ORDER BY</code>子句只能在最后一个<code>SELECT</code>语句中出现1次</li></ul><h3 id="union-并集" tabindex="-1"><a class="header-anchor" href="#union-并集"><span><code>UNION</code>：并集</span></a></h3><p><code>UNION</code>进行并集计算，自动去重重复记录，使用<code>UNION ALL</code>可以保留重复记录。</p><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publisher <span class="token operator">=</span> <span class="token string">&#39;人民文学出版社&#39;</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publisher <span class="token operator">=</span> <span class="token string">&#39;译林出版社&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher
</code></pre></div><h3 id="intersect-交集" tabindex="-1"><a class="header-anchor" href="#intersect-交集"><span><code>INTERSECT</code>：交集</span></a></h3><p><code>INTERSECT</code>进行交集计算，自动去重，使用<code>INTERSECT ALL</code>可以保留重复记录。</p><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> publish_date <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publisher <span class="token operator">=</span> <span class="token string">&#39;人民文学出版社&#39;</span>
<span class="token keyword">INTERSECT</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> publish_date <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publish_date <span class="token operator">IS</span> <span class="token boolean">NULL</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher
</code></pre></div><h3 id="except-差集" tabindex="-1"><a class="header-anchor" href="#except-差集"><span><code>EXCEPT</code>：差集</span></a></h3><p><code>EXCEPT</code>进行差集计算。</p><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> publisher <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publisher <span class="token operator">=</span> <span class="token string">&#39;人民文学出版社&#39;</span>
<span class="token keyword">EXCEPT</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> publisher <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> author <span class="token operator">=</span> <span class="token string">&#39;曹雪芹&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher
</code></pre></div><h2 id="联结查询" tabindex="-1"><a class="header-anchor" href="#联结查询"><span>联结查询</span></a></h2><p>联结查询是指通过联结条件，将多个表中的数据组合起来，形成新的结果集。</p><h3 id="inner-join-内联接" tabindex="-1"><a class="header-anchor" href="#inner-join-内联接"><span><code>INNER JOIN</code>：内联接</span></a></h3><p>内联结将2张表中满足联结条件的记录组合起来，形成新的结果集。</p><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>address
<span class="token keyword">FROM</span> t_reader <span class="token keyword">AS</span> t1 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_address <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>address_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id
</code></pre></div><h3 id="left-outer-join-左外联结" tabindex="-1"><a class="header-anchor" href="#left-outer-join-左外联结"><span><code>LEFT OUTER JOIN</code>：左外联结</span></a></h3><p>以左表为主表，将主表中的所有记录与右表中满足联结条件的记录组合起来，形成新的结果集。</p><p><code>LEFT OUTER JOIN</code>可以简写为<code>LEFT JOIN</code>。</p><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>address
<span class="token keyword">FROM</span> t_reader <span class="token keyword">AS</span> t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_address <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>address_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id
</code></pre></div><h3 id="right-outer-join-右外联结" tabindex="-1"><a class="header-anchor" href="#right-outer-join-右外联结"><span><code>RIGHT OUTER JOIN</code>：右外联结</span></a></h3><p>以右表为主表，将主表中的所有记录与左表中满足联结条件的记录组合起来，形成新的结果集。</p><p><code>RIGHT OUTER JOIN</code>可以简写为<code>RIGHT JOIN</code>。</p><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>address
<span class="token keyword">FROM</span> t_reader <span class="token keyword">AS</span> t1 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_address <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>address_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id
</code></pre></div><h3 id="cross-join-交叉联结" tabindex="-1"><a class="header-anchor" href="#cross-join-交叉联结"><span><code>CROSS JOIN</code>：交叉联结</span></a></h3><p>交叉联结不能指定联结条件，对2张表的所有记录进行交叉组合，其结果集是笛卡尔积。</p><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>address
<span class="token keyword">FROM</span> t_reader <span class="token keyword">AS</span> t1 <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> t_address <span class="token keyword">AS</span> t2
</code></pre></div><h2 id="高级查询" tabindex="-1"><a class="header-anchor" href="#高级查询"><span>高级查询</span></a></h2><h3 id="case表达式" tabindex="-1"><a class="header-anchor" href="#case表达式"><span><code>CASE</code>表达式</span></a></h3><p><code>CASE</code>表达式是一种条件表达式，基于不同的条件返回不同的值。</p><p><code>CASE</code>表达式分为2种：简单<code>CASE</code>表单式和搜索<code>CASE</code>表达式</p><h4 id="简单case表单式" tabindex="-1"><a class="header-anchor" href="#简单case表单式"><span>简单<code>CASE</code>表单式</span></a></h4><p>语法如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span> <span class="token operator">&lt;</span>表达式<span class="token operator">&gt;</span>
	<span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>值表达式<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token operator">&lt;</span>返回值表达式<span class="token operator">&gt;</span>
	<span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>值表达式<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token operator">&lt;</span>返回值表达式<span class="token operator">&gt;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">ELSE</span> <span class="token operator">&lt;</span>默认返回值表达式<span class="token operator">&gt;</span>
<span class="token keyword">END</span>
</code></pre></div><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询读者的性别, male展示为&quot;男&quot;, female展示为&quot;女&quot;</span>
<span class="token keyword">SELECT</span> name <span class="token keyword">AS</span> <span class="token string">&quot;姓名&quot;</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token keyword">CASE</span> gender <span class="token keyword">WHEN</span> <span class="token string">&#39;male&#39;</span> <span class="token keyword">THEN</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">WHEN</span> <span class="token string">&#39;female&#39;</span> <span class="token keyword">THEN</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">ELSE</span> <span class="token boolean">NULL</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;性别&quot;</span>
<span class="token keyword">FROM</span> t_reader
</code></pre></div><h4 id="搜索case表达式" tabindex="-1"><a class="header-anchor" href="#搜索case表达式"><span>搜索<code>CASE</code>表达式</span></a></h4><p>语法如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span>
  	<span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token operator">&lt;</span>返回值表达式<span class="token operator">&gt;</span>
	<span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token operator">&lt;</span>返回值表达式<span class="token operator">&gt;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">ELSE</span> <span class="token operator">&lt;</span>默认返回值表达式<span class="token operator">&gt;</span>
<span class="token keyword">END</span>
</code></pre></div><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 按照出版年份将图书分类为: 新书, 旧书, 未知</span>
<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> extract<span class="token punctuation">(</span><span class="token keyword">YEAR</span> <span class="token keyword">FROM</span> publish_date<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2000</span> <span class="token keyword">THEN</span> <span class="token string">&#39;新书&#39;</span> <span class="token keyword">WHEN</span> extract<span class="token punctuation">(</span><span class="token keyword">YEAR</span> <span class="token keyword">FROM</span> publish_date<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2000</span> <span class="token keyword">THEN</span> <span class="token string">&#39;旧书&#39;</span> <span class="token keyword">ELSE</span> <span class="token string">&#39;未知&#39;</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token string">&quot;新旧类别&quot;</span>
<span class="token keyword">FROM</span> t_book
</code></pre></div><h3 id="cte表达式" tabindex="-1"><a class="header-anchor" href="#cte表达式"><span>CTE表达式</span></a></h3><p>CTE(Common Table Expressions，公用表表达式)，用于在查询中定义临时性的结果集。</p><p>CTE语法如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> <span class="token operator">&lt;</span>CTE名称<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>列<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token keyword">AS</span><span class="token punctuation">(</span>
	<span class="token comment">-- CTE查询定义语句</span>
<span class="token punctuation">)</span>

<span class="token comment">-- 使用CTE</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>CTE名称<span class="token operator">&gt;</span>
</code></pre></div><p>示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> cte<span class="token punctuation">(</span>book<span class="token punctuation">,</span> reader<span class="token punctuation">,</span> borrow_at<span class="token punctuation">,</span> return_at<span class="token punctuation">)</span> <span class="token keyword">AS</span><span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> t2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> t3<span class="token punctuation">.</span>name<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>borrow_at<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>return_at
  <span class="token keyword">FROM</span> t_borrow_record <span class="token keyword">AS</span> t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_book   <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id
							 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_reader <span class="token keyword">AS</span> t3 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>reader_id <span class="token operator">=</span> t3<span class="token punctuation">.</span>id
<span class="token punctuation">)</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> cte <span class="token keyword">WHERE</span> book <span class="token operator">=</span> <span class="token string">&#39;红楼梦&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="exists谓词" tabindex="-1"><a class="header-anchor" href="#exists谓词"><span><code>EXISTS</code>谓词</span></a></h3><h3 id="窗口函数" tabindex="-1"><a class="header-anchor" href="#窗口函数"><span>窗口函数</span></a></h3><p>窗口函数，也叫做OLAP函数(Online Analytical Procession，实时分析处理)。只能用在<code>SELECT</code>子句中。</p><p>窗口函数包括：</p><ul><li>5个聚合函数：<code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MIN</code>, <code>MAX</code></li><li>OLAP专用函数：<code>RANK</code>, <code>DENSE_RANK</code>, <code>ROW_NUMBER</code>等</li></ul><p>窗口函数语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>窗口函数<span class="token operator">&gt;</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>分区列清单<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>排序列清单<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre></div><p>示例：使用<code>RANK()</code>窗口函数计算排名</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 获取每个出版社中图书按照价格从低到高排序的序号</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> price<span class="token punctuation">,</span> RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
<span class="token keyword">FROM</span> t_book
</code></pre></div><p><img src="`+e+`" alt=""></p><p><code>PARTITION BY</code>不是必须的，如果不写，表示将整张表视为1个分区。示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> price<span class="token punctuation">,</span> RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token comment">/*PARTITION BY publisher*/</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
<span class="token keyword">FROM</span> t_book
</code></pre></div><p><img src="`+o+`" alt=""></p><p><code>RANK</code>, <code>DENSE_RANK</code> 和 <code>ROW_NUMBER</code> 窗口函数的区别，示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> price<span class="token punctuation">,</span> 
       RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token comment">/*PARTITION BY publisher*/</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking<span class="token punctuation">,</span>
	   DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token comment">/*PARTITION BY publisher*/</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> dense_ranking<span class="token punctuation">,</span>
	   ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token comment">/*PARTITION BY publisher*/</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> row_num
<span class="token keyword">FROM</span> t_book
</code></pre></div><p><img src="`+t+`" alt=""></p><p>将聚合函数作为窗口函数使用，示例：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> price<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;图书数量&quot;</span><span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;图书总价&quot;</span><span class="token punctuation">,</span>
	   <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;平均价格&quot;</span><span class="token punctuation">,</span>
	   <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;最低价格&quot;</span><span class="token punctuation">,</span>
	   <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;最高价格&quot;</span>
<span class="token keyword">FROM</span> t_book
</code></pre></div><p><img src="`+c+'" alt=""></p>',187),r=[k];function d(u,i){return a(),n("div",null,r)}const w=s(l,[["render",d],["__file","sql查询.html.vue"]]);export{w as default};

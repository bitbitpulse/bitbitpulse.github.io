import{_ as n,o as a,c as s,d as t}from"./app-HBA039kk.js";const p={},e=t(`<h1 id="spring-cloud服务调用与客户端负载均衡" tabindex="-1"><a class="header-anchor" href="#spring-cloud服务调用与客户端负载均衡"><span>Spring Cloud服务调用与客户端负载均衡</span></a></h1><p>参考：</p><ul><li>https://spring.io/projects/spring-cloud-openfeign</li><li>https://docs.spring.io/spring-cloud-commons/reference/spring-cloud-commons/loadbalancer.html</li><li>https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html</li></ul><h2 id="使用resttemplate调用服务" tabindex="-1"><a class="header-anchor" href="#使用resttemplate调用服务"><span>使用RestTemplate调用服务</span></a></h2><h3 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h3><p>1.注入<code>RestTemplate</code>Bean</p><p>使用注解<code>@LoadBalanced</code>开启负载均衡，默认使用轮询策略</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用服务ID代替IP:Port，调用远程服务</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/port&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://{serviceId}/provider-a/port&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="使用spring-cloud-openfeign调用服务" tabindex="-1"><a class="header-anchor" href="#使用spring-cloud-openfeign调用服务"><span>使用Spring Cloud OpenFeign调用服务</span></a></h2><h3 id="快速开始-1" tabindex="-1"><a class="header-anchor" href="#快速开始-1"><span>快速开始</span></a></h3><p>1.添加依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>2.使用注解<code>@EnableFeignClients</code>，启用OpenFeign</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaConsumerCApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaConsumerCApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>3.定义Feign客户端接口，使用注解<code>@FeignClient</code></p><p><code>@FeignClient</code>注解的接口，将被动态创建其Bean实例。注意，Feign客户端接口上，不支持类级别的<code>@RequestMapping</code>注解。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/provider-a/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>4.调用远程服务</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer-c&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">TestClient</span> testClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> testClient<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="创建feign客户端bean的时机" tabindex="-1"><a class="header-anchor" href="#创建feign客户端bean的时机"><span>创建Feign客户端Bean的时机</span></a></h3><p>默认情况下，被<code>@FeignClient</code>标记的接口，在Spring容器启动的时候，饥饿加载，也支持懒加载。使用下面的配置开启</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.openfeign.lazy-attributes-resolution</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><h3 id="对请求和响应进行压缩" tabindex="-1"><a class="header-anchor" href="#对请求和响应进行压缩"><span>对请求和响应进行压缩</span></a></h3><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.openfeign.compression.request.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.cloud.openfeign.compression.request.mime-types</span><span class="token punctuation">=</span><span class="token value attr-value">text/xml, application/xml, application/json</span>
<span class="token key attr-name">spring.cloud.openfeign.compression.request.min-request-size</span><span class="token punctuation">=</span><span class="token value attr-value">2048</span>

<span class="token key attr-name">spring.cloud.openfeign.compression.response.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><h3 id="配置openfeign" tabindex="-1"><a class="header-anchor" href="#配置openfeign"><span>配置OpenFeign</span></a></h3><p>配置OpenFeign有2种方式：</p><ul><li>Java配置类</li><li>以 <em>spring.cloud.openfeign.client.config</em> 开头的配置项</li></ul><p><strong>使用Java配置类</strong></p><p>1.定义配置类</p><p>注意，不要使用<code>@Configuration</code>注解</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public class DefaultFeignClientConfig {

    @Bean
    public Logger.Level defaultLoggerLevel(){
        return Logger.Level.BASIC;
    }
}
</code></pre></div><p>2.在<code>@EnableFeignClients</code>注解中，使用<code>defaultConfiguration</code>属性将其指定为全局默认配置</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> <span class="token class-name">DefaultFeignClientConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaConsumerCApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaConsumerCApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>或者在<code>@FeignClient</code>注解中，使用<code>configuration</code>属性将其指定为单个Feign客户端的配置</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">EurekaProviderAFeignClientConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre></div><p><strong>使用spring.cloud.openfeign.client.config开头的配置项</strong></p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 默认配置</span>
<span class="token key attr-name">spring.cloud.openfeign.client.default-config</span><span class="token punctuation">=</span><span class="token value attr-value">default</span>
<span class="token key attr-name">spring.cloud.openfeign.client.config.default.logger-level</span><span class="token punctuation">=</span><span class="token value attr-value">basic</span>
<span class="token comment"># 单个Feign客户端的配置</span>
<span class="token key attr-name">spring.cloud.openfeign.client.config.eureka-provider-a.logger-level</span><span class="token punctuation">=</span><span class="token value attr-value">full</span>
</code></pre></div><h3 id="配置请求超时控制" tabindex="-1"><a class="header-anchor" href="#配置请求超时控制"><span>配置请求超时控制</span></a></h3><p>配置默认超时</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.openfeign.client.default-config</span><span class="token punctuation">=</span><span class="token value attr-value">default</span>
<span class="token key attr-name">spring.cloud.openfeign.client.config.default.connect-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span>
<span class="token key attr-name">spring.cloud.openfeign.client.config.default.read-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">2000</span>
</code></pre></div><p>配置单个Feign客户端超时</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.openfeign.client.config.eureka-provider-a.connect-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span>
<span class="token key attr-name">spring.cloud.openfeign.client.config.eureka-provider-a.read-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span>
</code></pre></div><h3 id="配置feign日志" tabindex="-1"><a class="header-anchor" href="#配置feign日志"><span>配置Feign日志</span></a></h3><p>Feign日志只有在 <em>DEBUG</em> 级别才会输出</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.group.oepn-feign</span><span class="token punctuation">=</span><span class="token value attr-value">me.lyp.sc.eureka.consumer.c.clients</span>
<span class="token key attr-name">logging.level.oepn-feign</span><span class="token punctuation">=</span><span class="token value attr-value">debug</span>
</code></pre></div><p>然后，配置<code>Logger.Level</code>对象，OpenFeign支持4种Level：</p><ul><li>none，不输出任何信息，默认值</li><li>basic，输出请求方法、URL，响应状态码，执行时间</li><li>headers，输出basic级别的日志，以及请求头和响应头信息</li><li>full，输出headers级别的日志，以及请求体和响应体信息</li></ul><p>配置默认日志输出级别</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.openfeign.client.config.default.logger-level</span><span class="token punctuation">=</span><span class="token value attr-value">basic</span>
</code></pre></div><p>配置特定服务提供者日志输出级别</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.openfeign.client.config.eureka-provider-a.logger-level</span><span class="token punctuation">=</span><span class="token value attr-value">full</span>
</code></pre></div><h3 id="支持spring-cloud-loadbalancer" tabindex="-1"><a class="header-anchor" href="#支持spring-cloud-loadbalancer"><span>支持Spring Cloud LoadBalancer</span></a></h3><p>略</p><h3 id="与断路器结合实现后备模式" tabindex="-1"><a class="header-anchor" href="#与断路器结合实现后备模式"><span>与断路器结合实现后备模式</span></a></h3><p>1.开启断路器支持</p><p>Spring Cloud CircuitBreaker</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.openfeign.circuitbreaker.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.cloud.openfeign.circuitbreaker.alphanumeric-ids.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><p>Netflix Hystrix</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">feign.hystrix.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><p>Alibaba Sentinel</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">feign.sentinel.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><p>2.使用<code>fallback</code>属性指定后备处理器类</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">TestClientFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/provider-a/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>后备处理器类必须实现Feign客户端接口，并且注入到Spring容器中</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClientFallback</span> <span class="token keyword">implements</span> <span class="token class-name">TestClient</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Fallback&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>3.使用<code>fallbackFactory</code>属性指定后被处理器工厂类</p><p>使用<code>fallbackFactory</code>属性的方式，可以获取到导致Fallback的异常</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> <span class="token class-name">TestClientFallbackFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/provider-a/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>后备处理器工厂类实现<code>FallbackFactory&lt;T&gt;</code>接口，接收泛型参数类型为后备处理器类。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClientFallbackFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestClientFallback</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TestClientFallback</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TestClientFallback</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClientFallback</span> <span class="token keyword">implements</span> <span class="token class-name">TestClient</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TestClientFallback</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cause <span class="token operator">=</span> cause<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cause<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="使用spring-cloud-loadbalancer进行客户端负载均衡" tabindex="-1"><a class="header-anchor" href="#使用spring-cloud-loadbalancer进行客户端负载均衡"><span>使用Spring Cloud LoadBalancer进行客户端负载均衡</span></a></h2><h3 id="快速开始-2" tabindex="-1"><a class="header-anchor" href="#快速开始-2"><span>快速开始</span></a></h3><p>1.添加依赖</p><p>当使用以下服务发现客户端时，自动包含了<em>spring-cloud-starter-loadbalancer</em>，无需手动添加依赖：</p><ul><li>spring-cloud-starter-netflix-eureka-client</li><li>spring-cloud-starter-consul-discovery</li><li>spring-cloud-starter-zookeeper-discovery</li></ul><p>当使用nacos服务发现客户端 <em>spring-cloud-starter-alibaba-nacos-discovery</em> 时，为包含负载均衡库，需要手动添加依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>2.开启负载均衡</p><p>如果使用<code>RestTemplate</code>调用服务，需要用<code>@LoadBalanced</code>注解，然后使用服务ID进行服务调用。默认使用轮询策略进行负载均衡。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果使用OpenFeign，默认开启负载均衡</p><h3 id="负载均衡策略" tabindex="-1"><a class="header-anchor" href="#负载均衡策略"><span>负载均衡策略</span></a></h3><p>LoadBalancer负载均衡策略类都是<code>org.springframework.cloud.client.loadbalancer.reactive.ReactiveLoadBalancer</code>的实现类，内置下面几种负载均衡策略类：</p><ul><li><code>RoundRobinLoadBalancer</code>，轮询策略，默认</li><li><code>RandomLoadBalancer，随机策略</code></li></ul><p>另外，如果使用<code>spring-cloud-starter-alibaba-nacos-discovery</code>进行服务发现，其提供了一个<code>NacosLoadBalancer</code>，使用下面的配置启用</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.loadbalancer.nacos.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><p>消费者可以针对特定的服务提供者设置负载均衡策略。</p><p>首先，定义类，注入负载均衡策略类Bean对象。</p><p>注意，不要添加<code>@Configuration</code>，否则，LoadBalancer会将其作为所有服务提供者的负载均衡策略。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">me<span class="token punctuation">.</span>lyp<span class="token punctuation">.</span>sc<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>a<span class="token punctuation">.</span>loadbalancer</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaProviderALoadBalancer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ReactorLoadBalancer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> <span class="token function">randomLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> 
                                                                   <span class="token class-name">LoadBalancerClientFactory</span> loadBalancerClientFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">LoadBalancerClientFactory</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomLoadBalancer</span><span class="token punctuation">(</span>loadBalancerClientFactory<span class="token punctuation">.</span><span class="token function">getLazyProvider</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后，使用<code>@LoadBalancerClients</code>或<code>@LoadBalancerClient</code>定义针对特定服务提供者的负载均衡策略配置类</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">me<span class="token punctuation">.</span>lyp<span class="token punctuation">.</span>sc<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>a</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@LoadBalancerClients</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@LoadBalancerClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">EurekaProviderALoadBalancer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaConsumerAApp</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaConsumerAApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="使用netflix-ribbon进行客户端负载均衡" tabindex="-1"><a class="header-anchor" href="#使用netflix-ribbon进行客户端负载均衡"><span>使用Netflix Ribbon进行客户端负载均衡</span></a></h2><p>在新版的SpringCloud中，Ribbon已被移除，被LoadBalancer替代。Ribbon只在老版本的项目中使用。</p><h3 id="快速开始-3" tabindex="-1"><a class="header-anchor" href="#快速开始-3"><span>快速开始</span></a></h3><p>版本信息</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>1.添加依赖</p><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>2.开启负载均衡</p><p>在<code>RestTemplate</code>Bean上使用<code>@LoadBalanced</code>注解开启负载均衡，然后使用服务ID调用远程服务。</p><h3 id="负载均衡策略-1" tabindex="-1"><a class="header-anchor" href="#负载均衡策略-1"><span>负载均衡策略</span></a></h3><p>Ribbon负载均衡策略都是<code>com.netflix.loadbalancer.IRule</code>接口的实现类，内置了下面几种负载均衡策略类：</p><ul><li><code>RoundRobinRule</code>，轮询策略，默认</li><li><code>WeightedResponseTimeRule</code>，基于响应时间动态分配权重策略，平均响应时间越小，权重越高</li><li><code>ResponseTimeWeightedRule</code></li><li><code>RandomRule</code>，随机策略</li><li><code>RetryRule</code>，重试策略，请求失败会自动进行重试，最多重试预定义的此时（默认3次）</li><li><code>BestAvailableRule</code>，最小并发请求数策略</li><li><code>ZoneAvoidanceRule</code>，区域策略，优先选择处于同区域的实例</li><li><code>AvailabilityFilteringRule</code>，可用性过滤策略，先过滤掉非健康的实例，再选择并发连接数较小的实例</li></ul><p>消费者可以针对特定的服务提供者设置负载均衡策略，有2种方式：</p><ol><li><p>在配置文件中设置</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">eureka-provider-a.ribbon.NFLoadBalancerRuleClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.netflix.loadbalancer.RandomRule</span>
<span class="token key attr-name">eureka-provider-b.ribbon.NFLoadBalancerRuleClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.netflix.loadbalancer.BestAvailableRule</span>
</code></pre></div></li><li><p>使用注解<code>@RibbonClient</code>或<code>@RibbonClients</code></p><p>首先定义类，创建<code>IRule</code>对象。</p><p>注意，必须使用<code>@Configuration</code>，但是，不能在<code>@ComponentScan</code>扫描路径下，否则，Ribbon会将其作为所有服务提供者的负载均衡策略。</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">me<span class="token punctuation">.</span>lyp<span class="token punctuation">.</span>sc<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>loadbalancer</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaProviderARule</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后，使用注解<code>@RibbonClient</code>或<code>@RibbonClients</code>，定义针对特定服务提供者的负载均衡策略</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">me<span class="token punctuation">.</span>lyp<span class="token punctuation">.</span>sc<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>b</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@RibbonClients</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;eureka-provider-a&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">EurekaProviderARule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaConsumerBApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaConsumerBApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li></ol>`,108),o=[e];function c(l,u){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","Spring Cloud服务调用与客户端负载均衡.html.vue"]]);export{k as default};

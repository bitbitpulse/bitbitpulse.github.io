const t=JSON.parse('{"key":"v-954bd902","path":"/posts/coder/design-patterns/creational/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html","title":"原型模式","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"原型模式 原型模式（Prototype Pattern），是通过克隆已有对象来创建新对象的一种设计模式。在Java中，通过重写Object#clone方法即可。 代码实现 基础版：浅克隆 通用版：深克隆 可以通过序列化克隆对象 使用原型类创建对象 原型模式优缺点 优点： 简化创建复杂对象的操作 缺点： 需要为每个类创建1个clone方法，而且实现深克隆...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/design-patterns/creational/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"原型模式 原型模式（Prototype Pattern），是通过克隆已有对象来创建新对象的一种设计模式。在Java中，通过重写Object#clone方法即可。 代码实现 基础版：浅克隆 通用版：深克隆 可以通过序列化克隆对象 使用原型类创建对象 原型模式优缺点 优点： 简化创建复杂对象的操作 缺点： 需要为每个类创建1个clone方法，而且实现深克隆..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[{"level":3,"title":"基础版：浅克隆","slug":"基础版-浅克隆","link":"#基础版-浅克隆","children":[]},{"level":3,"title":"通用版：深克隆","slug":"通用版-深克隆","link":"#通用版-深克隆","children":[]}]},{"level":2,"title":"使用原型类创建对象","slug":"使用原型类创建对象","link":"#使用原型类创建对象","children":[]},{"level":2,"title":"原型模式优缺点","slug":"原型模式优缺点","link":"#原型模式优缺点","children":[]}],"git":{},"filePathRelative":"posts/coder/design-patterns/creational/原型模式.md","autoDesc":true}');export{t as data};

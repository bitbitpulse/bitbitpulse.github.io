import{_ as n,o as a,c as s,d as t}from"./app-HBA039kk.js";const p={},o=t(`<h1 id="springboot核心特性-自动配置" tabindex="-1"><a class="header-anchor" href="#springboot核心特性-自动配置"><span>SpringBoot核心特性-自动配置</span></a></h1><p>自动配置是SpringBoot的一个关键特性,旨在简化Spring应用程序的开发过程.</p><h2 id="约定大于配置" tabindex="-1"><a class="header-anchor" href="#约定大于配置"><span>约定大于配置</span></a></h2><p>SpringBoot遵循约定大于配置(Convention Over Configuration)的设计原则，通过一些列默认约定来简化开发和配置工作，从而提高开发效率。</p><h3 id="项目结构约定" tabindex="-1"><a class="header-anchor" href="#项目结构约定"><span>项目结构约定</span></a></h3><p>SpringBoot应用按照约定的标准目录结构进行组织，例如：</p><ul><li>应用文件整体为maven或gradle项目</li><li>在启动引导类位于顶层包下，使用<code>@SpringBootApplication</code>注解</li><li>默认配置文件为 <em>application.properties</em> 或 <em>application.yml</em></li><li>默认静态资源目录为 <em>classpath:/META-INF/resources/</em>，<em>classpath:/resources/</em>，<em>classpath:/static/</em>，<em>classpath:/public/</em></li><li>默认模板文件目录为 <em>classpath:/templates/</em></li></ul><h3 id="starter约定" tabindex="-1"><a class="header-anchor" href="#starter约定"><span>Starter约定</span></a></h3><p>约定Starter的命名规则：</p><ul><li>Spring官方Starter：<code>spring-boot-starter-*</code></li><li>非Spring官方Starter：<code>*-spring-boot-starter</code></li></ul><h2 id="自动配置" tabindex="-1"><a class="header-anchor" href="#自动配置"><span>自动配置</span></a></h2><p>SpringBoot的核心特性自动配置(Auto-Configuration)，是通过自动配置类来实现的。自动配置类根据应用的依赖关系和环境进行条件化装配。</p><h3 id="自动配置类" tabindex="-1"><a class="header-anchor" href="#自动配置类"><span>自动配置类</span></a></h3><p>自动配置类使用<code>@AutoConfiguration</code>注解，或者使用另外2个特定注解：<code>@AutoConfigureBefore</code> 和 <code>@AutoConfigureAfter</code>。并且使用<code>@Conditional</code>或者其派生注解，进行条件化装配。</p><p><code>spring-boot-autoconfigure</code>模块中，定义了SpringBoot自带的自动配置类，例如<code>WebMvcAutoConfiguration</code></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfiguration</span><span class="token punctuation">(</span>after <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">DispatcherServletAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TaskExecutionAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
		<span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ImportRuntimeHints</span><span class="token punctuation">(</span><span class="token class-name">WebResourcesRuntimeHints</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre></div><p>也可以自定义Starter，在其中创建自动配置类。</p><h3 id="启用自动配置" tabindex="-1"><a class="header-anchor" href="#启用自动配置"><span>启用自动配置</span></a></h3><p>要启用自动配置，需要使用注解<code>@EnableAutoConfiguration</code>，这样，SpringBoot在启动时，就可以根据配置类(使用<code>@Configuration</code>注解的类)进行解析，完成自动配置。</p><p><code>@SpringBootApplication</code>注解是一个复合注解，具备启用自动配置的能力：</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre></div><h2 id="条件化装配" tabindex="-1"><a class="header-anchor" href="#条件化装配"><span>条件化装配</span></a></h2><p>SpringBoot条件化装配(Conditional Configuration)，是指SpringBoot应用在启动时，根据特定条件来决定配置类是否生效。</p><h3 id="conditional" tabindex="-1"><a class="header-anchor" href="#conditional"><span><code>@Conditional</code></span></a></h3><p>使用<code>@Conditional</code>注解，指定条件类。</p><p><strong>1.定义条件类</strong></p><p>需要实现<code>Condition</code>接口，然后重写<code>Condition#matches</code>方法，返回true，表示条件满足。</p><p>这里自定义条件类，条件为类路径下是否存在<code>Person</code>类</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OnPersonClassCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;me.lyp.domain.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>2.在配置类上使用<code>@Conditional</code>注解，并指定条件类</strong></p><p>这里的配置类中，注入1个<code>Person</code> Bean</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">OnPersonClassCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>3.验证</strong></p><p>验证配置类是否生效（<code>Person</code> Bean是否注入成功）。</p><p>如果注入成功，启动SpringBoot应用时，下面的代码不会报错</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span>
</code></pre></div><h3 id="预定义条件注解" tabindex="-1"><a class="header-anchor" href="#预定义条件注解"><span>预定义条件注解</span></a></h3><p>SpringBoot预定义了一些<code>@Conditional</code>的派生注解，常用的几个如下：</p><ul><li><code>@ConditionalOnClass</code></li><li><code>@ConditionalOnMissingClass</code></li><li><code>@ConditionalOnBean</code></li><li><code>@ConditionalOnMissingBean</code></li><li><code>@ConditionalOnProperty</code></li><li><code>@ConditionalOnResource</code></li></ul><p>使用预定义条件注解</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="自定义条件注解" tabindex="-1"><a class="header-anchor" href="#自定义条件注解"><span>自定义条件注解</span></a></h3><p>模拟预定义条件注解<code>@ConditionalOnClass</code>。</p><p><strong>1.定义注解</strong></p><p>定义注解，使用<code>@Conditional</code>指定条件类</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">MyOnClassCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyConditionalOnClass</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>2.定义条件类</strong></p><p>定义条件类，在其中获取使用自定义的条件注解时指定的Class，判断类路径下是否存在</p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyOnClassCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>metadata <span class="token keyword">instanceof</span> <span class="token class-name">ClassMetadata</span> classMetadata<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取被注解的类(配置类)</span>
                <span class="token class-name">String</span> className <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configClz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取配置类上的 @MyConditionalOnClass</span>
                <span class="token class-name">MyConditionalOnClass</span> annotation <span class="token operator">=</span> configClz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyConditionalOnClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取 @MyConditionalOnClass 的value属性值</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果没有指定任何Class, 认为条件满足</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>classes <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> classes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 如果指定了Class, 判断类路径下是否存在该类</span>
                <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clz <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>clz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>3.使用</strong></p><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token comment">//@Conditional(OnPersonClassCondition.class)</span>
<span class="token comment">//@ConditionalOnClass(Person.class)</span>
<span class="token annotation punctuation">@MyConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="starter启动器" tabindex="-1"><a class="header-anchor" href="#starter启动器"><span>Starter启动器</span></a></h2><p>Starter启动器封装了特定的依赖库和自动配置类，在SpringBoot应用中，通过引入Starter依赖，自定获得对特定功能的支持，无需手动添加依赖和配置代码。</p><h2 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置"><span>自定义配置</span></a></h2><p>SpringBoot支持通过属性文件或配置类覆盖默认配置。</p>`,55),e=[o];function c(l,u){return a(),s("div",null,e)}const k=n(p,[["render",c],["__file","SpringBoot核心特性-自动配置.html.vue"]]);export{k as default};

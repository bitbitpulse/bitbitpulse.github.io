const t=JSON.parse('{"key":"v-38f8a756","path":"/posts/coder/design-patterns/creational/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html","title":"简单工厂模式","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"简单工厂模式 说明 简单工厂模式（Simple Factory Pattern），不属于GoF23种设计模式之一。 简单工厂模式的核心是，在工厂类中提供1个工厂方法，根据参数创建不同类型的对象。 代码实现 定义产品类 产品类一般都有1个公共的超类或接口 这里定义3个具体的产品类 实现简单工厂类 根据方法参数，创建不同类型的产品 使用简单工厂创建对象 简...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/design-patterns/creational/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"简单工厂模式"}],["meta",{"property":"og:description","content":"简单工厂模式 说明 简单工厂模式（Simple Factory Pattern），不属于GoF23种设计模式之一。 简单工厂模式的核心是，在工厂类中提供1个工厂方法，根据参数创建不同类型的对象。 代码实现 定义产品类 产品类一般都有1个公共的超类或接口 这里定义3个具体的产品类 实现简单工厂类 根据方法参数，创建不同类型的产品 使用简单工厂创建对象 简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[{"level":3,"title":"定义产品类","slug":"定义产品类","link":"#定义产品类","children":[]},{"level":3,"title":"实现简单工厂类","slug":"实现简单工厂类","link":"#实现简单工厂类","children":[]}]},{"level":2,"title":"使用简单工厂创建对象","slug":"使用简单工厂创建对象","link":"#使用简单工厂创建对象","children":[]},{"level":2,"title":"简单工厂模式的优缺点","slug":"简单工厂模式的优缺点","link":"#简单工厂模式的优缺点","children":[]}],"git":{},"filePathRelative":"posts/coder/design-patterns/creational/简单工厂模式.md","autoDesc":true}');export{t as data};

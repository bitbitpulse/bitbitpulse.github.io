const t=JSON.parse('{"key":"v-7a5ab306","path":"/posts/coder/design-patterns/structural/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"适配器模式 适配器模式（Adapter Pattern），是一种结构型模式，用于将现有接口转换为客户端需要的另一个接口。 代码实现 以音乐播放器为例，假设现在有一个音乐播放器，仅支持播放mp3格式的音乐，而现在需要支持其它格式（mp4，avi等）。可以使用适配器模式来实现。 定义接口MediaPlayer，表示播放器 定义AudiaPlayer类，实现...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/design-patterns/structural/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"适配器模式 适配器模式（Adapter Pattern），是一种结构型模式，用于将现有接口转换为客户端需要的另一个接口。 代码实现 以音乐播放器为例，假设现在有一个音乐播放器，仅支持播放mp3格式的音乐，而现在需要支持其它格式（mp4，avi等）。可以使用适配器模式来实现。 定义接口MediaPlayer，表示播放器 定义AudiaPlayer类，实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"使用适配器类","slug":"使用适配器类","link":"#使用适配器类","children":[]},{"level":2,"title":"适配器类优缺点","slug":"适配器类优缺点","link":"#适配器类优缺点","children":[]}],"git":{},"filePathRelative":"posts/coder/design-patterns/structural/适配器模式.md","autoDesc":true}');export{t as data};

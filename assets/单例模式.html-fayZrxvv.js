const t=JSON.parse('{"key":"v-5c73f5c7","path":"/posts/coder/design-patterns/creational/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"单例模式","lang":"zh-CN","frontmatter":{"sidebar":"auto","description":"单例模式 单例模式（Singleton Pattern），实现全局唯一实例。 \\"饿汉式\\"单例类 静态成员变量在类加载时执行，创建单例类对象，从而保证全局唯一。 \\"懒汉式\\"单例类 基础版 存在线程安全问题 同步方法 给整个方法加锁，效率不高。 同步代码块：\\"双重检查锁定\\" 使用同步代码块，只锁定创建对象的代码，效率较高。 注意，必须要将成员变量声明为vo...","head":[["meta",{"property":"og:url","content":"https://bitbitpulse.github.io/posts/coder/design-patterns/creational/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Bitbitpulse"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"单例模式 单例模式（Singleton Pattern），实现全局唯一实例。 \\"饿汉式\\"单例类 静态成员变量在类加载时执行，创建单例类对象，从而保证全局唯一。 \\"懒汉式\\"单例类 基础版 存在线程安全问题 同步方法 给整个方法加锁，效率不高。 同步代码块：\\"双重检查锁定\\" 使用同步代码块，只锁定创建对象的代码，效率较高。 注意，必须要将成员变量声明为vo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"\\"饿汉式\\"单例类","slug":"饿汉式-单例类","link":"#饿汉式-单例类","children":[]},{"level":2,"title":"\\"懒汉式\\"单例类","slug":"懒汉式-单例类","link":"#懒汉式-单例类","children":[{"level":3,"title":"基础版","slug":"基础版","link":"#基础版","children":[]},{"level":3,"title":"同步方法","slug":"同步方法","link":"#同步方法","children":[]},{"level":3,"title":"同步代码块：\\"双重检查锁定\\"","slug":"同步代码块-双重检查锁定","link":"#同步代码块-双重检查锁定","children":[]}]},{"level":2,"title":"IoDH(推荐)","slug":"iodh-推荐","link":"#iodh-推荐","children":[]}],"git":{},"filePathRelative":"posts/coder/design-patterns/creational/单例模式.md","autoDesc":true}');export{t as data};

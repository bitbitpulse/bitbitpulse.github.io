<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://bitbitpulse.github.io/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://bitbitpulse.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Bitbitpulse</title>
    <link>https://bitbitpulse.github.io/</link>
    <description>Bitbitpulse的技术博客</description>
    <language>zh-CN</language>
    <pubDate>Thu, 21 Mar 2024 09:07:11 GMT</pubDate>
    <lastBuildDate>Thu, 21 Mar 2024 09:07:11 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title></title>
      <link>https://bitbitpulse.github.io/donates/</link>
      <guid>https://bitbitpulse.github.io/donates/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml"></source>
      <description>捐赠 </description>
      <content:encoded><![CDATA[<p>捐赠</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目A</title>
      <link>https://bitbitpulse.github.io/projects/%E9%A1%B9%E7%9B%AEA.html</link>
      <guid>https://bitbitpulse.github.io/projects/%E9%A1%B9%E7%9B%AEA.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">项目A</source>
      <description>项目A </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>早起的一天</title>
      <link>https://bitbitpulse.github.io/journals/2024/%E6%97%A9%E8%B5%B7%E7%9A%84%E4%B8%80%E5%A4%A9.html</link>
      <guid>https://bitbitpulse.github.io/journals/2024/%E6%97%A9%E8%B5%B7%E7%9A%84%E4%B8%80%E5%A4%A9.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">早起的一天</source>
      <description>早起的一天 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>人工智能</title>
      <link>https://bitbitpulse.github.io/posts/ai/</link>
      <guid>https://bitbitpulse.github.io/posts/ai/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">人工智能</source>
      <description>数学、自然语言处理、机器学习、深度学习、强化学习</description>
    </item>
    <item>
      <title>数据库技术</title>
      <link>https://bitbitpulse.github.io/posts/database/</link>
      <guid>https://bitbitpulse.github.io/posts/database/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">数据库技术</source>
      <description>SQL, MySQL, PostgreSQL, SQLite, Redis, MongoDB...</description>
    </item>
    <item>
      <title>Charlse</title>
      <link>https://bitbitpulse.github.io/posts/devtools/charlse.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/charlse.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Charlse</source>
      <description>Charlse </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Docker入门</title>
      <link>https://bitbitpulse.github.io/posts/devtools/docker%E5%85%A5%E9%97%A8.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/docker%E5%85%A5%E9%97%A8.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Docker入门</source>
      <description>Docker入门 Docker镜像 查看本地镜像 docker images 搜索镜像 docker search ubuntu 下载镜像 下载默认镜像 docker pull ubuntu 或 docker pull ubuntu:latest 下载指定Tag的镜像 docker pull ubuntu:22.04 下载指定摘要的镜像 docker ...</description>
      <content:encoded><![CDATA[
<h2>Docker镜像</h2>
<p><strong>查看本地镜像</strong></p>
<p><code>docker images</code></p>
<p><strong>搜索镜像</strong></p>
<p><code>docker search ubuntu</code></p>
<p><strong>下载镜像</strong></p>
<p>下载默认镜像</p>
<p><code>docker pull ubuntu </code> 或 <code>docker pull ubuntu:latest</code></p>
<p>下载指定Tag的镜像</p>
<p><code>docker pull ubuntu:22.04</code></p>
<p>下载指定摘要的镜像</p>
<p><code>docker pull ubuntu@sha256:6042500cf4b44023ea1894effe7890666b0c5c7871ed83a97c36c76ae560bb9b</code></p>
<p>下载其它Registry中的镜像</p>
<p><code>docker image pull myregistry.local:5000/username/image-name</code></p>
<p><strong>删除镜像</strong></p>
<p><code>docker rmi ubuntu</code></p>
<p><strong>构建镜像</strong></p>
<p>基于已有容器构建镜像</p>
<p><code>docker commit 70a278c1a081 username/ubuntu:tag</code></p>
<p>基于Dockerfile构建镜像，使用当前目录下的Dockerfile文件，无镜像名和Tag</p>
<p><code>docker build .</code></p>
<p>指定Dockerfile文件路径</p>
<p><code>docker build --file E:\coding\docker\Dockerfile .</code></p>
<p>指定镜像名和Tag</p>
<p><code>docker build --file E:\coding\docker\Dockerfile --tag ubuntu:vim .</code></p>
<p>查看镜像构建历史</p>
<p><code>docker history ubuntu:vim</code></p>
<p><strong>镜像Tag</strong></p>
<p>创建Tag</p>
<p><code>docker tag ubuntu:22.04 ubuntu:22</code></p>
<p>删除Tag，只能通过name:tag删除</p>
<p><code>docker rmi ubuntu:22</code></p>
<h2>Docker容器</h2>
<p><strong>列出容器</strong></p>
<p><code>docker ps</code></p>
<p><code>docker ps -a</code></p>
<p><code>docker ps -a --filter status=exited</code></p>
<p><code>docker ps -a --filter status=running</code></p>
<p><strong>查看容器详细信息</strong></p>
<p><code>docker inspect myubuntu</code></p>
<p><strong>运行容器</strong></p>
<p><code>docker run ubuntu:22.04</code></p>
<p>指定容器名称</p>
<p><code>docker run --name myubuntu ubuntu:22.04</code></p>
<p>在后台运行</p>
<p><code>docker run -d --name myubuntu ubuntu:22.04</code></p>
<p>自动重启</p>
<p><code>docker run -d --restart=always --name myhttpd httpd</code></p>
<p>restart参数：</p>
<ul>
<li>
<p><code>no</code>：不开启自动重启</p>
</li>
<li>
<p><code>always</code>：总是自动重启</p>
</li>
<li>
<p><code>on-failure:3</code>：尝试自动重启n次</p>
</li>
</ul>
<p><strong>查看容器运行日志</strong></p>
<p><code>docker logs myhttpd</code></p>
<p><strong>进入容器</strong></p>
<p>使用启动容器时的终端</p>
<p><code>docker attach c1078a27225d </code></p>
<p>使用新的终端</p>
<p><code>docker exec -it c1078a27225d /bin/sh</code></p>
<p><strong>创建/更新/启动/停止/重启/暂停/恢复容器</strong></p>
<p>创建</p>
<blockquote>
<p>类似<code>docker run -d</code>，只是不会马上启动，还需要执行 <code>docker start</code> 命令</p>
</blockquote>
<p><code>docker create --name myhttpd httpd</code></p>
<p>更新</p>
<p><code>docker update myhttpd --restart=always</code></p>
<p>启动</p>
<p><code>docker start myhttpd</code></p>
<p>停止</p>
<p><code>docker stop myhttpd</code></p>
<p>重启</p>
<p><code>docker restart myhttpd</code></p>
<p>暂停</p>
<p><code>docker pause myhttpd</code></p>
<p>恢复</p>
<p><code>docker unpause myhttpd </code></p>
<p><strong>重命名容器</strong></p>
<p><code>docker rename myhttpd httpd-x</code></p>
<p><strong>删除容器</strong></p>
<p><code>docker rm myhttpd</code></p>
<h2>Docker网络</h2>
<p><strong>列出网络</strong></p>
<blockquote>
<p>docker默认创建3种网络：none, host, bridge</p>
</blockquote>
<p><code>docker network ls</code></p>
<p><strong>创建网络</strong></p>
<p><code>docker network create --driver bridge my-bridge-network</code></p>
<p>查看网络详细信息</p>
<p><code>docker network inspect my-bridge-network</code></p>
<p><strong>删除网络</strong></p>
<p>删除一个或多个自定义网络</p>
<p><code>docker network rm my-bridge-network</code></p>
<p>删除全部未使用的自定义网络</p>
<p><code>docker network prune</code></p>
<p><strong>启动容器时设置网络</strong></p>
<p><code>docker run -itd --network=my-bridge-network busybox</code></p>
<p><strong>给正在运行的容器设置网络</strong></p>
<p><code>docker network connect my-bridge-network c1078a27225d</code></p>
<p><strong>断开容器与网络</strong></p>
<p><code>docker network disconnect my-bridge-network c1078a27225d</code></p>
<p><strong>端口映射</strong></p>
<p>-p host_port:container_port</p>
<p><code>docker run -d -p 8080:80 httpd</code></p>
<h2>Docker存储</h2>
<p>docker有2类数据：</p>
<ul>
<li>镜像和容器数据，默认存储在 <em>/var/lib/docker/</em> 目录下</li>
<li>volume数据，host文件系统中的目录和文件，被挂载到容器的文件系统中</li>
</ul>
<p><strong>挂载host中指定的目录或文件到容器文件系统</strong></p>
<p>使用-v选项，指定host挂载源和container挂载点</p>
<p><code>docker run -d -p 80:80 -v E:\coding\docker\htdocs:/usr/local/apache2/htdocs --name myhttpd httpd</code></p>
<p><strong>挂载host中默认目录到容器文件系统</strong></p>
<p>使用-v选项，只需要指定container挂载点</p>
<p><code>docker run -d -p 80:80 -v /usr/local/apache2/htdocs --name myhttpd httpd</code></p>
<p>查看默认挂载源，Mounts设置中，默认挂载源为host文件系统中 <em>/var/lib/docker/volumes/容器ID/_data/</em></p>
<p><code>docker inspect myhttpd</code></p>
<p><strong>列出volume</strong></p>
<p><code>docker volume ls</code></p>
<p><strong>查看volume详细信息</strong></p>
<p><code>docker volume inspect 5b37dfb391b5ca6d11f00882d0ec7e9373cb2bf1cda9b8d4e2ab8abab1ca7f54</code></p>
<p><strong>创建volume</strong></p>
<p><code>docker volume create</code></p>
<p><strong>删除volume</strong></p>
<p>删除一个或多个</p>
<p><code>docker volume rm 0c94ba01fa39b718703d785b323a473cbd47c841554519e3644d605767101a4a</code></p>
<p>删除所有未使用的volume</p>
<p><code>docker volume prune</code></p>
<h2>Dockerfile文件</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Docker环境搭建</title>
      <link>https://bitbitpulse.github.io/posts/devtools/docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Docker环境搭建</source>
      <description>Docker环境搭建 Windows安装docker 参考： https://docs.docker.com/desktop/install/windows-install/ https://docs.docker.com/get-docker/ Linux安装docker Ubuntu 参考： https://docs.docker.com/engi...</description>
      <content:encoded><![CDATA[
<h2>Windows安装docker</h2>
<p>参考：</p>
<ul>
<li>
<p>https://docs.docker.com/desktop/install/windows-install/</p>
</li>
<li>
<p>https://docs.docker.com/get-docker/</p>
</li>
</ul>
<h2>Linux安装docker</h2>
<h3>Ubuntu</h3>
<p>参考：</p>
<ul>
<li>https://docs.docker.com/engine/install/ubuntu/</li>
</ul>
<p>1.卸载docker旧版本</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">pkg</span> <span class="token keyword">in</span> docker.io docker-doc <span class="token function">docker-compose</span> docker-compose-v2 podman-docker containerd runc<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token variable">$pkg</span><span class="token punctuation">;</span> <span class="token keyword">done</span>
</code></pre></div><p>2.配置docker repository</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Add Docker's official GPG key:</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ca-certificates <span class="token function">curl</span>
<span class="token function">sudo</span> <span class="token function">install</span> <span class="token parameter variable">-m</span> 0755 <span class="token parameter variable">-d</span> /etc/apt/keyrings
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.asc
<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /etc/apt/keyrings/docker.asc

<span class="token comment"># Add the repository to Apt sources:</span>
<span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>
  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">.</span> /etc/os-release <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$VERSION_CODENAME</span>"</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token punctuation">\</span>
  <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">&gt;</span> /dev/null
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
</code></pre></div><p>3.安装docker</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre></div><p>4.验证</p>
<p><code>docker --version</code></p>
<h2>修改镜像存储位置</h2>
<h3>Windows</h3>
<p>默认存储位置：C:\Users\username\AppData\Local\Docker\wsl\</p>
<p>打开Docker Desktop，依次选择Settings -&gt; Resources -&gt; Advanced，设置Disk image location为新的目录，docker会自动进行设置，并将原有镜像移动到新的目录。</p>
<h3>Linux</h3>
<p>默认存储位置： /var/lib/docker/image/</p>
]]></content:encoded>
    </item>
    <item>
      <title>Fidller</title>
      <link>https://bitbitpulse.github.io/posts/devtools/fidller.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/fidller.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Fidller</source>
      <description>Fidller </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>github入门</title>
      <link>https://bitbitpulse.github.io/posts/devtools/github%E5%85%A5%E9%97%A8.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/github%E5%85%A5%E9%97%A8.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">github入门</source>
      <description>github入门 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Git入门</title>
      <link>https://bitbitpulse.github.io/posts/devtools/git%E5%85%A5%E9%97%A8.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/git%E5%85%A5%E9%97%A8.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Git入门</source>
      <description>Git入门 参考： 官网：https://git-scm.com/ 下载安装 https://git-scm.com/downloads 配置 3个配置文件 系统配置文件：/etc/gitconfig，windows系统在git安装目录下 ​ git config --system 用户配置文件：~/.gitconfig ​ git config --...</description>
      <content:encoded><![CDATA[
<p>参考：</p>
<ul>
<li>官网：https://git-scm.com/</li>
</ul>
<h2>下载安装</h2>
<p>https://git-scm.com/downloads</p>
<h2>配置</h2>
<h3>3个配置文件</h3>
<ul>
<li>系统配置文件：/etc/gitconfig，windows系统在git安装目录下</li>
</ul>
<p>​	<code>git config --system</code></p>
<ul>
<li>用户配置文件：~/.gitconfig</li>
</ul>
<p>​	<code>git config --global</code></p>
<ul>
<li>本地配置文件：.git/config</li>
</ul>
<p>​	<code>git config --local</code></p>
<h3>查看配置信息</h3>
<p>查看全部配置文件以及配置项</p>
<p><code> git config --list --show-origin</code></p>
<p>查看系统、用户、本地配置项</p>
<p><code>git config --list</code></p>
<p><code>git config --system --list</code></p>
<p><code>git config --global --list</code></p>
<p><code>git config --local --list</code></p>
<p>查看某一个配置项</p>
<p><code>git config --global user.name</code></p>
<h3>配置用户信息</h3>
<p><code>git config --global user.name "bitbitpulse"</code></p>
<p><code>git config --global user.email bitbitpulse@gmail.com</code></p>
<h3>配置默认文本编辑器</h3>
<p><code>git config --global core.editor vim</code></p>
<p><code>git config --global core.editor "'D:\apps\Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"</code></p>
<h3>删除配置</h3>
<p><code>git config --global --unset user.name</code></p>
<h2>Git核心概念</h2>
<ul>
<li>Git是基于<strong>快照</strong>的，区别于其它基于差异的版本控制系统</li>
<li>Git文件的3种状态：<strong>已修改(modified)、已暂存(staged)、已提交(committed)</strong>，对应3个阶段：<strong>工作区、暂存区、Git目录</strong></li>
</ul>
<h2>Git基础操作</h2>
<p>初始化本地仓库</p>
<p><code>cd path/to/repo</code></p>
<p><code>git init</code></p>
<p>查看文件状态</p>
<p><code>git status</code></p>
<p>跟踪新文件，更新到暂存区</p>
<p><code>git add a.txt</code></p>
<p>查看已暂存的文件暂存前后的变化</p>
<p><code>git diff</code></p>
<p><code>git diff --cached</code></p>
<p>从暂存区移除文件，恢复到工作区</p>
<p><code>git rm --cached a.txt</code></p>
<p>提交，从暂存区更新到Git目录</p>
<p><code>git commit -m "initial git repo"</code></p>
<p>修改提交，用新的提交覆盖上一次提交记录</p>
<p><code>git commit --amend -m "new commit"</code></p>
<p>查看提交历史</p>
<p><code>git log</code></p>
<p><code>git log --pretty=short</code></p>
<p><code>git log --pretty=oneline</code></p>
<p>从工作区删除文件</p>
<p><code>git rm a.txt</code></p>
<p>移动、重命名文件</p>
<p><code>git mv a.txt b.txt</code></p>
<h2>Git远程仓库</h2>
<p>克隆远程仓库</p>
<p><code>git clone https://github.com/bitbitpulse/my-repo.git</code></p>
<p>查看远程仓库</p>
<p><code>git remote</code></p>
<p><code>git remote -v</code></p>
<p><code>git remote show origin</code></p>
<p>添加远程仓库</p>
<p><code>git remote add origin https://github.com/bitbitpulse/my-repo.git</code></p>
<p>重命名远程仓库名称</p>
<p><code>git remote rename origin xxx</code></p>
<p>移除远程仓库</p>
<p><code>git remote remove xxx</code></p>
<p>从远程仓库拉取数据，然后需要手动与本地分支进行合并</p>
<p><code>git fetch origin</code></p>
<p>如果本地分支设置了跟踪远程分支，直接使用 <code>git pull</code> ，将自动拉取并合并</p>
<p>推送本地提交到远程仓库</p>
<p><code>git push origin main</code></p>
<h2>Git分支</h2>
<h3>分支基础操作</h3>
<p>查看分支</p>
<p><code>git branch</code></p>
<p><code>git branch -v</code></p>
<p><code>git branch --merged</code></p>
<p><code>git branch --no-merged</code></p>
<p>新建分支，并切换到新分支iss01上</p>
<p><code>git branch iss01</code></p>
<p><code>git checkout iss01</code></p>
<p>或者</p>
<p><code>git checkout -b iss01</code></p>
<p>在iss01新分支上进行修改、提交操作后，要将其合并到main分支中</p>
<p><code>git checkout main</code></p>
<p><code>git merge iss01</code></p>
<p>iss01分支任务完成，并已经成功合并到主分支了，可以将其删除</p>
<p><code>git branch -d iss01</code></p>
<p>处理合并冲突</p>
<p><code>git status</code></p>
<p><code>git add xxx</code></p>
<p><code>git commit -m "all conflicts fixed"</code></p>
<h3>远程分支</h3>
<p>查看远程仓库以及分支信息</p>
<p><code>git remote show origin</code></p>
<p>从远程仓库拉取数据</p>
<p><code>git fetch origin</code></p>
<p>合并远程分支数据到当前分支</p>
<p><code>git merge origin/main</code></p>
<p>从远程分支创建一个新的本地分支</p>
<p><code>git checkout -b serverfix origin/serverfix</code></p>
<p>推送当前分支数据到远程仓库指定分支</p>
<p><code>git push origin main</code></p>
<p>强制推送，覆盖远程仓库内容</p>
<p><code>git push -f origin main</code></p>
<h2>Git标签</h2>
<p>列出标签</p>
<p><code>git tag</code></p>
<p><code>git tag --list "v1.8"</code></p>
<p>创建轻量标签</p>
<p><code>git tag v1.0.0</code></p>
<p>创建附注标签</p>
<p><code>git tag -a v1.0 -m "version 1.0"</code></p>
<p>给历史提交记录创建标签</p>
<p><code>git log --pretty=oneline</code></p>
<p><code>git tag v0.0.1 129a25</code></p>
<p>查看标签信息</p>
<p><code>git show v1.0</code></p>
<p>删除本地标签</p>
<p><code>git tag -d v1.0.0</code></p>
<p>推送标签到远程仓库</p>
<p><code>git push origin v1.0.0</code></p>
<p><code>git push origin --tags</code></p>
<p>删除远程仓库中的标签</p>
<p><code>git push origin --delete v1.0.0</code></p>
<h2>Git别名</h2>
<p>设置别名</p>
<p><code>git config --global alias.lline "log --pretty=oneline"</code></p>
<p>使用别名</p>
<p><code>git lline</code></p>
]]></content:encoded>
    </item>
    <item>
      <title>Gradle入门</title>
      <link>https://bitbitpulse.github.io/posts/devtools/gradle%E5%85%A5%E9%97%A8.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/gradle%E5%85%A5%E9%97%A8.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Gradle入门</source>
      <description>Gradle入门 安装 下载 https://gradle.org/releases/ 安装 解压压缩包到安装路径 添加bin目录到PATH环境变量 添加环境变量 GRADLE_USER_HOME，值为gradle本地仓库目录（默认 ~/.gradle） 验证，运行命令 gradle --version </description>
      <content:encoded><![CDATA[
<h2>安装</h2>
<h3>下载</h3>
<p>https://gradle.org/releases/</p>
<h3>安装</h3>
<ol>
<li>解压压缩包到安装路径</li>
<li>添加bin目录到PATH环境变量</li>
<li>添加环境变量 <em>GRADLE_USER_HOME</em>，值为gradle本地仓库目录（默认 <em>~/.gradle</em>）</li>
<li>验证，运行命令 <code>gradle --version</code></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>开发工具</title>
      <link>https://bitbitpulse.github.io/posts/devtools/</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">开发工具</source>
      <description>开发工具</description>
    </item>
    <item>
      <title>Intelij IDEA</title>
      <link>https://bitbitpulse.github.io/posts/devtools/Intelij%20IDEA.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/Intelij%20IDEA.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Intelij IDEA</source>
      <description>Intelij IDEA </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Maven入门</title>
      <link>https://bitbitpulse.github.io/posts/devtools/maven%E5%85%A5%E9%97%A8.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/maven%E5%85%A5%E9%97%A8.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Maven入门</source>
      <description>Maven入门 参考： maven官网：https://maven.apache.org/ Maven Repository：https://mvnrepository.com/ 安装 1.下载 https://maven.apache.org/download.cgi 2.安装 解压压缩包 ​ Windows: unzip apache-maven-...</description>
      <content:encoded><![CDATA[
<p>参考：</p>
<ul>
<li>
<p>maven官网：https://maven.apache.org/</p>
</li>
<li>
<p>Maven Repository：https://mvnrepository.com/</p>
</li>
</ul>
<h2>安装</h2>
<h3>1.下载</h3>
<p>https://maven.apache.org/download.cgi</p>
<h3>2.安装</h3>
<ul>
<li>解压压缩包</li>
</ul>
<p>​	Windows: <code>unzip apache-maven-3.8.2-bin.zip</code></p>
<p>​	Linux: <code>tar xzvf apache-maven-3.8.2-bin.tar.gz</code></p>
<ul>
<li>
<p>添加bin目录到PATH环境变量</p>
</li>
<li>
<p>确认安装，执行命令 <code>mvn --version</code></p>
</li>
</ul>
<h2>设置</h2>
<h3>settings.xml</h3>
<p><em>conf/settings.xml</em>是maven全局设置文件，最佳实践是将其复制settings.xml到*~/.m2/*目录，作为用户级别的设置文件。</p>
<p>Windows: <code>copy conf/settings.xml %USERPROFILE%\.m2\</code></p>
<p>Linux: <code>cp conf/settings.xml ~/.m2/</code></p>
<h3>修改本地仓库目录</h3>
<p>本地仓库默认位于*~/.m2/repository/*，可以修改为其它位置</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Default: ${user.home}/.m2/repository --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>D:\\AppData\\.m2\\repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>设置仓库镜像</h3>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>external:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>huaweicloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>external:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>华为云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://repo.huaweicloud.com/repository/maven/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>maven-default-http-blocker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>external:http:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Pseudo repository to mirror external repositories initially using HTTP.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://0.0.0.0/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blocked</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blocked</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>设置代理</h3>
<h2>依赖管理</h2>
<p>查看依赖树</p>
<p><code>mvn dependency:tree</code></p>
<h3>groupId, artifactId, version</h3>
<p>坐标</p>
<h3>type</h3>
<p>依赖的类型：</p>
<ul>
<li>jar：默认类型</li>
<li>pom</li>
</ul>
<h3>scope</h3>
<p>依赖作用范围：</p>
<ul>
<li>
<p>compile：默认范围，对编译、测试、运行都有效</p>
</li>
<li>
<p>test：对测试有效</p>
</li>
<li>
<p>provided：对编译和测试有效</p>
</li>
<li>
<p>runtime：对测试和运行有效</p>
</li>
<li>
<p>system：与provide范围一样，只对编译和测试有效。需要用systemPath元素指定依赖文件路径</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>path/to/x.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li>
<li>
<p>import</p>
</li>
</ul>
<h3>optional</h3>
<p>依赖是否可选</p>
<h3>exclusions</h3>
<p>排除依赖</p>
<h3>依赖继承</h3>
<h2>仓库</h2>
<h3>本地仓库</h3>
<h3>远程仓库</h3>
<h2>Nexus搭建Maven私服</h2>
<h2>插件</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Navicat</title>
      <link>https://bitbitpulse.github.io/posts/devtools/navicat.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/navicat.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Navicat</source>
      <description>Navicat </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Postman</title>
      <link>https://bitbitpulse.github.io/posts/devtools/postman.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/postman.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Postman</source>
      <description>Postman </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>SVN入门</title>
      <link>https://bitbitpulse.github.io/posts/devtools/svn%E5%85%A5%E9%97%A8.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/svn%E5%85%A5%E9%97%A8.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SVN入门</source>
      <description>SVN入门 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>UML</title>
      <link>https://bitbitpulse.github.io/posts/devtools/uml.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/uml.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">UML</source>
      <description>UML </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>VirtualBox</title>
      <link>https://bitbitpulse.github.io/posts/devtools/VirtualBox.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/VirtualBox.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">VirtualBox</source>
      <description>VirtualBox TIP 官网：https://www.virtualbox.org/ </description>
      <content:encoded><![CDATA[
<div class="custom-container tip"><p class="custom-container-title">TIP</p>
<p>官网：https://www.virtualbox.org/</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>VMWare</title>
      <link>https://bitbitpulse.github.io/posts/devtools/vmware.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/vmware.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">VMWare</source>
      <description>VMWare VMWare Workstation虚拟机配置固定IP 1.网络配置模式 网络适配器中选择&amp;quot;NAT&amp;quot;模式。 </description>
      <content:encoded><![CDATA[
<h2>VMWare Workstation虚拟机配置固定IP</h2>
<p><strong>1.网络配置模式</strong></p>
<p>网络适配器中选择"NAT"模式。</p>
]]></content:encoded>
    </item>
    <item>
      <title>VSCode</title>
      <link>https://bitbitpulse.github.io/posts/devtools/vscode.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/vscode.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">VSCode</source>
      <description>VSCode </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>WinSCP</title>
      <link>https://bitbitpulse.github.io/posts/devtools/WinSCP.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/WinSCP.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">WinSCP</source>
      <description>WinSCP </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Wireshark</title>
      <link>https://bitbitpulse.github.io/posts/devtools/wireshark.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/wireshark.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Wireshark</source>
      <description>Wireshark </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>XShell</title>
      <link>https://bitbitpulse.github.io/posts/devtools/XShell.html</link>
      <guid>https://bitbitpulse.github.io/posts/devtools/XShell.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">XShell</source>
      <description>XShell </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>好玩</title>
      <link>https://bitbitpulse.github.io/posts/funs/</link>
      <guid>https://bitbitpulse.github.io/posts/funs/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">好玩</source>
      <description>好玩</description>
    </item>
    <item>
      <title>VPN搭建</title>
      <link>https://bitbitpulse.github.io/posts/funs/VPN%E6%90%AD%E5%BB%BA.html</link>
      <guid>https://bitbitpulse.github.io/posts/funs/VPN%E6%90%AD%E5%BB%BA.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">VPN搭建</source>
      <description>VPN搭建 准备工作： 购买海外云服务器 SSH远程客户端工具 参考： https://vkuajing.net/vultr-vpn/ 关键步骤： 安装shadowsocks-docker镜像 bbr加速 下载shadowsocks软件 https://github.com/shadowsocks 配置： 服务器ip，端口，密码，加密方式，以及本地代理...</description>
      <content:encoded><![CDATA[
<p><strong>准备工作：</strong></p>
<ul>
<li>购买海外云服务器</li>
<li>SSH远程客户端工具</li>
</ul>
<p>参考：</p>
<ul>
<li>https://vkuajing.net/vultr-vpn/</li>
</ul>
<p><strong>关键步骤：</strong></p>
<p>安装shadowsocks-docker镜像</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull imhang/shadowsocks-docker

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-e</span> <span class="token string">"SS_PORT=10086"</span> <span class="token parameter variable">-e</span> <span class="token string">"SS_PASSWORD=密码"</span> <span class="token parameter variable">-e</span> <span class="token string">"SS_METHOD=aes-256-gcm"</span> <span class="token parameter variable">-e</span> <span class="token string">"SS_TIMEOUT=600"</span> <span class="token parameter variable">-p</span> <span class="token number">10086</span>:10086 <span class="token parameter variable">-p</span> <span class="token number">10086</span>:10086/udp <span class="token parameter variable">--name</span> ssserver imhang/shadowsocks-docker
</code></pre></div><p>bbr加速</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x bbr.sh <span class="token operator">&amp;&amp;</span> ./bbr.sh
</code></pre></div><p>下载shadowsocks软件</p>
<p>https://github.com/shadowsocks</p>
<p><strong>配置：</strong></p>
<p>服务器ip，端口，密码，加密方式，以及本地代理端口。</p>
<p><strong>问题：</strong></p>
<p><em>1.启用系统代理PAC模式后，可以访问外网，但是不能访问内网</em></p>
<p>是因为之前使用的clash，代理默认监听7890端口，与shandowsocks监听的端口不一致。</p>
<p>打开设置 --&gt; 网络和Internet --&gt; 代理，修改手动设置代理，将监听的端口改为shandowsocks监听的端口。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Minecraft</title>
      <link>https://bitbitpulse.github.io/posts/minecraft/</link>
      <guid>https://bitbitpulse.github.io/posts/minecraft/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Minecraft</source>
      <description>我的世界Mod开发</description>
    </item>
    <item>
      <title>Minecraft开发环境搭建</title>
      <link>https://bitbitpulse.github.io/posts/minecraft/minecraft%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link>
      <guid>https://bitbitpulse.github.io/posts/minecraft/minecraft%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Minecraft开发环境搭建</source>
      <description>Minecraft开发环境搭建 版本信息： Java 17(64位JVM) Gradle 8.6 IDEA 2021.2.1 MDK 1.20.2-48.1.0 配置Java 下载 https://www.oracle.com/java/technologies/downloads/ 安装 解压zip文件到安装目录 配置环境变量 新建 JAVA_HOM...</description>
      <content:encoded><![CDATA[
<p>版本信息：</p>
<ul>
<li>Java 17(64位JVM)</li>
<li>Gradle 8.6</li>
<li>IDEA 2021.2.1</li>
<li>MDK 1.20.2-48.1.0</li>
</ul>
<h2>配置Java</h2>
<p><strong>下载</strong></p>
<p>https://www.oracle.com/java/technologies/downloads/</p>
<p><strong>安装</strong></p>
<p>解压zip文件到安装目录</p>
<p><strong>配置环境变量</strong></p>
<ul>
<li>新建 <em>JAVA_HOME</em> 变量，值为jdk目录</li>
<li>修改PATH环境变量，添加 <em>$JAVA_HOME/bin</em></li>
</ul>
<p><strong>验证</strong></p>
<p><code>java --version</code></p>
<h2>配置Gradle</h2>
<p><strong>下载</strong></p>
<p>https://gradle.org/releases/</p>
<p><strong>安装</strong></p>
<p>解压zip文件到安装目录</p>
<p><strong>配置环境变量</strong></p>
<ul>
<li>新建 <em>GRADLE_HOME</em> 变量，值为gradle目录</li>
<li>修改PATH环境变量，添加 <em>$GRADLE_HOME/bin</em></li>
<li>新建 <em>GRADLE_USER_PATH</em> 环境变量，值为gradle本地仓库目录（默认 <em>~/.gradle</em>）</li>
</ul>
<p><strong>验证</strong></p>
<p><code>gradle --version</code></p>
<h2>配置IDE</h2>
<p><strong>下载IntelliJ IDEA</strong></p>
<p>https://www.jetbrains.com/idea/download/</p>
<p><strong>安装</strong></p>
<p>运行安装文件</p>
<p><strong>配置</strong></p>
<ul>
<li>配置编码所有为UTF-8</li>
<li>配置JDK目录</li>
<li>配置Gradle目录</li>
</ul>
<h2>配置MinecraftForge MDK</h2>
<p><strong>下载</strong></p>
<p>https://files.minecraftforge.net/net/minecraftforge/forge/</p>
<p>MDK zip文件解压后是一个gradle构建的示例Mod项目，开发自己的Mod要基于这个项目。</p>
<h2>运行示例Mod项目</h2>
<ol>
<li>解压MDK zip文件，重命名为项目名称</li>
<li>使用IDEA打开项目，设置IDEA中JDK、Gradle为本地的版本</li>
<li>运行 <code>gradlew genIntellijRuns</code></li>
<li>运行 <code>gradlew build</code>，等待Gradle下载完依赖(时间会很漫长...)</li>
<li>运行 <code>gradlew runServer</code>，启动服务器</li>
<li>运行 <code>gradlew runClient，启动客户端</code></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>中间件技术</title>
      <link>https://bitbitpulse.github.io/posts/middleware/</link>
      <guid>https://bitbitpulse.github.io/posts/middleware/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">中间件技术</source>
      <description>ElasticSearch, Kafka, RabbitMQ, Zookeeper, MinIO ...</description>
    </item>
    <item>
      <title>其它</title>
      <link>https://bitbitpulse.github.io/posts/others/</link>
      <guid>https://bitbitpulse.github.io/posts/others/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">其它</source>
      <description>Anything else ...</description>
    </item>
    <item>
      <title>Python</title>
      <link>https://bitbitpulse.github.io/posts/python/</link>
      <guid>https://bitbitpulse.github.io/posts/python/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Python</source>
      <description>Phthon</description>
    </item>
    <item>
      <title>服务器技术</title>
      <link>https://bitbitpulse.github.io/posts/server/</link>
      <guid>https://bitbitpulse.github.io/posts/server/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">服务器技术</source>
      <description>Nginx</description>
    </item>
    <item>
      <title>第三方服务集成</title>
      <link>https://bitbitpulse.github.io/posts/third-party-service/</link>
      <guid>https://bitbitpulse.github.io/posts/third-party-service/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">第三方服务集成</source>
      <description>第三方服务集成</description>
    </item>
    <item>
      <title>Axure</title>
      <link>https://bitbitpulse.github.io/posts/tools/axure.html</link>
      <guid>https://bitbitpulse.github.io/posts/tools/axure.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Axure</source>
      <description>Axure </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>软件</title>
      <link>https://bitbitpulse.github.io/posts/tools/</link>
      <guid>https://bitbitpulse.github.io/posts/tools/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">软件</source>
      <description>软件</description>
    </item>
    <item>
      <title>MinIO Typora PicGo搭建个人图床服务</title>
      <link>https://bitbitpulse.github.io/posts/tools/MinIO%20Typora%20PicGo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1.html</link>
      <guid>https://bitbitpulse.github.io/posts/tools/MinIO%20Typora%20PicGo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MinIO Typora PicGo搭建个人图床服务</source>
      <description>MinIO Typora PicGo搭建个人图床服务 部署MinIO 使用Docker容器部署 docker run -d -p 9000:9000 -p 9001:9001 -v D:\dev\minio\data:/data --name minio -e &amp;quot;MINIO_ROOT_USER=admin&amp;quot; -e &amp;quot;MINIO_ROOT_PASSWOR...</description>
      <content:encoded><![CDATA[
<h2>部署MinIO</h2>
<p>使用Docker容器部署</p>
<p><code>docker run -d -p 9000:9000 -p 9001:9001 -v D:\dev\minio\data:/data --name minio -e "MINIO_ROOT_USER=admin" -e "MINIO_ROOT_PASSWORD=admin123" quay.io/minio/minio server /data --console-address ":9001"</code></p>
<p>访问MinIO控制台：http://127.0.0.1:9001/，创建一个存储桶test，自定义访问策略，给Annoymous用户只读权限</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">"Version"</span><span class="token operator">:</span> <span class="token string">"2012-10-17"</span><span class="token punctuation">,</span>
    <span class="token property">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>
            <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">"AWS"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token string">"*"</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">"s3:GetObject"</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">"arn:aws:s3:::test/*"</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>PicGo中安装minio插件</h2>
<p>picgo官网：https://picgo.github.io/PicGo-Doc/</p>
<ul>
<li>
<p>打开picgo</p>
</li>
<li>
<p>在插件设置中搜索minio，安装</p>
</li>
<li>
<p>在图床设置中，找到minio，配置，并将minio设置为默认图床</p>
</li>
</ul>
<p><img src="http://127.0.0.1:9000/test/images/20240117122747.png" alt=""></p>
<ul>
<li>测试一下，如果没问题，进行下一步</li>
</ul>
<h2>配置Typora图片上传服务</h2>
<p>在Typora插入本地图片时，自动使用PicGo上传图片到MinIO服务器；上传成功后，PicGo可以获取到图片URL；Typora会自动用URL替换本地图片路径。</p>
<p></p>
]]></content:encoded>
      <enclosure url="http://127.0.0.1:9000/test/images/20240117122747.png" type="image/png"/>
    </item>
    <item>
      <title>Typora</title>
      <link>https://bitbitpulse.github.io/posts/tools/typora.html</link>
      <guid>https://bitbitpulse.github.io/posts/tools/typora.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Typora</source>
      <description>Typora </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>建站</title>
      <link>https://bitbitpulse.github.io/posts/website/</link>
      <guid>https://bitbitpulse.github.io/posts/website/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">建站</source>
      <description>宝塔面板,VuePress,Hexo,Hugo,Wordpress</description>
    </item>
    <item>
      <title>数据结构与算法</title>
      <link>https://bitbitpulse.github.io/posts/coder/algorithm/</link>
      <guid>https://bitbitpulse.github.io/posts/coder/algorithm/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">数据结构与算法</source>
      <description>数据结构、算法</description>
    </item>
    <item>
      <title>软件架构模式</title>
      <link>https://bitbitpulse.github.io/posts/coder/architecture-patterns/</link>
      <guid>https://bitbitpulse.github.io/posts/coder/architecture-patterns/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">软件架构模式</source>
      <description>软件架构模式</description>
    </item>
    <item>
      <title>软件设计模式</title>
      <link>https://bitbitpulse.github.io/posts/coder/design-patterns/</link>
      <guid>https://bitbitpulse.github.io/posts/coder/design-patterns/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">软件设计模式</source>
      <description>GoF23种经典设计模式，以及其它常用的设计模式</description>
    </item>
    <item>
      <title>计算机操作系统</title>
      <link>https://bitbitpulse.github.io/posts/coder/os/</link>
      <guid>https://bitbitpulse.github.io/posts/coder/os/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">计算机操作系统</source>
      <description>计算机操作系统</description>
    </item>
    <item>
      <title>在线商城系统表设计</title>
      <link>https://bitbitpulse.github.io/posts/database/demos/%E5%9C%A8%E7%BA%BF%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F%E8%A1%A8%E8%AE%BE%E8%AE%A1.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/demos/%E5%9C%A8%E7%BA%BF%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F%E8%A1%A8%E8%AE%BE%E8%AE%A1.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">在线商城系统表设计</source>
      <description>在线商城系统表设计 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>权限管理系统设计</title>
      <link>https://bitbitpulse.github.io/posts/database/demos/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/demos/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">权限管理系统设计</source>
      <description>权限管理系统设计 ACL模型 ACL(Access Control List，访问控制列表模型)。 用户表 资源表 权限表 ACL表 RBAC：基于角色的访问控制模型 RBAC(Role-Based Access Control，基于角色的访问控制)模型中，用户与角色&amp;quot;多对多&amp;quot;关联，角色与权限&amp;quot;多对多&amp;quot;关联。 用户表 角色表 权限表 用户-角色关系表 ...</description>
      <content:encoded><![CDATA[
<h2>ACL模型</h2>
<p>ACL(Access Control List，访问控制列表模型)。</p>
<p>用户表</p>
<p>资源表</p>
<p>权限表</p>
<p>ACL表</p>
<p></p>
<h2>RBAC：基于角色的访问控制模型</h2>
<p>RBAC(Role-Based Access Control，基于角色的访问控制)模型中，用户与角色"多对多"关联，角色与权限"多对多"关联。</p>
<p>用户表</p>
<p>角色表</p>
<p>权限表</p>
<p>用户-角色关系表</p>
<p></p>
<p>角色-权限关系表</p>
<p></p>
<h2>RBAC：基于资源的访问控制模型</h2>
<p>RBAC(Resource-Based Access Control，基于资源的访问控制)模型，是在基于角色的访问控制模型的基础上，引入资源表和资源-权限关系表，可以实现对某个具体资源（例如：API端点）进行细粒度的权限控制。</p>
<p>资源表</p>
<p>资源-权限关系表</p>
<p></p>
]]></content:encoded>
    </item>
    <item>
      <title>计算机网络</title>
      <link>https://bitbitpulse.github.io/posts/coder/network/</link>
      <guid>https://bitbitpulse.github.io/posts/coder/network/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">计算机网络</source>
      <description>计算机网络</description>
    </item>
    <item>
      <title>浏览器跨域</title>
      <link>https://bitbitpulse.github.io/posts/coder/network/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F.html</link>
      <guid>https://bitbitpulse.github.io/posts/coder/network/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">浏览器跨域</source>
      <description>浏览器跨域 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>MongoDB</title>
      <link>https://bitbitpulse.github.io/posts/database/mongodb/</link>
      <guid>https://bitbitpulse.github.io/posts/database/mongodb/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MongoDB</source>
      <description>MongoDB</description>
    </item>
    <item>
      <title>MongoDB安装</title>
      <link>https://bitbitpulse.github.io/posts/database/mongodb/MongoDB%E5%AE%89%E8%A3%85.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/mongodb/MongoDB%E5%AE%89%E8%A3%85.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MongoDB安装</source>
      <description>MongoDB安装 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>MySQL事务</title>
      <link>https://bitbitpulse.github.io/posts/database/mysql/mysql%E4%BA%8B%E5%8A%A1.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/mysql/mysql%E4%BA%8B%E5%8A%A1.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MySQL事务</source>
      <description>MySQL事务 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>MySQL安装</title>
      <link>https://bitbitpulse.github.io/posts/database/mysql/mysql%E5%AE%89%E8%A3%85.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/mysql/mysql%E5%AE%89%E8%A3%85.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MySQL安装</source>
      <description>MySQL安装 使用Docker安装MySQL Docker Hub：https://hub.docker.com/_/mysql 1.下载镜像 docker pull mysql:8 2.创建容器 2.1 准备mysql配置文件 mkdir /docker/mysql8/conf/conf.d touch /docker/mysql8/conf/my...</description>
      <content:encoded><![CDATA[
<h2>使用Docker安装MySQL</h2>
<blockquote>
<p>Docker Hub：https://hub.docker.com/_/mysql</p>
</blockquote>
<p><strong>1.下载镜像</strong></p>
<p><code>docker pull mysql:8</code></p>
<p><strong>2.创建容器</strong></p>
<p>2.1 准备mysql配置文件</p>
<p><code>mkdir /docker/mysql8/conf/conf.d</code></p>
<p><code>touch /docker/mysql8/conf/my.cnf</code></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># mysql
</code></pre></div><p>2.2 创建容器</p>
<p><code>docker create --name mysql8 --restart=always -p 3306:3306 -v /docker/mysql8/conf:/etc/mysql -v /docker/mysql8/data:/var/lib/mysql -v /docker/mysql8/logs:/var/log/mysql -e MYSQL_ROOT_PASSWORD=root mysql:8</code></p>
<p>参数说明：</p>
<ul>
<li>
<p><code>--name mysql8</code>：容器名称</p>
</li>
<li>
<p><code>--restart=always</code>：异常退出后，自动重启</p>
</li>
<li>
<p><code>-p 3306:3306</code>：主机与容器端口映射</p>
</li>
<li>
<p><code>-v /docker/mysql8/conf:/etc/mysql</code>：挂载mysql配置目录</p>
</li>
<li>
<p><code>-v /docker/mysql8/data:/var/lib/mysql</code>：挂载mysql数据目录</p>
</li>
<li>
<p><code>-v /docker/mysql8/logs:/var/log/mysql</code>：挂载mysql日志目录</p>
</li>
<li>
<p><code>-e MYSQL_ROOT_PASSWORD=root</code>：root用户密码</p>
</li>
</ul>
<p><strong>3.启动容器</strong></p>
<p><code>docker start mysql8</code></p>
<p><strong>4.验证</strong></p>
<p>查看日志：<code>docker logs mysql8</code></p>
<p>进入容器：<code>docker exec -it mysql8 bash</code></p>
<p>登录MySQL：<code>mysql -u root -p</code></p>
<h2>Unix/Linux中使用二进制文件安装MySQL</h2>
<p>参考：https://dev.mysql.com/doc/refman/8.0/en/installing.html</p>
<h2>Windows中使用Installer包安装MySQL</h2>
<p>下载：https://dev.mysql.com/downloads/installer/</p>
<p><strong>1.选择安装方式</strong></p>
<p>选择自定义</p>

<p><strong>2.选择要安装的产品</strong></p>
<p>除了MySQL Server是必选的外，其它的都是可选</p>
<p></p>
<p><strong>3.安装</strong></p>
<p></p>
<p><strong>4.产品配置</strong></p>
<p></p>
<p><strong>4.1 选择服务器配置类型和网络</strong></p>
<p></p>
<p><strong>4.2 选择密码认证方式</strong></p>
<p></p>
<p><strong>4.3 设置用户和密码</strong></p>
<p></p>
<p><strong>4.4 设置MySQL作为Windows服务开机自启动</strong></p>
<p></p>
<p><strong>4.5 设置MySQL服务器文件权限</strong></p>
<p></p>
<p><strong>4.6 选择允许MySQL保存的日志</strong></p>
<p>错误日志、普通日志、慢查询日志、Binary日志</p>
<p></p>
<p><strong>4.7 应用配置</strong></p>
<p></p>
<p><strong>5.测试连接到MySQL服务器</strong></p>
<p>输入root用户密码，check一下</p>
<p></p>
<hr>
<p>应用配置</p>
<p></p>
<p><strong>6.安装完成</strong></p>
<p></p>
<p><strong>7.添加其它MySQL工具</strong></p>
<p>安装完成之后，如果想要安装其它工具，或者已安装工具的其它版本，只需要重新启动Installer，选择要添加的工具，进行安装即可</p>
<p></p>
<p><strong>设置PATH环境变量</strong></p>
<p>将MySQL Server安装目录下的bin添加到PATH环境变量，默认安装位置在 C:\Program Files\MySQL\MySQL Server 8.0</p>
<p>在CMD中连接MySQL服务器</p>
<p></p>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL索引</title>
      <link>https://bitbitpulse.github.io/posts/database/mysql/mysql%E7%B4%A2%E5%BC%95.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/mysql/mysql%E7%B4%A2%E5%BC%95.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MySQL索引</source>
      <description>MySQL索引 索引DDL语句 创建索引 删除索引 </description>
      <content:encoded><![CDATA[
<h2>索引DDL语句</h2>
<h3>创建索引</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建唯一索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> uk_employee_id <span class="token keyword">ON</span> t_salary<span class="token punctuation">(</span>employee_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建单列索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_employee_id <span class="token keyword">ON</span> t_salary<span class="token punctuation">(</span>employee_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建复合索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_username <span class="token keyword">ON</span> t_salary<span class="token punctuation">(</span>firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建索引，并指定索引算法</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_employee_id <span class="token keyword">ON</span> t_salary<span class="token punctuation">(</span>employee_id<span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">;</span>
</code></pre></div><h3>删除索引</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_username <span class="token keyword">ON</span> t_salary<span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>MySQL集群</title>
      <link>https://bitbitpulse.github.io/posts/database/mysql/mysql%E9%9B%86%E7%BE%A4.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/mysql/mysql%E9%9B%86%E7%BE%A4.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MySQL集群</source>
      <description>MySQL集群 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>PostgreSQL函数</title>
      <link>https://bitbitpulse.github.io/posts/database/postgresql/postgresql%E5%87%BD%E6%95%B0.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/postgresql/postgresql%E5%87%BD%E6%95%B0.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">PostgreSQL函数</source>
      <description>PostgreSQL函数 算术函数 字符串函数 日期函数 转换函数 </description>
      <content:encoded><![CDATA[
<h2>算术函数</h2>
<h2>字符串函数</h2>
<h2>日期函数</h2>
<h2>转换函数</h2>
]]></content:encoded>
    </item>
    <item>
      <title>PostgreSQL安装</title>
      <link>https://bitbitpulse.github.io/posts/database/postgresql/postgresql%E5%AE%89%E8%A3%85.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/postgresql/postgresql%E5%AE%89%E8%A3%85.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">PostgreSQL安装</source>
      <description>PostgreSQL安装 TIP 下载地址：https://www.postgresql.org/download/ 版本：postgresql-16.1 Docker 1.拉取镜像 docker pull postgres:16 2.获取默认配置文件 docker run -i --rm postgres:16 cat /usr/share/post...</description>
      <content:encoded><![CDATA[
<div class="custom-container tip"><p class="custom-container-title">TIP</p>
<p>下载地址：https://www.postgresql.org/download/</p>
<p>版本：postgresql-16.1</p>
</div>
<h2>Docker</h2>
<p>1.拉取镜像</p>
<p><code>docker pull postgres:16</code></p>
<p>2.获取默认配置文件</p>
<p><code>docker run -i --rm postgres:16 cat /usr/share/postgresql/postgresql.conf.sample &gt; my-postgres.conf</code></p>
<p><code>mv my-postgres.conf /docker/postgres16/conf/postgres.conf</code></p>
<p>3.创建容器</p>
<p><code>docker create --name postgres16 -p 5432:5432 -v /docker/postgres16/data:/var/lib/postgresql/data -v /docker/postgres16/conf/postgres.conf:/etc/postgresql/postgresql.conf -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres postgres:16 -c 'config_file=/etc/postgresql/postgresql.conf'</code></p>
<p>4.启动容器</p>
<p><code>docker start postgres16</code></p>
<p>4.验证</p>
<p><code>docker exec -it postgres16 psql -U postgres -W</code></p>
<p></p>
<h2>Linux</h2>
<h2>Windows</h2>
<p>下载exe安装程序进行安装即可。</p>
<p>Navicat连接PG数据库报错：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>错误：字段"datlastsysoid"不存在
</code></pre></div><p>解决：升级Navicat版本到15.0.29+，需要重新激活许可证。</p>
<h2>MacOS</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Redis客户端</title>
      <link>https://bitbitpulse.github.io/posts/database/redis/Redis%E5%AE%A2%E6%88%B7%E7%AB%AF.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/redis/Redis%E5%AE%A2%E6%88%B7%E7%AB%AF.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Redis客户端</source>
      <description>Redis客户端 Jedis 添加依赖 基本使用 使用连接池 定义工具类 从连接池中获取Jedis实例 使用Pipeline </description>
      <content:encoded><![CDATA[
<h2>Jedis</h2>
<p>添加依赖</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>基本使用</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> x <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
    ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>使用连接池</h3>
<p>定义工具类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtils</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USER</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">JedisPool</span> <span class="token constant">JEDIS_POOL</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">GenericObjectPoolConfig</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Jedis</span><span class="token punctuation">&gt;</span></span> poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">JEDIS_POOL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>poolConfig<span class="token punctuation">,</span> <span class="token constant">HOST</span><span class="token punctuation">,</span> <span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token constant">USER</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">JEDIS_POOL</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>从连接池中获取Jedis实例</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> x <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
    ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>使用Pipeline</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Pipeline</span> pipeline <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">pipelined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipeline<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipeline<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipeline<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// pipeline.sync();</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">syncAndReturnAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
    ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Redis应用场景</title>
      <link>https://bitbitpulse.github.io/posts/database/redis/Redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/redis/Redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Redis应用场景</source>
      <description>Redis应用场景 参考： 数据类型：https://redis.io/docs/data-types/ 命令大全：https://redis.io/commands/ 缓存 将Java对象序列化为字符串，保存到Redis中，并设置缓存有效时间。 计数器 使用string的incr命令，或者hash的hincrby命令实现计数器 HTTP Sessio...</description>
      <content:encoded><![CDATA[
<p>参考：</p>
<ul>
<li>数据类型：https://redis.io/docs/data-types/</li>
<li>命令大全：https://redis.io/commands/</li>
</ul>
<h2>缓存</h2>
<p>将Java对象序列化为字符串，保存到Redis中，并设置缓存有效时间。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取用户信息:
 * 1.优先从Redis缓存中获取
 * 2.如果Redis中存在,直接返回; 如果不存在,再从数据库中查询,缓存到Redis并返回
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">UserInfo</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"u:info:"</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">UserInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token function">selectUserInfo</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            value <span class="token operator">=</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            client<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">60L</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存有效期30min</span>
            <span class="token keyword">return</span> userInfo<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 模拟查询数据库
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">UserInfo</span> <span class="token function">selectUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userInfo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userInfo<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userInfo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> userInfo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>计数器</h2>
<p>使用string的<code>incr</code>命令，或者hash的<code>hincrby</code>命令实现计数器</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 文章访问量计数器
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">incrPostVisitCount</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> postId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"post:visits"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>postId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 查询文章访问量
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getPostVisitCount</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> postId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"post:visits"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>postId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>HTTP Session共享</h2>
<p>分布式系统中，将Session信息统一存储到Redis中，从而实现Session共享。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 缓存Session
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveSession</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"u:session"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 查询Session
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"u:session"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>限制频率</h2>
<p>发送短信验证码接口中，限制每分钟最多只能向同一个手机号发送1条短信</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 发送验证码,限制每分钟只能发送一次
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendSMSVerification</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"sms:code:"</span> <span class="token operator">+</span> phone<span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SetParams</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        params<span class="token punctuation">.</span><span class="token function">nx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 不存在</span>
              <span class="token punctuation">.</span><span class="token function">ex</span><span class="token punctuation">(</span><span class="token number">60L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 过期时间60s</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> code<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送验证码: "</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最近60s已经发送过1次验证码, 不允许发送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 从Redis中查询验证码
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSMSVerification</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"sms:code:"</span> <span class="token operator">+</span> phone<span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>实现栈和队列数据结构</h2>
<p>利用list可以实现栈和队列数据结构。</p>
<p>栈：<code>lpush</code> +<code>lpop</code>  或 <code>rpush</code>+<code>rpop</code></p>
<p>队列：<code>lpush</code>+<code>rpop</code> 或 <code>rpush</code>+<code>lpop</code></p>
<p>阻塞队列：<code>lpush</code>+<code>brpop</code> 或 <code>rpush</code>+<code>blpop</code></p>
<p>以及用<code>exists</code>判断是否存在，<code>llen</code>查询集合大小。</p>
<h2>排行榜</h2>
<p>使用zset实现排行榜系统：最新文章排行榜、得分排行榜</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 发布文章:
 * 1.保存文章信息
 * 2.添加文章到时间排行榜zset中
 * 3.添加文章到得分排行榜zset中
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addPost</span><span class="token punctuation">(</span><span class="token class-name">Post</span> post<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> postInfoKey <span class="token operator">=</span> <span class="token string">"post:"</span> <span class="token operator">+</span> post<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 保存文章信息的hash</span>
    <span class="token class-name">String</span> postRankingByTimeKey <span class="token operator">=</span> <span class="token string">"post:rank:time"</span><span class="token punctuation">;</span>   <span class="token comment">// 文章排行榜zset: 按照发布时间排序</span>
    <span class="token class-name">String</span> postRankingByScoreKey <span class="token operator">=</span> <span class="token string">"post:rank:score"</span><span class="token punctuation">;</span> <span class="token comment">// 文章排行榜zset: 按照得分排序</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">hmset</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">,</span> <span class="token function">translatePost2Map</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        client<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span>postRankingByTimeKey<span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 分值为时间戳</span>
        client<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span>postRankingByScoreKey<span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分值为时间戳</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 投票:
 * 1.更新得分排行榜zset中相应的元素, 每得1票, 分值增加100
 * 2.更新文章信息hash, 票数加1
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">votePost</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> postId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> postInfoKey <span class="token operator">=</span> <span class="token string">"post:"</span> <span class="token operator">+</span> postId<span class="token punctuation">;</span>
    <span class="token class-name">String</span> postRankingByScoreKey <span class="token operator">=</span> <span class="token string">"post:rank:score"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">zincrby</span><span class="token punctuation">(</span>postRankingByScoreKey<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        client<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">,</span> <span class="token string">"votes"</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 查询最新文章Top10:
 * 1.从文章发布时间排行榜zset中获取最新的10篇文章ID
 * 2.从hash查询每篇文章的详细信息
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span> <span class="token function">latestPostRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span> posts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> postRankingByTimeKey <span class="token operator">=</span> <span class="token string">"post:rank:time"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> postInfoKeys <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span>postRankingByTimeKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> postInfoKey <span class="token operator">:</span> postInfoKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> postId <span class="token operator">=</span> postInfoKey<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> postId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            posts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">translateMap2Post</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> posts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 查询得分最高的文章Top10:
 * 1.从文章得分排行榜zset中获取得分最高的10篇文章ID
 * 2.从hash查询每篇文章的详细信息
 * */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span> <span class="token function">hotPostRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span> posts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> postRankingByScoreKey <span class="token operator">=</span> <span class="token string">"post:rank:score"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> client <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> postInfoKeys <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span>postRankingByScoreKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> postInfoKey <span class="token operator">:</span> postInfoKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> postId <span class="token operator">=</span> postInfoKey<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>postInfoKey<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> postId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            posts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">translateMap2Post</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> posts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">translatePost2Map</span><span class="token punctuation">(</span><span class="token class-name">Post</span> post<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"votes"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Post</span> <span class="token function">translateMap2Post</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Post</span> post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setLink</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setVotes</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"votes"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    post<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> post<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Redis数据结构</title>
      <link>https://bitbitpulse.github.io/posts/database/redis/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/redis/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Redis数据结构</source>
      <description>Redis数据结构 参考：https://redis.io/docs/data-types/ string list set hash zset Bitmaps Bitmaps是一种特殊的字符串，只能存储二进制的0和1。可以将其理解为存储0和1的数组。 以用户访问记录为例： 设置值 获取值 获取值为1的位个数 获取特定位的偏移量 按位操作 HyperL...</description>
      <content:encoded><![CDATA[
<p>参考：https://redis.io/docs/data-types/</p>
<h2>string</h2>
<h2>list</h2>
<h2>set</h2>
<h2>hash</h2>
<h2>zset</h2>
<h2>Bitmaps</h2>
<p>Bitmaps是一种特殊的字符串，只能存储二进制的0和1。可以将其理解为存储0和1的数组。</p>
<p>以用户访问记录为例：</p>
<p>设置值</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># setbit key offset value</span>
setbit user:visit:2023-01-01 <span class="token number">0</span> <span class="token number">1</span>
setbit user:visit:2023-01-01 <span class="token number">2</span> <span class="token number">1</span>
setbit user:visit:2023-01-01 <span class="token number">4</span> <span class="token number">1</span>
setbit user:visit:2023-01-01 <span class="token number">6</span> <span class="token number">1</span>

setbit user:visit:2023-01-02 <span class="token number">0</span> <span class="token number">1</span>
setbit user:visit:2023-01-02 <span class="token number">1</span> <span class="token number">1</span>
setbit user:visit:2023-01-02 <span class="token number">3</span> <span class="token number">1</span>
</code></pre></div><p>获取值</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># getbit key offset</span>
getbit user:visit:2023-01-01 <span class="token number">0</span>
getbit user:visit:2023-01-01 <span class="token number">100</span>
</code></pre></div><p>获取值为1的位个数</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># bitcount key [start end [BYTE|BIT]]</span>
bitcount user:visit:2023-01-01
bitcount user:visit:2023-01-01 <span class="token number">10</span>
bitcount user:visit:2023-01-01 <span class="token number">10</span> <span class="token number">20</span>
</code></pre></div><p>获取特定位的偏移量</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># bitpos key bit [start [end [BYTE|BIT]]]</span>
bitpos user:visit:2023-01-01 <span class="token number">0</span>
bitpos user:visit:2023-01-01 <span class="token number">1</span>
 bitpos user:visit:2023-01-01 <span class="token number">1</span> <span class="token number">0</span> <span class="token number">100</span>
</code></pre></div><p>按位操作</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># bitop AND|OR|XOR|NOT destkey key [key ...]</span>
<span class="token comment"># AND</span>
bitop and user:visit:2023-01-01:2023-01-02 user:visit:2023-01-01 user:visit:2023-01-02
bitcount user:visit:2023-01-01:2023-01-02
</code></pre></div><h2>HyperLogLog</h2>
<p>HyperLogLog是一种特殊的字符串，使用基数算法，用于统计去除重复数据的独立总数。</p>
<p>添加元素</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># pfadd key [element [element ...]]</span>
pfadd visitors:2023-01-01 <span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">7</span>
pfadd visitors:2023-01-02 <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">7</span>
</code></pre></div><p>获取基数：获取多个key的基数时，会将多个key合并为1个临时的HyperLogLog，返回临时HyperLogLog的基数</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># pfcount key [key ...]</span>
pfcount visitors:2023-01-01
pfcount visitors:2023-01-02
pfcount visitors:2023-01-01 visitors:2023-01-02
</code></pre></div><p>合并HyperLogLog</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># pfmerge destkey [sourcekey [sourcekey ...]]</span>
pfmerge visitors:2023-01 visitors:2023-01-01 visitors:2023-01-02
pfcount visitors:2023-01
</code></pre></div><h2>地理空间</h2>
<p>添加成员</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># geoadd key [NX|XX] [CH] longitude latitude member [longitude latitude member ...]</span>
<span class="token comment"># 默认返回添加的元素数量，CH参数表示返回更改的元素数量</span>
</code></pre></div><p>获取指定成员的坐标</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># geopos key [member [member ...]]</span>
</code></pre></div><p>获取指定成员的坐标，以geo hash形式返回</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># geohash key [member [member ...]]</span>
</code></pre></div><p>获取2个成员之间的距离</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># geodist key member1 member2 [M|KM|FT|MI]</span>
<span class="token comment"># [M|KM|FT|MI]单位，默认M</span>
</code></pre></div><p>获取指定坐标在指定半径范围内的元素</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># georadius key longitude latitude radius M|KM|FT|MI [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC|DESC] [STORE key|STOREDIST key]</span>
<span class="token comment"># longitude: 经度 </span>
<span class="token comment"># latitude: 纬度</span>
<span class="token comment"># radius M|KM|FT|MI: 半径 单位</span>
</code></pre></div><p>获取指定成员在指定半径范围内的元素</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># georadiusbymember key member radius M|KM|FT|MI [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC|DESC] [STORE key|STOREDIST key]</span>
</code></pre></div><p>搜索指定范围内的成员：支持圆形范围和矩形范围</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># geosearch key FROMMEMBER member|FROMLONLAT longitude latitude BYRADIUS radius M|KM|FT|MI|BYBOX width height M|KM|FT|MI [ASC|DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST]</span>
<span class="token comment"># FROMMEMBER member|FROMLONLAT longitude latitude: 搜索中心,可以使用成员或坐标</span>
<span class="token comment"># BYRADIUS radius M|KM|FT|MI|BYBOX width height M|KM|FT|MI: 搜索范围,可以使用圆形或矩形</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Redis环境搭建</title>
      <link>https://bitbitpulse.github.io/posts/database/redis/Redis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/redis/Redis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Redis环境搭建</source>
      <description>Redis环境搭建 安装Redis Windows Redis官方没有提供Windows安装包，可以选择以下2种方式： microsoft提供的Redis的Windows版本 项目地址：https://github.com/microsoftarchive/redis/releases 使用WSL进行安装（推荐） Linux 安装依赖软件：sudo a...</description>
      <content:encoded><![CDATA[
<h2>安装Redis</h2>
<h3>Windows</h3>
<p>Redis官方没有提供Windows安装包，可以选择以下2种方式：</p>
<ol>
<li>
<p>microsoft提供的Redis的Windows版本</p>
<p>项目地址：https://github.com/microsoftarchive/redis/releases</p>
</li>
<li>
<p>使用WSL进行安装（推荐）</p>
</li>
</ol>
<h3>Linux</h3>
<p>安装依赖软件：<code>sudo apt install lsb-release curl gpg</code></p>
<p>执行以下命令</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://packages.redis.io/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/redis-archive-keyring.gpg

<span class="token builtin class-name">echo</span> <span class="token string">"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/redis.list

<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> redis
</code></pre></div><h3>Docker</h3>
<blockquote>
<p>docker hub地址：https://hub.docker.com/_/redis</p>
</blockquote>
<p>1.拉取镜像</p>
<p><code>docker pull redis:7.2.4</code></p>
<p>修改标签名</p>
<p><code>docker tag redis:7.2.4 redis:7 &amp;&amp; docker rmi redis:7.2.4</code></p>
<p>2.创建容器</p>
<p>2.1 准备redis配置文件</p>
<p><code>touch /docker/redis7/conf/redis.conf</code></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># redis配置参考 https://redis.io/docs/management/config/
# bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses
# bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6
# bind * -::*                     # like the default, all available interfaces

# protected-mode yes
# requirepass foobared

port 6379

# dir /data
</code></pre></div><p>2.2 创建容器</p>
<p><code>docker create --name redis7 -p 6379:6379 -v /docker/redis7/conf:/etc/redis -v /docker/redis7/data:/data redis:7 redis-server /etc/redis/redis.conf</code></p>
<p>参数说明：</p>
<ul>
<li><code>-p 6379:6379</code>：端口映射</li>
<li><code>-v /docker/redis7/conf:/etc/redis</code>：挂载redis配置目录</li>
<li><code>-v /docker/redis7/data:/data</code>：挂载redis数据目录</li>
</ul>
<p>3.启动容器</p>
<p><code>docker start redis7</code></p>
<p>4.进入容器</p>
<p><code>docker exec -it redis7 bash</code></p>
<p>在容器内测试本地连接</p>
<p><code>redis-cli</code></p>
<p>在Host机中连接</p>
<p><code>redis-cli -h 127.0.0.1 -p 6379</code></p>
<h2>安装RedisInsight</h2>
<p>https://redis.com/redis-enterprise/redis-insight/</p>
<h2>管理Redis服务</h2>
<p>查看Redis服务状态</p>
<p><code>sudo systemctl status redis-server</code></p>
<p>启动Redis服务</p>
<p><code>sudo systemctl start redis-server</code></p>
<p>停止Redis服务</p>
<p><code>sudo systemctl stop redis-server</code></p>
<h2>连接Redis</h2>
<p>使用redis-cli，或者使用RedisInsight图形界面工具</p>
<p><code>redis-cli</code></p>
<p><code>redis-cli -h &lt;hostname&gt; -p &lt;port&gt; -a &lt;password&gt;</code></p>
<h3>开启远程连接</h3>
<blockquote>
<p>确保Redis所在Host服务器可以被，且防火墙放开6379端口</p>
</blockquote>
<p>修改配置文件*/etc/redis.conf* ，有2种方式允许远程连接：</p>
<ol>
<li>
<p>关闭保护模式</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># bind 127.0.0.1 -::1
protected-mode no
</code></pre></div></li>
<li>
<p>开启保护模式，并设置密码</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># bind 127.0.0.1 -::1
protected-mode yes
requirepass foobared
</code></pre></div></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Redis高可用机制</title>
      <link>https://bitbitpulse.github.io/posts/database/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Redis高可用机制</source>
      <description>Redis高可用机制 数据迁移 move move命令在Redis内部，将1个key从当前数据库移动到另一个数据库。 示例： dump + restore dump命令将1个key的值序列化为RDB格式的序列，restore命令从RDB序列中恢复key的值。 组合2个命令可实现在不同Redis实例之间进行数据迁移。 示例： migrate migrat...</description>
      <content:encoded><![CDATA[
<h2>数据迁移</h2>
<h3><code>move</code></h3>
<p><code>move</code>命令在Redis内部，将1个key从当前数据库移动到另一个数据库。</p>
<p>示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 将hello键值对从当前数据库移动到数据库1</span>
move hello <span class="token number">1</span>
</code></pre></div><h3><code>dump</code> + <code>restore</code></h3>
<p><code>dump</code>命令将1个key的值序列化为RDB格式的序列，<code>restore</code>命令从RDB序列中恢复key的值。</p>
<p>组合2个命令可实现在不同Redis实例之间进行数据迁移。</p>
<p>示例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 在一个Redis中，序列换键hello的值</span>
dump hello

<span class="token comment"># 在另一个Redis中，从序列中恢复值。键过期时间为0，表示不设置过期时间</span>
restore hello <span class="token number">0</span> <span class="token string">"<span class="token entity" title="\x00">\x00</span><span class="token entity" title="\x05">\x05</span>world<span class="token entity" title="\x0b">\x0b</span><span class="token entity" title="\x00">\x00</span>p<span class="token entity" title="\x0e">\x0e</span><span class="token entity" title="\x81">\x81</span><span class="token entity" title="\xf7">\xf7</span>-6<span class="token entity" title="\x9b">\x9b</span>K"</span>
</code></pre></div><h3><code>migrate</code></h3>
<p><code>migrate</code>命令用于在不同Redis实例之间迁移数据。语法如下：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>migrate <span class="token function">host</span> port key<span class="token operator">|</span><span class="token string">""</span> destination-db <span class="token function">timeout</span> <span class="token punctuation">[</span>COPY<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPLACE<span class="token punctuation">]</span> <span class="token punctuation">[</span>AUTH password<span class="token operator">|</span>AUTH2 username password<span class="token punctuation">]</span> <span class="token punctuation">[</span>KEYS key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre></div><p>参数说明：</p>
<ul>
<li><code>host</code>：目标Redis实例IP</li>
<li><code>port</code>：目标Redis实例端口</li>
<li><code>key|""</code>：如果迁移1个键，则写键名；否则，写空字符串</li>
<li><code>destination-db</code>：目标Redis实例数据库</li>
<li><code>[COPY]</code>：可选，迁移后不删除源key</li>
<li><code>[REPLACE]</code>：可选，如果目标Redis实例中存在同名的key，直接替换</li>
<li><code>[AUTH password|AUTH2 username password]</code>：可选，目标Redis的用户名和密码</li>
<li><code>[KEYS key [key ...]]</code>：可选，迁移多个键时，指定键列表</li>
</ul>
<h2>数据持久化机制</h2>
<p>Redis 提供了两种主要的持久化方式，分别是 RDB（Redis DataBase）和 AOF（Append Only File）。这两种方式可以单独或同时使用。</p>
<h3>RDB: 保存快照</h3>
<p>RDB（Redis Database），是一种快照持久化方式，将内存中的数据保存到磁盘上的二进制文件中，Redis重启时用RDB文件恢复数据。</p>
<p>RDB文件保存Redis在某个时间点的数据，其优点是快速、文件紧凑，适合备份大规模数据；缺点是会丢失最后一次快照之后的所有数据。</p>
<p><strong>配置项</strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># save 3600 1      # 在3600秒（1小时）内，至少有1个key发生改变
# save 300 100     # 在300秒（5分钟）内， 至少有10个key发生改变
# save 60 10000    # 在60秒内，          至少有10000个key发生改变

dir ./
dbfilename dump.rdb
</code></pre></div><p>配置<code>save</code>配置项后，Redis将会在满足特定条件时自动触发RDB持久化。</p>
<p>可以通过命令<code>save</code>或<code>bgsave</code>手动触发RDB持久化。</p>
<p>另外，执行<code>shutdown</code>命令关闭Redis服务器时，也会自动执行<code>bgsave</code>命令</p>
<h3>AOF: 只追加文件</h3>
<p>AOF（Append Only File），是一种日志持久化方式，将每一个写命令追加到日志文件末尾，记录数据库的变更记录，Redis重启时重写执行AOF日志文件中的命令来恢复数据。</p>
<p>开启AOF后，Redis重启时，优先加载AOF持久化文件。</p>
<p>AOF持久化方式的优点是数据完整性高、适合增量更新；缺点是AOF文件较大、且恢复数据较慢。</p>
<p><strong>配置项</strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># 开启AOF
appendonly yes

appendfilename "appendonly.aof"

# appendfsync always
appendfsync everysec
# appendfsync no

# 自动触发AOF重写: aof文件至少为64mb，且达到上次重写时aof文件大小的100%
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
</code></pre></div><p>通过<code>appendfsync</code>配置项，可以设置写入磁盘AOF日志的策略：</p>
<ul>
<li><code>always</code>：每次写操作都会进行同步</li>
<li><code>everysec</code>：每秒1次，默认</li>
<li><code>no</code>：完全依赖操作系统来决定数据何时写入磁盘</li>
</ul>
<p>通过<strong>AOF重写</strong>，可以减小AOF文件的大小，通过以下2个配置项自动触发AOF重写：</p>
<ul>
<li><code>auto-aof-rewrite-percentage</code>：AOF文件达到上次重写后文件大小的百分比</li>
<li><code>auto-aof-rewrite-min-siz</code>：AOF文件至少多大时，才触发重写。默认64mb</li>
</ul>
<p>另外，可以通过命令<code>bgrewriteaof</code>，手动触发AOF重写。</p>
<h2>主从复制机制</h2>
<blockquote>
<p>参考：https://redis.io/docs/management/replication/</p>
</blockquote>
<p>Redis复制（Replication）是指将master服务器的数据同步到slave服务器的架构。主从复制步骤如下：</p>
<ol>
<li>从节点连接到主节点，主节点发送全量数据给从节点</li>
<li>从节点监听来自主节点的写操作，主节点将写操作发送给从节点，从节点执行同样的写出操作，从而实现数据的增量更新</li>
<li>从节点重新上线后，会重新向主节点请求全量数据</li>
</ol>
<p>Redis主从复制的优点包括：</p>
<ul>
<li>提高了系统的可用性和容错性</li>
<li>支持读写分离；</li>
</ul>
<p>Redis主从复制的缺点包括：</p>
<ul>
<li>主从复制是异步执行，存在延迟问题</li>
<li>存在主服务器的单点故障问题</li>
</ul>
<p>使用命令：<code>info replication</code> 查看主从服务信息。</p>
<h3>主从复制的拓扑结构</h3>
<h4>一主一从</h4>
<p>1个master实例、1个slave实例。当主节点故障时，可以将从节点升级为主节点。</p>
<p></p>
<h4>一主多从</h4>
<p>1个master实例、多个slave实例。主节点负责写、从节点负责读，可实现读写分离。</p>
<p></p>
<h4>树状</h4>
<p>slave实例也可以同时充当master实例的角色。从节点既可以复制主节点的数据，也可作为主节点，向下层从节点复制数据，降低主节点的写操作压力。</p>
<p></p>
<h3>快速开始</h3>
<h4>环境准备</h4>
<p>"一主多从"拓扑结构为例：采用1台master服务器+2台slave服务的架构，用docker创建Redis容器。</p>
<p><strong>创建3个Redis容器</strong></p>
<p>拉取镜像：<code>docker pull redis:7</code></p>
<p>master实例</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /docker/redis7/conf/
<span class="token function">touch</span> /docker/redis7/conf/redis.conf

<span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis7 <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-v</span> /docker/redis7/conf:/etc/redis <span class="token parameter variable">-v</span> /docker/redis7/data:/data redis:7 redis-server /etc/redis/redis.conf
</code></pre></div><p>slave实例a</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /docker/redis7a/conf/
<span class="token function">touch</span> /docker/redis7a/conf/redis.conf

<span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis7a <span class="token parameter variable">-p</span> <span class="token number">6377</span>:6379 <span class="token parameter variable">-v</span> /docker/redis7a/conf:/etc/redis <span class="token parameter variable">-v</span> /docker/redis7a/data:/data redis:7 redis-server /etc/redis/redis.conf
</code></pre></div><p>slave实例b</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /docker/redis7b/conf/
<span class="token function">touch</span> /docker/redis7b/conf/redis.conf

<span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis7b <span class="token parameter variable">-p</span> <span class="token number">6378</span>:6379 <span class="token parameter variable">-v</span> /docker/redis7b/conf:/etc/redis <span class="token parameter variable">-v</span> /docker/redis7b/data:/data redis:7 redis-server /etc/redis/redis.conf
</code></pre></div><p>每个Redis实例的基础配置文件如下：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># redis.conf

# bind 127.0.0.1 -::1
port 6379
# 开启保护模式
protected-mode yes
# 密码
requirepass foobared

# RDB持久化配置
# save 3600 1 300 100 60 10000
dbfilename dump.rdb
# dir ./
dir /data

# AOF持久化配置
appendonly no
appendfilename "appendonly.aof"
# appendfsync always
appendfsync everysec
# appendfsync no

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
</code></pre></div><h4>配置slave实例</h4>
<p>在2台slave实例的配置文件中，配置master实例的IP、端口、认证信息。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># replicaof &lt;masterip&gt; &lt;masterport&gt;
replicaof 172.17.0.2 6379

# masterauth &lt;master-password&gt;
masterauth foobared

# masteruser &lt;username&gt;

# 从节点只读
replica-read-only yes

# 是否禁用主节点无延迟发送TCP数据包
repl-disable-tcp-nodelay no
</code></pre></div><h4>启动Redis实例</h4>
<p>1.启动master实例</p>
<p><code>docker start redis7</code></p>
<p>2.启动2台slave实例</p>
<p><code>docker start redis7a redis7b</code></p>
<p>此时，查看master实例的日志，可以看到，2台slave实例成功连接到了master实例</p>
<p><code>docker logs redis7</code></p>
<p></p>
<h4>验证</h4>
<p>在master实例中，设置键值对"hello=world"</p>
<p></p>
<p>在2台slave实例中，查看键"hello"的值，成功获取到"world"</p>
<p></p>
<h3>使用命令指定主从关系</h3>
<p>使用<code>slaveof</code>命令，语法如下：</p>
<p><code>SLAVEOF &lt;host port | NO ONE&gt;</code></p>
<p>可以临时指定当前Redis实例作为slave</p>
<p><code>slaveof 172.17.0.2 6379</code></p>
<p>或者，取消主从关系（成为master）</p>
<p><code>slaveof no one</code></p>
<h2>哨兵模式</h2>
<blockquote>
<p>参考：https://redis.io/docs/management/sentinel/</p>
</blockquote>
<p>Redis哨兵（Redis Sentinel）可以监控主从架构中的Redis数据节点实例，当master实例故障时，自动选举1个slave实例，将其升级为新的master实例，实现自动故障发现与转移，确保系统的高可用与容错性。</p>
<p>Redis本身可以使用sentinel模式运行，支持以下2种启动方式：</p>
<ul>
<li><code>redis-sentinel /path/to/sentinel.conf</code></li>
<li><code>redis-server /path/to/sentinel.conf --sentinel</code></li>
</ul>
<p>Redis哨兵数量为奇数，且推荐哨兵数量不少于3个。</p>
<p>典型的"哨兵+主从复制"拓扑图如下：</p>
<p></p>
<h3>快速开始</h3>
<h4>环境准备</h4>
<p>使用3个Sentinel节点 + 1个master数据节点 + 2个slave数据节点的架构。</p>
<p>其中，数据节点使用主从复制时创建的docker容器。</p>
<p><strong>创建3个docker容器作为Redis哨兵</strong></p>
<blockquote>
<p>哨兵节点端口为26379</p>
</blockquote>
<p>哨兵实例x</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>mkdir -p /docker/redis7-sentinel-a/conf/
touch /docker/redis7-sentinel-a/conf/sentinel.conf

docker create --name redis7-sentinel-a -p 26370:26379 -v /docker/redis7-sentinel-a/conf:/etc/redis -v /docker/redis7-sentinel-a/data:/data redis:7 redis-sentinel /etc/redis/sentinel.conf
</code></pre></div><p>哨兵实例y</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>mkdir -p /docker/redis7-sentinel-b/conf/
touch /docker/redis7-sentinel-b/conf/sentinel.conf

docker create --name redis7-sentinel-b -p 26371:26379 -v /docker/redis7-sentinel-b/conf:/etc/redis -v /docker/redis7-sentinel-b/data:/data redis:7 redis-sentinel /etc/redis/sentinel.conf
</code></pre></div><p>哨兵实例z</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>mkdir -p /docker/redis7-sentinel-c/conf/
touch /docker/redis7-sentinel-c/conf/sentinel.conf

docker create --name redis7-sentinel-c -p 26372:26379 -v /docker/redis7-sentinel-c/conf:/etc/redis -v /docker/redis7-sentinel-c/data:/data redis:7 redis-sentinel /etc/redis/sentinel.conf
</code></pre></div><h4>配置哨兵实例</h4>
<p>在每一个哨兵节点的<em>sentinel.conf</em>配置文件中，配置哨兵监听的主节点IP、端口、<strong>判定主节点故障所需要的票数</strong>，以及主节点的认证信息等。</p>
<p>如果哨兵要同时监控多个主节点，只需要添加主节点名称不同的配置即可。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># bind 127.0.0.1
port 26379

protected-mode no

# 配置master实例
sentinel monitor mymaster 172.17.0.2 6379 2
# sentinel auth-user &lt;master-name&gt; &lt;username&gt;
sentinel auth-pass mymaster foobared

# 判定节点下线的超时时间，默认30s
sentinel down-after-milliseconds mymaster 30000
# 当选出新的主节点后，允许同时向主节点发起复制操作的从节点数量
sentinel parallel-syncs mymaster 1
sentinel failover-timeout mymaster 180000
</code></pre></div><h4>启动哨兵实例</h4>
<p>先启动Redis主从节点</p>
<p><code>docker start redis7a redis7b redis7c</code></p>
<p>再启动哨兵节点</p>
<p><code>docker start redis7-sentinel-a redis7-sentinel-b redis7-sentinel-c</code></p>
<h4>验证</h4>
<p>进入任意一个哨兵节点容器</p>
<p><code>docker exec -it redis7-sentinel-a redis-cli -p 26379</code></p>
<p>运行 <code>info sentinel</code>命令，查看哨兵信息</p>
<p>关闭主节点</p>
<p><code>docker stop redis7</code></p>
<p>查看主从节点信息</p>
<p><code>info replication</code></p>
<h2>集群</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Redis高级特性</title>
      <link>https://bitbitpulse.github.io/posts/database/redis/Redis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/redis/Redis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Redis高级特性</source>
      <description>Redis高级特性 Redis事务 Redis事务通过以下命令实现的： multi：开始事务 exec：提交事务，提交命令到队列中 discard：回滚事务，清空队列中的所有命令 watch：监控1个或多个键，在事务执行期间被修改过，则事务执行失败 unwatch：取消对所有键的监控 示例：正常提交事务 示例：放弃事务 示例：监控key Redis管道...</description>
      <content:encoded><![CDATA[
<h2>Redis事务</h2>
<p>Redis事务通过以下命令实现的：</p>
<ul>
<li><code>multi</code>：开始事务</li>
<li><code>exec</code>：提交事务，提交命令到队列中</li>
<li><code>discard</code>：回滚事务，清空队列中的所有命令</li>
<li><code>watch</code>：监控1个或多个键，在事务执行期间被修改过，则事务执行失败</li>
<li><code>unwatch</code>：取消对所有键的监控</li>
</ul>
<p>示例：正常提交事务</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incr num
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incr num
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> hello <span class="token string">"world"</span>
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">3</span><span class="token punctuation">)</span> OK
</code></pre></div><p>示例：放弃事务</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incr num
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incr num
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> discard
OK
</code></pre></div><p>示例：监控key</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> num
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incr num
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
</code></pre></div><h2>Redis管道</h2>
<h2>Redis发布订阅模式</h2>
]]></content:encoded>
    </item>
    <item>
      <title>sql增删改</title>
      <link>https://bitbitpulse.github.io/posts/database/sql/sql%E5%A2%9E%E5%88%A0%E6%94%B9.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/sql/sql%E5%A2%9E%E5%88%A0%E6%94%B9.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">sql增删改</source>
      <description>sql增删改 插入记录 全列插入 使用INSERT INTO语句插入记录。 示例：向图书表中插入1条记录 进行全列插入时，可以省略列清单 部分列插入 只插入部分列，列清单只列出部分列 插入NULL值 插入NULL值，在值清单中，使用NULL值 插入默认值 插入默认值，可以在值清单中使用DEFAULT关键字，也可以在列清单中不列出该列 INSERT......</description>
      <content:encoded><![CDATA[
<h2>插入记录</h2>
<h3>全列插入</h3>
<p>使用<code>INSERT INTO</code>语句插入记录。</p>
<p>示例：向图书表中插入1条记录</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book<span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> price<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> publish_date<span class="token punctuation">,</span> create_at<span class="token punctuation">,</span> update_at<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'9787020002207'</span><span class="token punctuation">,</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span> <span class="token string">'曹雪芹'</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token string">'人民文学出版社'</span><span class="token punctuation">,</span> <span class="token string">'1996-12-01'</span><span class="token punctuation">,</span> <span class="token string">'2023-03-09'</span><span class="token punctuation">,</span> <span class="token string">'2023-03-09'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>进行全列插入时，可以省略列清单</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'9787020002207'</span><span class="token punctuation">,</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span> <span class="token string">'曹雪芹'</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token string">'人民文学出版社'</span><span class="token punctuation">,</span> <span class="token string">'1996-12-01'</span><span class="token punctuation">,</span> <span class="token string">'2023-03-09'</span><span class="token punctuation">,</span> <span class="token string">'2023-03-09'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>部分列插入</h3>
<p>只插入部分列，列清单只列出部分列</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book<span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> price<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'9787530210291'</span><span class="token punctuation">,</span> <span class="token string">'1984'</span><span class="token punctuation">,</span> <span class="token string">'乔治·奥威尔'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
</code></pre></div><h3>插入NULL值</h3>
<p>插入NULL值，在值清单中，使用<code>NULL</code>值</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book<span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> price<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> publish_date<span class="token punctuation">,</span> create_at<span class="token punctuation">,</span> update_at<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'9787506365437'</span><span class="token punctuation">,</span> <span class="token string">'活着'</span><span class="token punctuation">,</span> <span class="token string">'余华'</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'2023-03-09'</span><span class="token punctuation">,</span> <span class="token string">'2023-03-09'</span><span class="token punctuation">)</span>
</code></pre></div><h3>插入默认值</h3>
<p>插入默认值，可以在值清单中使用<code>DEFAULT</code>关键字，也可以在列清单中不列出该列</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 使用DEFAULT关键字</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book<span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> price<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'9787020096695'</span><span class="token punctuation">,</span> <span class="token string">'哈利波特'</span><span class="token punctuation">,</span> <span class="token string">'J.K.罗琳'</span><span class="token punctuation">,</span> <span class="token keyword">DEFAULT</span><span class="token punctuation">)</span>

<span class="token comment">-- 省略默认值列</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book<span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'9787020096695'</span><span class="token punctuation">,</span> <span class="token string">'哈利波特'</span><span class="token punctuation">,</span> <span class="token string">'J.K.罗琳'</span><span class="token punctuation">)</span>
</code></pre></div><h3><code>INSERT...SELECT</code>语句</h3>
<p><code>INSERT...SELECT</code>语句可以将<code>SELECT</code>的结果作为值，插入到表中。</p>
<p>示例：复制t_book表中的所有记录到t_book_copy表中</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_book_copy
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_book 
</code></pre></div><p><code>SELECT</code>子句后可以有其它子句，例如<code>WHERE</code>, <code>GROUP BY</code>, <code>ORDER BY</code>, <code>LIMIT</code>等，只要表结构与<code>SELECT</code>结果集兼容即可。</p>
<h2>更新记录</h2>
<p>使用<code>UPDATE</code>语句更新表中的数据。</p>
<p>示例：将图书表中价格为0的所有图书，更新其价格为9.9</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> t_book
<span class="token keyword">SET</span> price <span class="token operator">=</span> <span class="token number">9.9</span>
<span class="token keyword">WHERE</span> price <span class="token operator">=</span> <span class="token number">0</span>
</code></pre></div><p>示例：更新图书表中书名为"活着"的图书，更新其出版社和出版日期</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> t_book
<span class="token keyword">SET</span> publisher <span class="token operator">=</span> <span class="token string">'作家出版社'</span><span class="token punctuation">,</span>
    publish_date<span class="token operator">=</span> <span class="token string">'2012-8-1'</span>
<span class="token keyword">WHERE</span> title<span class="token operator">=</span> <span class="token string">'活着'</span>
</code></pre></div><h2>删除记录</h2>
<p>使用<code>DELETE FROM</code>语句删除表中的记录。</p>
<p>示例：删除读者表中的全部记录</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_reader<span class="token punctuation">;</span>
</code></pre></div><p>示例：删除读者表中身份证号为null的记录</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_reader <span class="token keyword">WHERE</span> id_card <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>sql数据库和表</title>
      <link>https://bitbitpulse.github.io/posts/database/sql/sql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/sql/sql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">sql数据库和表</source>
      <description>sql数据库和表 TIP 数据库：PostgreSQL 16.1 数据库 创建数据库 删除数据库 数据表 创建表 使用CREATE TABLE语句创建表，语法如下： 以图书馆管理系统为例（简化版）： 图书表 读者表 地址表 借阅记录表 更新表 使用ALTER TABLE语句更新表。 增加列 更新读者表，增加1列，表示最大可借图书数量 删除列 添加约束 ...</description>
      <content:encoded><![CDATA[
<div class="custom-container tip"><p class="custom-container-title">TIP</p>
<p>数据库：PostgreSQL 16.1</p>
</div>
<h2>数据库</h2>
<h3>创建数据库</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> library<span class="token punctuation">;</span>
</code></pre></div><h3>删除数据库</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> library<span class="token punctuation">;</span>
</code></pre></div><h2>数据表</h2>
<h3>创建表</h3>
<p>使用<code>CREATE TABLE</code>语句创建表，语法如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>列约束<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>列约束<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">&lt;</span>表约束<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token operator">&lt;</span>表约束<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>以图书馆管理系统为例（简化版）：</p>
<p>图书表</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"t_book"</span> <span class="token punctuation">(</span>
  <span class="token string">"id"</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">"title"</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">"author"</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token string">"price"</span> <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token string">"publisher"</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token string">"publish_date"</span> <span class="token keyword">date</span><span class="token punctuation">,</span>
  <span class="token string">"create_at"</span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span>
  <span class="token string">"update_at"</span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">"t_book_pkey"</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">"title_ukey"</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><p>读者表</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"t_reader"</span> <span class="token punctuation">(</span>
  <span class="token string">"id"</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">"id_card"</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token string">"name"</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">"gender"</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token string">"address_id"</span> int4<span class="token punctuation">,</span>
  <span class="token string">"create_at"</span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span>
  <span class="token string">"update_at"</span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">"t_reader_pkey"</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">"address_id_fkey"</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">"address_id"</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token string">"t_address"</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">"address_id_ukey"</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span><span class="token string">"address_id"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><p>地址表</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"t_address"</span> <span class="token punctuation">(</span>
  <span class="token string">"id"</span> int4 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">"address"</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">"t_address_pkey"</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><p>借阅记录表</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"t_borrow_record"</span> <span class="token punctuation">(</span>
  <span class="token string">"reader_id"</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">"book_id"</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">"borrow_at"</span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span>
  <span class="token string">"return_at"</span> <span class="token keyword">date</span><span class="token punctuation">,</span>
  <span class="token keyword">CONSTRAINT</span> <span class="token string">"t_borrow_record_pkey"</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">"reader_id"</span><span class="token punctuation">,</span> <span class="token string">"book_id"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><h3>更新表</h3>
<p>使用<code>ALTER TABLE</code>语句更新表。</p>
<h4>增加列</h4>
<p>更新读者表，增加1列，表示最大可借图书数量</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_reader <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> max_borrowable int2<span class="token punctuation">;</span>

<span class="token comment">/*增加列，同时添加列约束*/</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_reader <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> max_borrowable int2 <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre></div><h4>删除列</h4>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_reader <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> max_borrowable<span class="token punctuation">;</span>
</code></pre></div><h4>添加约束</h4>
<p>给读者表的address_id列添加外键约束，引用地址表的id列，级联删除，级联更新</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_reader
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token string">"address_id_fkey"</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">"address_id"</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token string">"t_address"</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
<span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre></div><h3>删除表</h3>
<p>使用<code>DROP TABLE</code>语句删除表</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> t_address<span class="token punctuation">;</span>
</code></pre></div><p>如果表中存在被引用的列（被其它表外键引用），需要添加<code>CASCADE</code>关键字，会将其它表中的引用删除</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> t_address <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre></div><h2>约束</h2>
<h3>主键约束</h3>
<p>使用<code>PRIMARY KEY</code>指定主键，需要在定义表的时候设置主键。</p>
<p>主键约束名通常为：<em>表名_pkey</em></p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>
  	<span class="token string">"id"</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>主键约束名<span class="token operator">&gt;</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><h3>外键约束</h3>
<p>使用<code>FOREIGN KEY</code>指定外键约束。</p>
<p>外键既可以在定义表时设置，也可使用<code>ALTER TABLE</code>语句设置。</p>
<p>外键约束名通常为：<em>列名_fkey</em></p>
<p>定义表时设置外键约束</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>外键列名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>外键约束名<span class="token operator">&gt;</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>外键列名<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token operator">&lt;</span>关联表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>关联表ID<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>使用<code>ALTER TABLE</code>语句设置外键</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span>
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>外键约束名<span class="token operator">&gt;</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>外键列名<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token operator">&lt;</span>关联表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>关联表ID<span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre></div><h3>唯一键约束</h3>
<p>使用<code>UNIQU</code>设置唯一键约束。</p>
<p>唯一键约束既可以在定义表的时候设置，也可以使用<code>ALTER TABLE</code>语句设置。</p>
<p>唯一键约束名通常为：<em>列名_ukey</em></p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span>
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>唯一键约束名<span class="token operator">&gt;</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>列名<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>Null约束</h3>
<p>使用<code>NULL</code>或<code>NOT NULL</code>设置Null约束。列默认具有NULL约束</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>
</code></pre></div><h3>默认值约束</h3>
<p>使用<code>DEFAULT</code>设置默认值约束</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>
	<span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token keyword">DEFAULT</span> <span class="token operator">&lt;</span>默认值<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>
</code></pre></div><h3>检查约束</h3>
<p>使用<code>CHECK(条件表达式)</code>设置检查约束，限制某一列必须满足给定的条件。</p>
<p>例如：对读者表中的max_borrowable列添加约束，限制值范围为0-10</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token string">"t_reader"</span>
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token string">"max_borrowable_check"</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>max_borrowable <span class="token operator">BETWEEN</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>sql查询</title>
      <link>https://bitbitpulse.github.io/posts/database/sql/sql%E6%9F%A5%E8%AF%A2.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/sql/sql%E6%9F%A5%E8%AF%A2.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">sql查询</source>
      <description>sql查询 sql查询子句语法与执行顺序 1个sql查询语句包括1个或多个子句，其语法如下： sql子句的执行顺序如下： FROM子句：确定从哪个表中取数据。如果存在多表联结，就按照联结条件进行组合，返回结果集 WHERE子句：过滤不满足条件的记录 GROUP BY子句：将WHERE过滤后的结果集进行分组， 聚合函数：执行SELECT中的聚合计算：求和...</description>
      <content:encoded><![CDATA[
<h2>sql查询子句语法与执行顺序</h2>
<p>1个sql查询语句包括1个或多个子句，其语法如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span><span class="token keyword">DISTINCT</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>结果集字段列表<span class="token operator">&gt;</span>
<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表<span class="token number">1</span><span class="token operator">&gt;</span>
<span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token operator">|</span><span class="token keyword">LEFT</span><span class="token operator">|</span><span class="token keyword">RIGHT</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> <span class="token operator">&lt;</span>表<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>联结条件<span class="token operator">&gt;</span>
<span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>过滤条件表达式<span class="token operator">&gt;</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>分组字段列表<span class="token operator">&gt;</span>
<span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>分组过滤条件表达式<span class="token operator">&gt;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>排序字段列表 <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token keyword">LIMIT</span> <span class="token operator">&lt;</span>限制结果集记录数<span class="token operator">&gt;</span> <span class="token keyword">OFFSET</span> <span class="token operator">&lt;</span>限制开始的行号<span class="token operator">&gt;</span>
</code></pre></div><p>sql子句的执行顺序如下：</p>
<ol>
<li><code>FROM</code>子句：确定从哪个表中取数据。如果存在多表联结，就按照联结条件进行组合，返回结果集</li>
<li><code>WHERE</code>子句：过滤不满足条件的记录</li>
<li><code>GROUP BY</code>子句：将WHERE过滤后的结果集进行分组，</li>
<li>聚合函数：执行<code>SELECT</code>中的聚合计算：求和、计数等</li>
<li><code>HAVING</code>子句：对分组、聚合的结果集进行过滤</li>
<li><code>SELECT</code>子句：执行完所有的过滤条件后，从结果集中选取需要的列</li>
<li><code>DISTINCT</code>：从<code>SELECT</code>子句的结果集中，去除重复的记录</li>
<li><code>ORDER BY</code>子句：对结果集进行排序</li>
<li><code>LIMIT</code>子句：限制结果集返回的记录数</li>
</ol>
<h2><code>SELECT</code>子句</h2>
<p><code>SELECT</code>子句指定结果集包含的列。1个sql至少需要包含<code>SELECT</code>子句</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">'9787020002207'</span><span class="token punctuation">,</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">;</span>
</code></pre></div><p>可以为列设置别名</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">'9787020002207'</span> <span class="token keyword">AS</span> id<span class="token punctuation">,</span> <span class="token string">'红楼梦'</span> <span class="token keyword">AS</span> title<span class="token punctuation">,</span> <span class="token number">120</span> <span class="token keyword">AS</span> price<span class="token punctuation">,</span> <span class="token keyword">CURRENT_DATE</span> <span class="token keyword">AS</span> create_at<span class="token punctuation">;</span>
</code></pre></div><p>如果别名为非英文字母、数字、下划线，需要用双引号括起来</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">'9787020002207'</span> <span class="token keyword">AS</span> <span class="token string">"编号"</span><span class="token punctuation">,</span> <span class="token string">'红楼梦'</span> <span class="token keyword">AS</span> <span class="token string">"书名"</span><span class="token punctuation">,</span> <span class="token number">120</span> <span class="token keyword">AS</span> <span class="token string">"价格"</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_DATE</span> <span class="token keyword">AS</span> <span class="token string">"创建时间"</span><span class="token punctuation">;</span>
</code></pre></div><h2><code>FROM</code>子句</h2>
<p><code>FROM</code>子句指定要查询的数据表。</p>
<p><code>SELECT</code>子句中，使用星号*表示查询所有列</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><p>查询列出的列</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> price
<span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><h2><code>WHERE子句</code></h2>
<p><code>WHERE</code>子句用于过滤结果集。</p>
<p>在条件表达式中，可以使用各种运算符：</p>
<ul>
<li>算术运算符：<code>+ - * /</code></li>
<li>比较运算符：<code>= &lt;&gt; &gt; &gt;- &lt; &lt;=</code></li>
<li>逻辑运算符：<code>NOT AND OR</code></li>
</ul>
<p>还可以使用以下谓词：</p>
<ul>
<li>
<p><code>LIKE</code>：<code>_</code>表示1个任意字符，<code>%</code>表示0或多个任意字符</p>
</li>
<li>
<p><code>IS NULL</code> <code>IS NOT NULL</code></p>
</li>
<li>
<p><code>BETWEEN</code></p>
</li>
<li>
<p><code>IN</code> <code>NOT IN</code></p>
</li>
<li>
<p><code>EXISTS</code> <code>NOT EXISTS</code></p>
</li>
</ul>
<p>需要注意的是，<code>NULL</code>与任何数进行算术或比较运算，结果都是<code>NULL</code>，也不能参与逻辑运算，结果是不确定的。</p>
<p>错误示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token number">0</span> <span class="token operator">&gt;</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">&lt;&gt;</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token boolean">NULL</span>
</code></pre></div><p>在条件表达式中使用<code>NULL</code>时，要用<code>IS NULL</code> 或 <code>IS NOT NULL</code></p>
<p>正确示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">WHERE</span> publisher <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre></div><h2><code>DISTINCT</code>去重</h2>
<p><code>DISTINCT</code>关键词可以对<code>SELECT</code>的结果集进行去重，支持对多列的组合去重。</p>
<p>示例：从图书表中查询所有的作者</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> author <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><h2>聚合函数与<code>GROUP BY</code>、<code>Having</code>子句</h2>
<h3>聚合函数</h3>
<p>5个常用的聚合函数：</p>
<ul>
<li><code>COUNT</code>：统计记录数量</li>
<li><code>SUM</code>：求和</li>
<li><code>AVG</code>：求平均值</li>
<li><code>MIN</code>：求最小值</li>
<li><code>MAX</code>：求最大值</li>
</ul>
<p>聚合函数在进行统计时，会自动去除值为NULL的记录。不过，对于<code>COUNT</code>函数，可以使用<code>count(*)</code> 或 <code>count(1)</code>的方式，使其包括NULL值记录。</p>
<p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><p>聚合函数中，支持先使用<code>DISTINCT</code>去除重复记录后，再进行统计。</p>
<p>示例：统计图书表中图书作者的数量</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> author<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"authors"</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">;</span>
</code></pre></div><h3><code>GROUP BY</code>子句</h3>
<p><code>GROUP BY</code>子句将表中的记录按照聚合键进行分组，然后进行聚合计算。</p>
<p>使用<code>GROUP BY</code>子句时，<code>SELECT</code>子句中只能存在以下3种元素：</p>
<ul>
<li>常数</li>
<li>聚合函数</li>
<li>聚合键(GROUP BY中指定的列名)</li>
</ul>
<p>另外，因为sql执行顺序：<code>GROUP BY</code>子句在前，<code>SELECT</code>子句在后：</p>
<ul>
<li>
<p><code>GROUP BY</code>以及<code>HAVING</code>子句中，不能使用列别名，因为此时还没定义列别名</p>
</li>
<li>
<p>同样的道理，在<code>WHERE</code>子句中也不能使用聚合函数，因为此时还没进行分组、聚合</p>
</li>
</ul>
<p>示例：统计图书表中，每个出版社图书的数量、总价、平均价、最高单价、最低单价</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> publisher      <span class="token keyword">AS</span> <span class="token string">"出版社"</span><span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>   <span class="token keyword">AS</span> <span class="token string">"数量"</span><span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">"总价"</span><span class="token punctuation">,</span>
       <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">"均价"</span><span class="token punctuation">,</span>
       <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">"最高单价"</span><span class="token punctuation">,</span>
       <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">"最低单价"</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> publisher
</code></pre></div><h3><code>HAVING</code>子句</h3>
<p><code>HAVING</code>子句对分组、聚合结果进行过滤。</p>
<p><code>HAVING</code>子句中可以使用常数、聚合键、聚合函数构造分组过滤条件表达式。</p>
<p>示例：统计图书表中，每个出版社图书的数量、总价、平均价、最高单价、最低单价，排除出版社为NULL，且总价小于100的记录</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> publisher      <span class="token keyword">AS</span> <span class="token string">"出版社"</span><span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>   <span class="token keyword">AS</span> <span class="token string">"数量"</span><span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">"总价"</span><span class="token punctuation">,</span>
	   <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">"均价"</span><span class="token punctuation">,</span>
       <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">"最高单价"</span><span class="token punctuation">,</span>
	   <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>     <span class="token keyword">AS</span> <span class="token string">"最低单价"</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> publisher
<span class="token keyword">HAVING</span> publisher <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
   <span class="token operator">AND</span> <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span>
</code></pre></div><h2><code>ORDER BY</code>子句</h2>
<p><code>ORDER BY</code>子句对结果集进行排序。</p>
<p>可以在排序键后使用<code>ASC</code>或<code>DESC</code>关键字，指定排序数量；另外，可以指定多个排序键。</p>
<p>示例：查询图书表中的所有记录，按照出版社和作者名升序排序（字典顺序）</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ASC</span><span class="token punctuation">,</span> author <span class="token keyword">ASC</span>
</code></pre></div><p>需要注意的是，当排序键的列包括NULL值时，NULL值记录会排在结果集的开头或末尾（取决于具体DBMS的实现）。</p>
<p>不过，借助一些NULL相关的方言函数，或者CASE表达式，可以明确的将NULL值记录排在结果集的开头或者末尾。</p>
<p>例如：查询图书表中的所有记录，按照出版社和作者名升序排序（字典顺序），出版社为NULL的排最前面</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> publisher <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">ASC</span><span class="token punctuation">,</span> publisher <span class="token keyword">ASC</span><span class="token punctuation">,</span> author <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre></div><h2><code>LIMIT</code>子句</h2>
<p><code>LIMIT</code>子句用于限制结果集的大小，结合<code>OFFSET</code>关键字，可以实现分页查询。</p>
<p>示例：查询图书表中，按照图书名称排序后的前3本图书</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> title
<span class="token keyword">LIMIT</span> <span class="token number">3</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span>
</code></pre></div><p>示例：查询图书表中，价格最高的图书</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">WHERE</span> price <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">DESC</span>
<span class="token keyword">LIMIT</span> <span class="token number">1</span>
</code></pre></div><h2>视图</h2>
<p>视图(View)是一种虚拟表，其内部存储sql查询语句，而不是数据。</p>
<h3>创建视图</h3>
<p>使用<code>CREATE VIEW</code>语句创建视图，语法如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> <span class="token operator">&lt;</span>视图名<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>视图列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>视图列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">(</span>
	<span class="token operator">&lt;</span><span class="token keyword">SELECT</span>语句<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre></div><p>创建视图需要注意以下2点：</p>
<ul>
<li>不要在SELECT语句中使用<code>ORDER BY</code>子句</li>
<li>不推荐基于视图创建视图</li>
</ul>
<p>示例：创建视图，将读者按照性别分组，统计每种性别的读者人数</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v_readers_group_by_gender<span class="token punctuation">(</span>gender<span class="token punctuation">,</span> readers<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">FROM</span> t_reader
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender
<span class="token punctuation">)</span>
</code></pre></div><h3>使用视图</h3>
<p>使用视图进行<code>SELECT</code>查询时，可以将其视作数据表。</p>
<p>示例：使用视图查询每种性别的读者人数</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v_readers_group_by_gender<span class="token punctuation">;</span>
</code></pre></div><p>使用视图进行更新操作(<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>)，有严格的限制，不推荐对视图进行更新操作。</p>
<h3>删除视图</h3>
<p>使用<code>DROP VIEW</code>语句删除视图</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> v_readers_group_by_gender<span class="token punctuation">;</span>
</code></pre></div><p>如果要删除的视图存在关联视图，需要使用<code>CASCADE</code>关键字</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> v_readers_group_by_gender <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre></div><h2>子查询</h2>
<h3>语法</h3>
<p>子查询可以理解为"一次性视图"。</p>
<p>通常将子查询语句放到一对括号<code>()</code>中，然后使用<code>AS</code>关键字指定子查询的名称，例如：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> readers <span class="token keyword">FROM</span>
<span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> readers
	<span class="token keyword">FROM</span> t_reader
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender
<span class="token punctuation">)</span> <span class="token keyword">AS</span> readers<span class="token punctuation">;</span>
</code></pre></div><p>子查询可以嵌套子查询，不过不推荐编写嵌套层次太深的子查询。</p>
<h3>标量子查询</h3>
<p>标量子查询是指返回单一值的子查询（有且只有1个值）。可以用在sql中任何允许单一值的地方。</p>
<p>在<code>SELECT</code>子句中使用标量子查询，示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询图书信息，包括所有图书的平均价格</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"平均价格"</span>
<span class="token keyword">FROM</span> t_book
</code></pre></div><p>在<code>WHERE</code>子句中使用标量子查询，示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询价格大于平均值的图书</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book
<span class="token keyword">WHERE</span> price <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_book<span class="token punctuation">)</span>
</code></pre></div><h3>关联子查询</h3>
<p>关联子查询涉及外部查询和内部查询之间的关联：外部查询的每一行记录传递1个值给内部查询，内部查询中使用这个值进行查询，返回相应的记录。</p>
<p>关联子查询常用于以下场景：</p>
<ul>
<li>在细分的组内进行比较</li>
<li>与<code>EXISTS</code>或<code>NOT EXISTS</code>结合使用</li>
</ul>
<p>在细分的组内进行比较，示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询每个出版社中, 价格大于各个出版社图书平均价格的图书</span>
<span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book <span class="token keyword">AS</span> t1
<span class="token keyword">WHERE</span> price <span class="token operator">&gt;</span> <span class="token punctuation">(</span>
  	<span class="token keyword">SELECT</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>
	<span class="token keyword">FROM</span> t_book <span class="token keyword">AS</span> t2
	<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>publisher <span class="token operator">=</span> t2<span class="token punctuation">.</span>publisher
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> publisher
<span class="token punctuation">)</span>
</code></pre></div><p>与<code>EXISTS</code>或<code>NOT EXISTS</code>结合使用，示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询从来没有出借过的图书</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_book <span class="token keyword">AS</span> t1
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> <span class="token operator">*</span>
	<span class="token keyword">FROM</span> t_borrow_record <span class="token keyword">AS</span> t2
	<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>book_id
<span class="token punctuation">)</span>
</code></pre></div><h2>集合操作</h2>
<p>在sql中，数据表、视图、<code>SELECT</code>结果集等都属于集合。</p>
<p>在进行集合运算时，参与运算的各个集合必须满足以下要求：</p>
<ul>
<li>列数一致</li>
<li>各列数据类型一致</li>
<li><code>ORDER BY</code>子句只能在最后一个<code>SELECT</code>语句中出现1次</li>
</ul>
<h3><code>UNION</code>：并集</h3>
<p><code>UNION</code>进行并集计算，自动去重重复记录，使用<code>UNION ALL</code>可以保留重复记录。</p>
<p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publisher <span class="token operator">=</span> <span class="token string">'人民文学出版社'</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publisher <span class="token operator">=</span> <span class="token string">'译林出版社'</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher
</code></pre></div><h3><code>INTERSECT</code>：交集</h3>
<p><code>INTERSECT</code>进行交集计算，自动去重，使用<code>INTERSECT ALL</code>可以保留重复记录。</p>
<p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> publish_date <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publisher <span class="token operator">=</span> <span class="token string">'人民文学出版社'</span>
<span class="token keyword">INTERSECT</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> publish_date <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publish_date <span class="token operator">IS</span> <span class="token boolean">NULL</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher
</code></pre></div><h3><code>EXCEPT</code>：差集</h3>
<p><code>EXCEPT</code>进行差集计算。</p>
<p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> publisher <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> publisher <span class="token operator">=</span> <span class="token string">'人民文学出版社'</span>
<span class="token keyword">EXCEPT</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> publisher <span class="token keyword">FROM</span> t_book <span class="token keyword">WHERE</span> author <span class="token operator">=</span> <span class="token string">'曹雪芹'</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher
</code></pre></div><h2>联结查询</h2>
<p>联结查询是指通过联结条件，将多个表中的数据组合起来，形成新的结果集。</p>
<h3><code>INNER JOIN</code>：内联接</h3>
<p>内联结将2张表中满足联结条件的记录组合起来，形成新的结果集。</p>
<p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>address
<span class="token keyword">FROM</span> t_reader <span class="token keyword">AS</span> t1 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_address <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>address_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id
</code></pre></div><h3><code>LEFT OUTER JOIN</code>：左外联结</h3>
<p>以左表为主表，将主表中的所有记录与右表中满足联结条件的记录组合起来，形成新的结果集。</p>
<p><code>LEFT OUTER JOIN</code>可以简写为<code>LEFT JOIN</code>。</p>
<p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>address
<span class="token keyword">FROM</span> t_reader <span class="token keyword">AS</span> t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_address <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>address_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id
</code></pre></div><h3><code>RIGHT OUTER JOIN</code>：右外联结</h3>
<p>以右表为主表，将主表中的所有记录与左表中满足联结条件的记录组合起来，形成新的结果集。</p>
<p><code>RIGHT OUTER JOIN</code>可以简写为<code>RIGHT JOIN</code>。</p>
<p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>address
<span class="token keyword">FROM</span> t_reader <span class="token keyword">AS</span> t1 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_address <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>address_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id
</code></pre></div><h3><code>CROSS JOIN</code>：交叉联结</h3>
<p>交叉联结不能指定联结条件，对2张表的所有记录进行交叉组合，其结果集是笛卡尔积。</p>
<p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>address
<span class="token keyword">FROM</span> t_reader <span class="token keyword">AS</span> t1 <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> t_address <span class="token keyword">AS</span> t2
</code></pre></div><h2>高级查询</h2>
<h3><code>CASE</code>表达式</h3>
<p><code>CASE</code>表达式是一种条件表达式，基于不同的条件返回不同的值。</p>
<p><code>CASE</code>表达式分为2种：简单<code>CASE</code>表单式和搜索<code>CASE</code>表达式</p>
<h4>简单<code>CASE</code>表单式</h4>
<p>语法如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span> <span class="token operator">&lt;</span>表达式<span class="token operator">&gt;</span>
	<span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>值表达式<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token operator">&lt;</span>返回值表达式<span class="token operator">&gt;</span>
	<span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>值表达式<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token operator">&lt;</span>返回值表达式<span class="token operator">&gt;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">ELSE</span> <span class="token operator">&lt;</span>默认返回值表达式<span class="token operator">&gt;</span>
<span class="token keyword">END</span>
</code></pre></div><p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询读者的性别, male展示为"男", female展示为"女"</span>
<span class="token keyword">SELECT</span> name <span class="token keyword">AS</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token keyword">CASE</span> gender <span class="token keyword">WHEN</span> <span class="token string">'male'</span> <span class="token keyword">THEN</span> <span class="token string">'男'</span> <span class="token keyword">WHEN</span> <span class="token string">'female'</span> <span class="token keyword">THEN</span> <span class="token string">'女'</span> <span class="token keyword">ELSE</span> <span class="token boolean">NULL</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"性别"</span>
<span class="token keyword">FROM</span> t_reader
</code></pre></div><h4>搜索<code>CASE</code>表达式</h4>
<p>语法如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span>
  	<span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token operator">&lt;</span>返回值表达式<span class="token operator">&gt;</span>
	<span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token operator">&lt;</span>返回值表达式<span class="token operator">&gt;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">ELSE</span> <span class="token operator">&lt;</span>默认返回值表达式<span class="token operator">&gt;</span>
<span class="token keyword">END</span>
</code></pre></div><p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 按照出版年份将图书分类为: 新书, 旧书, 未知</span>
<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> extract<span class="token punctuation">(</span><span class="token keyword">YEAR</span> <span class="token keyword">FROM</span> publish_date<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2000</span> <span class="token keyword">THEN</span> <span class="token string">'新书'</span> <span class="token keyword">WHEN</span> extract<span class="token punctuation">(</span><span class="token keyword">YEAR</span> <span class="token keyword">FROM</span> publish_date<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2000</span> <span class="token keyword">THEN</span> <span class="token string">'旧书'</span> <span class="token keyword">ELSE</span> <span class="token string">'未知'</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token string">"新旧类别"</span>
<span class="token keyword">FROM</span> t_book
</code></pre></div><h3>CTE表达式</h3>
<p>CTE(Common Table Expressions，公用表表达式)，用于在查询中定义临时性的结果集。</p>
<p>CTE语法如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> <span class="token operator">&lt;</span>CTE名称<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>列<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token keyword">AS</span><span class="token punctuation">(</span>
	<span class="token comment">-- CTE查询定义语句</span>
<span class="token punctuation">)</span>

<span class="token comment">-- 使用CTE</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>CTE名称<span class="token operator">&gt;</span>
</code></pre></div><p>示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> cte<span class="token punctuation">(</span>book<span class="token punctuation">,</span> reader<span class="token punctuation">,</span> borrow_at<span class="token punctuation">,</span> return_at<span class="token punctuation">)</span> <span class="token keyword">AS</span><span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> t2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> t3<span class="token punctuation">.</span>name<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>borrow_at<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>return_at
  <span class="token keyword">FROM</span> t_borrow_record <span class="token keyword">AS</span> t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_book   <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id
							 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_reader <span class="token keyword">AS</span> t3 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>reader_id <span class="token operator">=</span> t3<span class="token punctuation">.</span>id
<span class="token punctuation">)</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> cte <span class="token keyword">WHERE</span> book <span class="token operator">=</span> <span class="token string">'红楼梦'</span><span class="token punctuation">;</span>
</code></pre></div><h3><code>EXISTS</code>谓词</h3>
<h3>窗口函数</h3>
<p>窗口函数，也叫做OLAP函数(Online Analytical Procession，实时分析处理)。只能用在<code>SELECT</code>子句中。</p>
<p>窗口函数包括：</p>
<ul>
<li>5个聚合函数：<code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MIN</code>, <code>MAX</code></li>
<li>OLAP专用函数：<code>RANK</code>, <code>DENSE_RANK</code>, <code>ROW_NUMBER</code>等</li>
</ul>
<p>窗口函数语法：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>窗口函数<span class="token operator">&gt;</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>分区列清单<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>排序列清单<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre></div><p>示例：使用<code>RANK()</code>窗口函数计算排名</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 获取每个出版社中图书按照价格从低到高排序的序号</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> price<span class="token punctuation">,</span> RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
<span class="token keyword">FROM</span> t_book
</code></pre></div><p></p>
<p><code>PARTITION BY</code>不是必须的，如果不写，表示将整张表视为1个分区。示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> price<span class="token punctuation">,</span> RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token comment">/*PARTITION BY publisher*/</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
<span class="token keyword">FROM</span> t_book
</code></pre></div><p></p>
<p><code>RANK</code>, <code>DENSE_RANK</code> 和 <code>ROW_NUMBER</code> 窗口函数的区别，示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> price<span class="token punctuation">,</span> 
       RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token comment">/*PARTITION BY publisher*/</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking<span class="token punctuation">,</span>
	   DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token comment">/*PARTITION BY publisher*/</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> dense_ranking<span class="token punctuation">,</span>
	   ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token comment">/*PARTITION BY publisher*/</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> row_num
<span class="token keyword">FROM</span> t_book
</code></pre></div><p></p>
<p>将聚合函数作为窗口函数使用，示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> publisher<span class="token punctuation">,</span> price<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"图书数量"</span><span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"图书总价"</span><span class="token punctuation">,</span>
	   <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"平均价格"</span><span class="token punctuation">,</span>
	   <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"最低价格"</span><span class="token punctuation">,</span>
	   <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> publisher <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> publisher<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">"最高价格"</span>
<span class="token keyword">FROM</span> t_book
</code></pre></div><p></p>
]]></content:encoded>
    </item>
    <item>
      <title>sql经典实例</title>
      <link>https://bitbitpulse.github.io/posts/database/sql/sql%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B.html</link>
      <guid>https://bitbitpulse.github.io/posts/database/sql/sql%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">sql经典实例</source>
      <description>sql经典实例 CASE表达式 将已有列转换为其它列并进行统计 现有月度销售额数据表，如下： 需要统计季度销售额数据，可以使用CASE表达式，将月度转换为季度，然后进行分组统计。标准sql如下： 在MySQL或PostgreSQL中，支持下面的简写方式： 输出： 在1条sql中按照不同条件进行统计 现有各个省份的男女人口数据表，如下： 需要将各个省份的...</description>
      <content:encoded><![CDATA[
<h2><code>CASE</code>表达式</h2>
<h3>将已有列转换为其它列并进行统计</h3>
<p>现有月度销售额数据表，如下：</p>
<p></p>
<p>需要统计季度销售额数据，可以使用<code>CASE</code>表达式，将月度转换为季度，然后进行分组统计。标准sql如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token keyword">THEN</span> <span class="token string">'一季度'</span> 
             <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token keyword">THEN</span> <span class="token string">'二季度'</span>
             <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token keyword">THEN</span> <span class="token string">'三季度'</span>
             <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">12</span> <span class="token keyword">THEN</span> <span class="token string">'四季度'</span>
             <span class="token keyword">ELSE</span> <span class="token string">'其它'</span>
	    <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> season<span class="token punctuation">,</span>
        <span class="token function">sum</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> amount
<span class="token keyword">FROM</span> t_sales_amount
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token keyword">THEN</span> <span class="token string">'一季度'</span> 
               <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token keyword">THEN</span> <span class="token string">'二季度'</span>
               <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token keyword">THEN</span> <span class="token string">'三季度'</span>
               <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">12</span> <span class="token keyword">THEN</span> <span class="token string">'四季度'</span>
               <span class="token keyword">ELSE</span> <span class="token string">'其它'</span>
          <span class="token keyword">END</span><span class="token punctuation">)</span>
</code></pre></div><p>在MySQL或PostgreSQL中，支持下面的简写方式：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token keyword">THEN</span> <span class="token string">'一季度'</span> 
             <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token keyword">THEN</span> <span class="token string">'二季度'</span>
             <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token keyword">THEN</span> <span class="token string">'三季度'</span>
             <span class="token keyword">WHEN</span> <span class="token string">"month"</span> <span class="token operator">&lt;=</span> <span class="token number">12</span> <span class="token keyword">THEN</span> <span class="token string">'四季度'</span>
             <span class="token keyword">ELSE</span> <span class="token string">'其它'</span>
       <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> season<span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> amount
<span class="token keyword">FROM</span> t_sales_amount
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> season
</code></pre></div><p>输出：</p>
<p></p>
<h3>在1条sql中按照不同条件进行统计</h3>
<p>现有各个省份的男女人口数据表，如下：</p>
<p></p>
<p>需要将各个省份的男女人口数据"行转列"，可以使用<code>CASE</code>表达式，sql如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> province<span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> sex <span class="token keyword">WHEN</span> <span class="token string">'男'</span> <span class="token keyword">THEN</span> population <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> population_male<span class="token punctuation">,</span>
	   <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> sex <span class="token keyword">WHEN</span> <span class="token string">'女'</span> <span class="token keyword">THEN</span> population <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> population_female
<span class="token keyword">FROM</span> t_population
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> province
</code></pre></div><p>输出：</p>
<p></p>
<h3>在<code>CHECK</code>约束中定义多个列的条件关系</h3>
<p>现有员工薪资表，要求限制女性员工的薪资不得超过20000元，可以给给性别列和薪资列添加<code>CHECK</code>约束，sql如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_salary
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> salary_check
<span class="token keyword">CHECK</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> sex <span class="token operator">=</span> <span class="token string">'女'</span> <span class="token operator">AND</span> salary <span class="token operator">&gt;=</span> <span class="token number">20000</span> <span class="token keyword">THEN</span> <span class="token number">0</span> <span class="token keyword">ELSE</span> <span class="token number">1</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div><h3>在<code>UPDATE</code>语句中使用<code>CASE</code>表达式</h3>
<p>现有员工薪资表，如下：</p>
<p></p>
<p>需要调整薪资：</p>
<ul>
<li>薪资大于40000的员工，统一下调薪资10%</li>
<li>薪资小于20000的员工，统一上调薪资10%</li>
<li>其它员工薪资保持不变</li>
</ul>
<p>使用<code>CASE</code>表达式，sql如下：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> t_salary
<span class="token keyword">SET</span> salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> salary <span class="token operator">&gt;</span> <span class="token number">40000</span> <span class="token keyword">THEN</span> salary <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token keyword">WHEN</span> salary <span class="token operator">&lt;</span> <span class="token number">20000</span> <span class="token keyword">THEN</span> salary <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token keyword">ELSE</span> salary <span class="token keyword">END</span><span class="token punctuation">)</span>
</code></pre></div><p>结果：</p>
<p></p>
]]></content:encoded>
    </item>
    <item>
      <title>Java Demos</title>
      <link>https://bitbitpulse.github.io/posts/java/demos/</link>
      <guid>https://bitbitpulse.github.io/posts/java/demos/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java Demos</source>
      <description>Java小案例</description>
    </item>
    <item>
      <title>Dubbo</title>
      <link>https://bitbitpulse.github.io/posts/java/dubbo/</link>
      <guid>https://bitbitpulse.github.io/posts/java/dubbo/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Dubbo</source>
      <description>Dubbo学习笔记</description>
    </item>
    <item>
      <title>JavaEE</title>
      <link>https://bitbitpulse.github.io/posts/java/ee/</link>
      <guid>https://bitbitpulse.github.io/posts/java/ee/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">JavaEE</source>
      <description>JavaEE学习笔记</description>
    </item>
    <item>
      <title>JSP</title>
      <link>https://bitbitpulse.github.io/posts/java/ee/JSP.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/ee/JSP.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">JSP</source>
      <description>JSP </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Servlet</title>
      <link>https://bitbitpulse.github.io/posts/java/ee/Servlet.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/ee/Servlet.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Servlet</source>
      <description>Servlet </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Tomcat</title>
      <link>https://bitbitpulse.github.io/posts/java/ee/Tomcat.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/ee/Tomcat.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Tomcat</source>
      <description>Tomcat </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Java GUI编程</title>
      <link>https://bitbitpulse.github.io/posts/java/gui/</link>
      <guid>https://bitbitpulse.github.io/posts/java/gui/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java GUI编程</source>
      <description>AWT, Swing, JavaFX</description>
    </item>
    <item>
      <title>MyBatis</title>
      <link>https://bitbitpulse.github.io/posts/java/mybatis/</link>
      <guid>https://bitbitpulse.github.io/posts/java/mybatis/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MyBatis</source>
      <description>MyBatis学习笔记</description>
    </item>
    <item>
      <title>mybatis动态SQL</title>
      <link>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E5%8A%A8%E6%80%81SQL.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E5%8A%A8%E6%80%81SQL.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">mybatis动态SQL</source>
      <description>mybatis动态SQL 参考： 官方文档：https://mybatis.org/mybatis-3/zh_CN/dynamic-sql.html </description>
      <content:encoded><![CDATA[
<p>参考：</p>
<ul>
<li>官方文档：https://mybatis.org/mybatis-3/zh_CN/dynamic-sql.html</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>mybatis增删改查</title>
      <link>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">mybatis增删改查</source>
      <description>mybatis增删改查 参考： 官方文档：https://mybatis.org/mybatis-3/zh_CN/sqlmap-xml.html 插入 插入单条记录 插入多条记录 使用动态SQL元素foreach可批量插入 插入部分列 使用动态SQL元素trim可以只插入满足条件的列 获取主键值 如果主键字段的值是在SQL语句中生成的，mybatis支...</description>
      <content:encoded><![CDATA[
<p>参考：</p>
<ul>
<li>官方文档：https://mybatis.org/mybatis-3/zh_CN/sqlmap-xml.html</li>
</ul>
<h2>插入</h2>
<h3>插入单条记录</h3>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    INSERT INTO t_blog_post(id, category_id, author_id, title, content, seq, enabled)
    VALUES ROW(#{id}, #{categoryId}, #{authorId}, #{title}, #{content}, #{seq}, #{enabled})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>插入多条记录</h3>
<p>使用动态SQL元素foreach可批量插入</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    INSERT INTO t_blog_post(id, category_id, author_id, title, content, seq, enabled)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VALUES<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        ROW(#{post.id}, #{post.categoryId}, #{post.authorId}, #{post.title}, #{post.content}, #{post.seq}, #{post.enabled})
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>插入部分列</h3>
<p>使用动态SQL元素trim可以只插入满足条件的列</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        INSERT INTO t_blog_post
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            id,
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId != null and categoryId != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>category_id,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authorId != null and anthorId != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>author_id,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null and title != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>title,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content != null and content != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>content,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seq != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>seq,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enabled != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>enabled,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VALUES ROW(<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            #{id},
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId != null and categoryId != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>#{categoryId},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authorId != null and anthorId != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>#{authorId},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null and title != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>#{title},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content != null and content != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>#{content},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seq != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>#{seq},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enabled != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>#{enabled},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>获取主键值</h3>
<p>如果主键字段的值是在SQL语句中生成的，mybatis支持获取主键值，并将其赋值给主键字段属性。</p>
<p><strong>获取自动生成的主键值</strong></p>
<p>使用useGeneratedKeys属性，表示主键由数据库自增列自动生成</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Log<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    INSERT INTO t_blog_log(content)
    VALUES (#{content})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>获取非自动生成的主键值</strong></p>
<p>使用selectKey元素，定义生成主键值的SQL语句，其order属性可选BEFORE或AFTER，表示生成主键语句是在插入语句之前还是之后执行。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        SELECT replace(uuid(), '-', '') FROM dual;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">&gt;</span></span>

    INSERT INTO t_blog_post(id, category_id, author_id, title, content, seq, enabled)
    VALUES ROW(#{id}, #{categoryId}, #{authorId}, #{title}, #{content}, #{seq}, #{enabled})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>更新</h2>
<h3>更新列出的全部列</h3>
<p>不管字段值是否为null，只要列在了update语句中，都更新到数据库中</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    UPDATE t_blog_post
    SET category_id = #{categoryId},
    author_id = #{authorId},
    title = #{title},
    content = #{content},
    seq = #{seq},
    enabled = #{enabled}
    WHERE id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>更新部分列</h3>
<p>使用动态SQL元素set可以只更新满足条件的列。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    UPDATE t_blog_post
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId != null and categoryId != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>category_id = #{categoryId},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authorId != null and authorId != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>author_id = #{authorId},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null and title != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>title = #{title},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content != null and content != ''<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>content = #{content},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seq != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>seq = #{seq},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enabled != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>enabled = #{enabled}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>
    WHERE id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>删除</h2>
<h3>删除1条记录</h3>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    DELETE FROM t_blog_post WHERE id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>删除多条记录</h3>
<p>删除多条记录的时候，需要注意避免没有WHERE的删除语句</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    DELETE FROM t_blog_post
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
        1 <span class="token cdata">&lt;![CDATA[&lt;&gt;]]&gt;</span> 1
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OR id IN(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>#{key}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>查询</h2>
<h3>使用resultType接收查询结果</h3>
<p>resultType适合查询结果是简单数据类型的语句，对于复杂类型，如果列名和对象属性名不匹配，就不能获取到对应列的数据</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT *
    FROM t_blog_post
    WHERE id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>可以通过在SQL中设置列别名的方式处理列名和对象属性名无法匹配的情况</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT id,
    category_id    AS "categoryId",
    author_id      AS "authorId",
    title,
    content,
    seq,
    enabled,
    create_time    AS "createTime",
    update_time    AS "updateTime"
    FROM t_blog_post
    WHERE id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>使用resultMap接收查询结果</h3>
<p>resultMap可以定义列名和Java对象属性名的对应关系</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryId<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authorId<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>通过将mybatis设置选项 <em>mapUnderscoreToCamelCase</em> 设置为true，并将reseultMap中的 <em>autoMapping</em> 属性设置为true，上面的resultMap可简化为</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>关联查询：有一个关联对象</h3>
<p>mybatis在结果集中使用association元素表示"有一个"的关系。</p>
<p><strong>嵌套select</strong></p>
<p>使用property表示属性名，javaType表示属性代表的实体类型，column表示关联列名，会作为参数传递给select指定的映射语句。</p>
<p>下面的代码用于查询文章以及其作者信息。先执行查询文章SQL的SQL语句，然后将author_id列的值作为参数，执行查询作者的SQL语句：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author_id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAuthorByKey<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT * FROM t_blog_post WHERE id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAuthorByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.crud.mapper.AuthorMapper.authorResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT * FROM t_blog_author WHERE id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>嵌套resultMap</strong></p>
<p>使用association的resultMap属性，可以将关联查询的嵌套结果集映射为嵌套的Java实体类</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.crud.mapper.AuthorMapper.authorResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">columnPrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a_<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT t1.*,
    t2.id   AS a_id,
    t2.name AS a_name
    FROM t_blog_post AS t1 LEFT JOIN t_blog_author AS t2 ON t1.author_id = t2.id
    WHERE t1.id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>关联查询：有多个关联对象</h3>
<p>mybatis在结果集中使用collection元素表示"有多个"的关系。</p>
<p><strong>嵌套select</strong></p>
<p>与association元素类似，只是多了一个ofType属性，表示集合中Java实体的类型</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author_id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAuthorByKey<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectTagListByPostKey<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT * FROM t_blog_post WHERE id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAuthorByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.crud.mapper.AuthorMapper.authorResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT * FROM t_blog_author WHERE id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectTagListByPostKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.crud.mapper.TagMapper.tagResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT *
    FROM t_blog_tag
    WHERE id IN (SELECT tag_id FROM t_blog_post_tag WHERE post_id = #{key})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>嵌套resultMap</strong></p>
<p>与association元素类似</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.crud.mapper.AuthorMapper.authorResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">columnPrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a_<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.crud.mapper.CategoryMapper.categoryResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">columnPrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.crud.mapper.TagMapper.tagResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">columnPrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    SELECT t1.*,
    t2.id   AS a_id,
    t2.name AS a_name,
    t3.id   AS c_id,
    t3.name AS c_name,
    t3.seq  AS c_seq,
    t5.id   AS t_id,
    t5.name AS t_name
    FROM t_blog_post AS t1 LEFT JOIN t_blog_author   AS t2 ON t1.author_id = t2.id
    LEFT JOIN t_blog_category AS t3 ON t1.category_id = t3.id
    LEFT JOIN t_blog_post_tag AS t4 ON t1.id = t4.post_id
    LEFT JOIN t_blog_tag      AS t5 ON t4.tag_id = t5.id
    WHERE t1.id = #{key}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>多层嵌套的resultMap</h3>
<p>resultMap支持多层嵌套结构。</p>
<p>如果在association或collection元素上指定了columnPrefix列名前缀，那么在SQL的select语句中，必须给相应列加上其所有外层的前缀。</p>
<p>例如：</p>
<p>任务resultMap中嵌套了广告系列collection</p>
<p></p>
<p>广告系列resultMap中嵌套了广告组</p>
<p></p>
<p>广告组resultMap中嵌套了广告投放地区association、广告受众细分定位association、广告collection</p>
<p></p>
<p>在SQL中，需要按照嵌套层次，给相应列加上所有外层前缀</p>
<p></p>
]]></content:encoded>
    </item>
    <item>
      <title>mybatis快速开始</title>
      <link>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">mybatis快速开始</source>
      <description>mybatis快速开始 参考： 官方文档：https://mybatis.org/mybatis-3/zh_CN/getting-started.html 准备工作 定义数据表 定义文章表：t_blog_post，略 创建数据表对应的Java实体类 添加依赖 pom.xml 创建mybatis核心配置文件 在CLASSPATH下创建mybatis-co...</description>
      <content:encoded><![CDATA[
<p>参考：</p>
<ul>
<li>官方文档：https://mybatis.org/mybatis-3/zh_CN/getting-started.html</li>
</ul>
<h2>准备工作</h2>
<h3>定义数据表</h3>
<p>定义文章表：t_blog_post，略</p>
<h3>创建数据表对应的Java实体类</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> authorId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> seq<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enabled<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>添加依赖</h2>
<p><em>pom.xml</em></p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>创建mybatis核心配置文件</h2>
<p>在CLASSPATH下创建mybatis-config.xml</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>
        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>
        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB_DRIVER<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB_URL<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/study?serverTimezone=Asia/Shanghai<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB_USERNAME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB_PASSWORD<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${DB_DRIVER}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${DB_URL}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${DB_USERNAME}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${DB_PASSWORD}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>从XML中构建SqlSessionFactory</h2>
<p><code>SqlSessionFactory</code> 是线程安全的，可以多次使用，推荐定义为单例。</p>
<p>创建工具类，返回 <code>SqlSessionFactory</code> 对象</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisUtils</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> <span class="token constant">SQL_SESSION_FACTORY</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">SQL_SESSION_FACTORY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">SQL_SESSION_FACTORY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>从SqlSessionFactory中获取SqlSession</h2>
<p><code>SqlSession</code>是线程不安全的，其作用域应该是方法级的，用完就关闭</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><h2>定义Mapper映射文件</h2>
<p>定义Mapper接口</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">Post</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>支持XML和注解2种映射方式。</p>
<h3>基于XML的映射文件</h3>
<p><em>PostMapper.xml</em></p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>
        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.quickstart.mapper.PostMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectOne<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.quickstart.entity.Post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        SELECT * FROM t_blog_post WHERE id = #{key};
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>XML映射文件需要在mybatis核心配置文件中的mappers标签中声明。使用resource属性，在CLASSPATH下查找</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me/lyp/quickstart/mapper/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>基于注解的映射文件</h3>
<p>直接在Mapper接口的方法上使用注解</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostMapper</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM t_blog_post WHERE id = #{key};"</span><span class="token punctuation">)</span>
    <span class="token class-name">Post</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在mybatis核心配置文件的mappers标签种声明。使用class属性，指定Mapper接口类全路径名</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>me.lyp.quickstart.mapper.PostMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>执行CRUD</h2>
<h3>直接使用SqlSession</h3>
<p>可以直接使用<code>SqlSession</code>的CRUD方法，执行指定的Mapper方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"1d2192d2b90a11ee926d005056c00001"</span><span class="token punctuation">;</span>
    <span class="token class-name">Post</span> post <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"me.lyp.quickstart.mapper.PostMapper.selectOne"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>通过Mapper接口(推荐)</h3>
<p><code>SqlSession#getMapper</code>方法可以获取到Mapper接口类型的对象，然后调用其方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"1d2192d2b90a11ee926d005056c00001"</span><span class="token punctuation">;</span>
    <span class="token class-name">PostMapper</span> postMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">PostMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Post</span> post <span class="token operator">=</span> postMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>MyBatis插件</title>
      <link>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E6%8F%92%E4%BB%B6.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E6%8F%92%E4%BB%B6.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">MyBatis插件</source>
      <description>MyBatis插件 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>mybatis配置</title>
      <link>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/mybatis/mybatis%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">mybatis配置</source>
      <description>mybatis配置 参考： 官方文档：https://mybatis.org/mybatis-3/zh_CN/configuration.html mybatis配置文件中的元素，必须按照指定顺序书写： 设置settings 类型别名typeAliases 类型处理器typeHandlers </description>
      <content:encoded><![CDATA[
<p>参考：</p>
<ul>
<li>官方文档：https://mybatis.org/mybatis-3/zh_CN/configuration.html</li>
</ul>
<p>mybatis配置文件中的元素，必须按照指定顺序书写：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>properties,settings,typeAliases,typeHandlers,objectFactory,objectWrapperFactory,reflectorFactory,plugins,environments,databaseIdProvider,mappers
</code></pre></div><h2>设置settings</h2>
<h2>类型别名typeAliases</h2>
<h2>类型处理器typeHandlers</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Netty</title>
      <link>https://bitbitpulse.github.io/posts/java/netty/</link>
      <guid>https://bitbitpulse.github.io/posts/java/netty/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Netty</source>
      <description>Netty学习笔记</description>
    </item>
    <item>
      <title>JavaSE</title>
      <link>https://bitbitpulse.github.io/posts/java/se/</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">JavaSE</source>
      <description>JavaSE学习笔记</description>
    </item>
    <item>
      <title>Java代理</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E4%BB%A3%E7%90%86.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E4%BB%A3%E7%90%86.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java代理</source>
      <description>Java代理 静态代理设计模式 示例： JDK动态代理 JDK动态代理是Java实现动态代理的一种方式，是基于接口的代理模式。 JDK动态代理通过ava.lang.reflect.Proxy和java.lang.reflect.InvocationHandler这2个接口实现。 示例： CGLIB动态代理 CGLIB(Code Generation L...</description>
      <content:encoded><![CDATA[
<h2>静态代理设计模式</h2>
<p>示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 主题接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 真实对象类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 代理对象类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxySubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Subject</span> realSubject<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ProxySubject</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> realSubject<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> realSubject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        realSubject<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>JDK动态代理</h2>
<p>JDK动态代理是Java实现动态代理的一种方式，是基于接口的代理模式。</p>
<p>JDK动态代理通过<code>ava.lang.reflect.Proxy</code>和<code>java.lang.reflect.InvocationHandler</code>这2个接口实现。</p>
<p>示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 主题接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 真实对象类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * InvocationHandler，在invoke方法中调用真实对象的方法，并根据需要在方法执行前后添加附加功能
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Subject</span> realSubject<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> realSubject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> realSubject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用真实对象的方法之前执行的附加操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用真实对象的方法</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用真实对象的方法之后执行的附加操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 返回方法返回值</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 测试类: 调用Proxy.newProxyInstance()方法，动态创建代理对象
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 类加载器</span>
        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 目标对象类和代理对象类要实现的接口数组</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Subject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 目标对象</span>
        <span class="token class-name">Subject</span> realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// InvocationHandler</span>
        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 动态创建代理对象</span>
        <span class="token class-name">Subject</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>CGLIB动态代理</h2>
<p>CGLIB(Code Generation Library)是一个高性能的代码生成库，它扩展了Java语言，为Java类提供了动态生成字节码的功能。</p>
<p>CGLIB动态代理是基于继承的代理模式，与JDK动态代理不同，CGLIB通过生成目标类的子类来实现代理，因此可以代理没有实现接口的类。</p>
<p>CGLIB动态代理是通过<code>net.sf.cglib.proxy.Enhancer</code>类和<code>net.sf.cglib.proxy.MethodInterceptor</code>接口实现的。</p>
<p>示例：</p>
<p>添加cglib依赖</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>编写代码</p>
<div class="custom-container tip"><p class="custom-container-title">提示</p>
<p>如果使用Java9以上版本的JDK，由于模块化的限制，运行测试类时，需要添加以下JVM参数：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED
</code></pre></div></div>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 真实对象类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * MethodInterceptor: 在intercept方法中，调用真实对象(父类对象)的方法，并在调用真实对象方法前后添加附加操作
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用真实对象的方法之前执行的附加操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用真实对象(父类对象)的方法</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用真实对象的方法之后执行的附加操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After Request Real Subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 测试类: 
 * 1.创建Enhancer对象
 * 2.设置要代理的真实对象类(父类)
 * 3.设置方法拦截器
 * 4.调用create方法创建代理对象
 * 5.使用代理对象调用方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">RealSubject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RealSubject</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RealSubject</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java反射</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E5%8F%8D%E5%B0%84.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E5%8F%8D%E5%B0%84.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java反射</source>
      <description>Java反射 Class&amp;lt;T&amp;gt; 获取Class对象 有3种获取Class对象的方式： 1.ClassName.class 另外，对于Java基础数据类型、void、数组，获取Class对象的方式如下： 2.instance.getClass() 3.Class.forName(className) 获取类名 获取超类 获取超接口 Constructor...</description>
      <content:encoded><![CDATA[
<h2><code>Class&lt;T&gt;</code></h2>
<h3>获取<code>Class</code>对象</h3>
<p>有3种获取Class对象的方式：</p>
<p>1.<code>ClassName.class</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> personClass <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre></div><p>另外，对于Java基础数据类型、<code>void</code>、数组，获取Class对象的方式如下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">&gt;</span></span> byteClass <span class="token operator">=</span> <span class="token keyword">byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Short</span><span class="token punctuation">&gt;</span></span> shortClass <span class="token operator">=</span> <span class="token keyword">short</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerClass <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> longClass <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> floatClass <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> doubleClass <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> characterClass <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> booleanClass <span class="token operator">=</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> voidClass <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

<span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> arrayClass <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre></div><p>2.<code>instance.getClass()</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> personClass <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>3.<code>Class.forName(className)</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> personClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"me.lyp.reflective.bean.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>获取类名</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 类全限定名</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 类名</span>
<span class="token class-name">String</span> simpleName <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>获取超类</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> superclass <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>获取超接口</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2><code>Constructor&lt;T&gt;</code></h2>
<h3>获取<code>Constructor</code>对象</h3>
<p>获取所有public构造器</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> clz <span class="token operator">=</span> <span class="token class-name">Man</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>获取指定参数类型的public构造器</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>获取所有构造器，包括非public构造器</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>获取指定参数类型的构造器，包括非public构造器</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>使用反射创建类实例</h3>
<p>使用public构造器创建类实例</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Man</span> man <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用非public构造器创建类实力，需要先禁用Java的访问控制检查</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Man</span> man <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>另外，如果类存在public的空参构造器，也使用<code>Class#newInstance()</code>创建类实例。此方式已过期，不推荐使用。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> personClass <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token class-name">Person</span> person <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2><code>Field</code></h2>
<h3>获取<code>Field</code>对象</h3>
<p>获取给定类及其超类中所有的public字段</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>获取给定类及其超类中特定的public字段</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Field</span> nameField <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>获取给定类中所有的字段，包括非public字段</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>获取给定类中特定的字段，包括非public字段</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Field</span> powerValueField <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"powerValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>使用反射设置、获取字段值</h3>
<p>使用<code>Field#set(obj, value)</code> 和 <code>Field#get(obj)</code> 方法设置、获取字段值。</p>
<p>另外，如果是非public字段，需要使用<code>Field#setAccessible(true)</code>禁用Java的访问控制检查</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> clz <span class="token operator">=</span> <span class="token class-name">Man</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Man</span> man <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Field</span> powerValueField <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"powerValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    powerValueField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    powerValueField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>man<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> powerValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> powerValueField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>powerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2><code>Method</code></h2>
<h3>获取<code>Method</code>对象</h3>
<p>获取给定类及其超类中所有的public方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>获取给定类及其超类中特定的public方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Method</span> setNameMethod <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>获取给定类中所有的方法，包括非public方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>获取给定类中特定的方法，包括非public方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Method</span> setPowerValueMethod <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setPowerValue"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>使用反射执行方法</h3>
<p>使用<code>Method#invoke(obj, args)</code>执行方法。</p>
<p>另外，如果是非public方法，需要使用<code>Method#setAccessible(true)</code>禁用Java的访问控制检查</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> clz <span class="token operator">=</span> <span class="token class-name">Man</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Man</span> man <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Method</span> setNameMethod <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Method</span> getNameMethod <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    setNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>man<span class="token punctuation">,</span> <span class="token string">"Jim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> getNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2><code>Annotation</code></h2>
<h3>获取<code>Annotation</code>对象</h3>
<p>待续...</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java文件与流</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%81.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%81.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java文件与流</source>
      <description>Java文件与流 文件 File 创建文件 列出文件列表 FileFilter是个函数式接口, 可以用lambda表达式 另外, 如果只需要通过文件名过滤文件列表, 可以使用FileFilter的子接口FilenameFilter Path 和 Paths 获取Path对象 Files 创建目录或文件 列出文件列表, 使用Files#list静态方法,...</description>
      <content:encoded><![CDATA[
<h2>文件</h2>
<h3><code>File</code></h3>
<p>创建文件</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> success <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>列出文件列表</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>FileFilter</code>是个函数式接口, 可以用lambda表达式</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>另外, 如果只需要通过文件名过滤文件列表, 可以使用<code>FileFilter</code>的子接口<code>FilenameFilter</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3><code>Path</code> 和 <code>Paths</code></h3>
<p>获取<code>Path</code>对象</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3><code>Files</code></h3>
<p>创建目录或文件</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Path</span> parent <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>列出文件列表, 使用<code>Files#list</code>静态方法, 列出当前目录下的文件列表</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如果要递归遍历文件树, 需要使用<code>Files#walk</code>静态方法, 列出指定目录下, 指定递归深度的所有目录和文件的<code>Path</code>列表</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如果需要手动处理遍历过程中的各种事件, 使用<code>Files.walkFileTree</code>静态方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">preVisitDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">CONTINUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">CONTINUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFileFailed</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">IOException</span> exc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFileFailed</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> exc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">postVisitDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir<span class="token punctuation">,</span> <span class="token class-name">IOException</span> exc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postVisitDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> exc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walkFileTree</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">noneOf</span><span class="token punctuation">(</span><span class="token class-name">FileVisitOption</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>删除目录或文件</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// Files.delete(path);</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">deleteIfExists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>复制文件</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>移动文件</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>读取文件内容</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取全部byte</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取全部字符串</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 按行读取, 返回字符串列表</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 按行读取, 返回Stream</span>
    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>流</h2>
<h3>字节流</h3>
<p>所有字节输入流都是<code>InputStream</code>抽象类的子类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取下一个字节,值以int类型返回,范围0-255</span>
    <span class="token comment">// 如果已到末尾,返回-1</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 读取一定数量的字节,将其存储到缓冲数组b中</span>
    <span class="token comment">// 返回读取的字节数量, 最多读取b.length个字节, 如果已到流末尾,返回-1</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 读取最多len个字节，将其存储到缓冲数组b中</span>
    <span class="token comment">// 读到的第1个字节存储到b[off],第2个字节存储到b[off+1],以此类推</span>
    <span class="token comment">// 返回读取的字节数量,如果已到流末尾,返回空字节数组</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 读取剩余的全部字节</span>
    <span class="token comment">// 返回读取的字节数组,如果已到末尾,返回空字节数组</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 读取最多len个字节</span>
    <span class="token comment">// 返回读取到的字节数组,如果已到流末尾,返回空字节数组</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 读取最多len个字节, 将其存储到缓冲数组b中</span>
    <span class="token comment">// 读到的第1个字节存储到b[off],第2个字节存储到b[off+1],以此类推</span>
    <span class="token comment">// 返回读取的字节数量,如果已到流末尾,返回空字节数组</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 跳过并丢弃最多n个字节,如果n为负数,跳过0个字节</span>
    <span class="token comment">// 返回实际跳过的字节数</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 跳过并丢弃最多n个字节</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">skipNBytes</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 读取并返回可以从此字节流读取而不阻塞的字节数</span>
    <span class="token comment">// 是个估计值, 不一定准确</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 关闭流</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token comment">// 检查此输入流是否支持标记</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 标记此输入流的当前读取位置</span>
    <span class="token comment">// readlimit限定打标记后,最多允许继续读取的字节数,超出此限制,则标记失效</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readlimit<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token comment">// 重置读取位置到上次在此输入流上打标记的位置</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 从输入流中读取全部字节, 写到out输出流</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>所有字节输出流都是<code>OutputStream</code>抽象类的子类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OutputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将1个字节写入到此输出流</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 将字节数组b中的所有字节写入到此输出流</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 将字节数组b中, 从b[off]到b[off+len-1]的字节写入到此输出流</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 刷新输出流缓冲区</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 关闭输出流</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><code>FileInputStream</code>与<code>FileOutputStream</code></h4>
<p>文件输入/输出流，从文件系统的文件中读取/写入字节流。</p>
<p>示例：复制图片</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"a2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>因为输入/输出流都实现了<code>Closeable</code>接口，因此，可以使用 <em>try-with-resource</em> 语法，自动关闭流</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"a2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><code>BufferedInputStream</code>与<code>BufferedOutputStream</code></h4>
<p>为底层输入/输出流添加内部缓冲功能，并且支持<code>mark</code>和<code>reset</code>。</p>
<p>示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedOutputStream</span> bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"a2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>bin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><code>DataInputStream</code>与<code>DataOutputStream</code></h4>
<p>数据输入/输出流，是一个包装流，可以从底层流中读取/写入Java基础数据类型和字符串数据。</p>
<p>注意, 从输入流中读取的顺序, 要和写入的顺序一致.</p>
<p>示例:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">DataOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DataInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    out<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    out<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    out<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> c <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> d <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><code>ByteArrayInputStream</code>与<code>ByteArrayOutputStream</code></h4>
<p>字节数组输入/输出流 主要用于在内存中临时读取/保存数据.</p>
<p>示例:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ByteArrayInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><code>ObjectInputStream</code>与<code>ObjectOutputStream</code></h4>
<p>对象输入/输出流，用于序列化与反序列化Java对象。</p>
<p>要被序列化的Java对象所属类必须实现<code>ava.io.Serializable</code>接口。</p>
<p>另外，如果不想序列化对象的某个字段，使用关键字<code>transient</code>修饰，表示临时变量。</p>
<p>示例：使用序列化与反序列化实现clone方法</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectOutputStream</span> objectOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            objectOut<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ByteArrayInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ObjectInputStream</span> objectIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> objectIn<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>字符流</h3>
<p>所有字符输入流都是<code>Reader</code>抽象类的子类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Reader</span> <span class="token keyword">implements</span> <span class="token class-name">Readable</span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">CharBuffer</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readAheadLimit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>所有字符输出流都是<code>Writer</code>抽象类的子类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Writer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> csq<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Writer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> csq<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Writer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><code>FileReader</code>与<code>FileWriter</code></h4>
<p>从文件中读取/写入字符流。</p>
<p>示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a2.txt"</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><code>BufferedReader</code>与<code>BufferedWriter</code></h4>
<p>为底层输入/输出字符流提供内部缓冲功能。</p>
<p>示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4><code>InputStreamReader</code>与<code>OutputStreamWriter</code></h4>
<p>将字节流转换为字符流</p>
<p>示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"a2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4><code>PrintWriter</code></h4>
<p>打印Java对象到文本输出流</p>
<p>示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printWriter<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"9 * 9 = %d%n"</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java新特性总结</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java新特性总结</source>
      <description>Java新特性总结 参考 Oracle JDK Release Notes 8 接口中的默认方法和静态方法 函数式接口 函数式接口表示有且仅有1个抽象方法的接口。 注意，java.lang.Object中的方法不计入数量。可以存在非抽象的default方法或static方法。 函数式接口用于接收Lambda表达式和方法引用。 定义函数式接口时，推荐用@...</description>
      <content:encoded><![CDATA[
<div class="custom-container tip"><p class="custom-container-title">参考</p>
<ul>
<li><a href="https://www.oracle.com/java/technologies/javase/jdk-relnotes-index.html" target="_blank" rel="noopener noreferrer">Oracle JDK Release Notes</a></li>
</ul>
</div>
<h2>8</h2>
<h3>接口中的默认方法和静态方法</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>函数式接口</h3>
<p>函数式接口表示有且仅有1个抽象方法的接口。</p>
<p>注意，<code>java.lang.Object</code>中的方法不计入数量。可以存在非抽象的default方法或static方法。</p>
<p>函数式接口用于接收Lambda表达式和方法引用。</p>
<p>定义函数式接口时，推荐用<code>@FunctionalInterface</code>注解进行标注</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomFunctionalInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>java.util.function</code>包中预定义了许多函数是接口，常见的几个如下：</p>
<p>| 函数式接口          | 函数签名            |
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java正则表达式</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java正则表达式</source>
      <description>Java正则表达式 获取Pattern对象 获取Matcher对象 判断是否匹配 替换 分组匹配 </description>
      <content:encoded><![CDATA[
<p>获取<code>Pattern</code>对象</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(([Hh])ello).*?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>获取<code>Matcher</code>对象</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>判断是否匹配</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> matches <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>替换</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>分组匹配</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> groups <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>groups<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> groups<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"group(%s)=%s%n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java泛型</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E6%B3%9B%E5%9E%8B.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E6%B3%9B%E5%9E%8B.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java泛型</source>
      <description>Java泛型 泛型类 定义泛型类，需要在类名后，用一对尖括号&amp;lt;&amp;gt;声明类型参数，类型参数可以定义多个，用逗号隔开 使用泛型类时，支持使用&amp;quot;菱形语法&amp;quot;，省略尖括号中的类型参数 泛型方法 定义泛型方法，需要在方法的返回值类型前声明类型参数 使用泛型方法时，在方法名前声明类型参数，可以省略 泛型的类型限定 定义泛型时，使用关键字extends限定类型参数是特定...</description>
      <content:encoded><![CDATA[
<h2>泛型类</h2>
<p>定义泛型类，需要在类名后，用一对尖括号<code>&lt;&gt;</code>声明类型参数，类型参数可以定义多个，用逗号隔开</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> legalPerson<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getLegalPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> legalPerson<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLegalPerson</span><span class="token punctuation">(</span><span class="token class-name">T</span> legalPerson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>legalPerson <span class="token operator">=</span> legalPerson<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用泛型类时，支持使用"菱形语法"，省略尖括号中的类型参数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Company&lt;Employee&gt; company = new Company&lt;Employee&gt;();</span>
<span class="token class-name">Company</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> company <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span> legalPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token number">100000.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
company<span class="token punctuation">.</span><span class="token function">setLegalPerson</span><span class="token punctuation">(</span>legalPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>company<span class="token punctuation">.</span><span class="token function">getLegalPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>泛型方法</h2>
<p>定义泛型方法，需要在方法的返回值类型前声明类型参数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">randomEmployee</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> employees<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>employees<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用泛型方法时，在方法名前声明类型参数，可以省略</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token number">100000.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token number">300000.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token number">200000.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Employee randomEmployee = Company.&lt;Employee&gt;randomEmployee(employees);</span>
<span class="token class-name">Employee</span> randomEmployee <span class="token operator">=</span> <span class="token class-name">Company</span><span class="token punctuation">.</span><span class="token function">randomEmployee</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>randomEmployee<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>泛型的类型限定</h2>
<p>定义泛型时，使用关键字<code>extends</code>限定类型参数是特定类或接口的子类型</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>1个类型参数支持指定多个限定类型，使用<code>&amp;</code>分割，并且限定类型列表中，最多只允许指定1个类类型，但可以指定多个接口类型（和Java继承规则类似，支持单继承、多实现）。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span> <span class="token operator">&amp;</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>通配符类型</h2>
<p><strong>无限定通配符</strong>：使用泛型时，可以使用通配符<code>?</code>，接收任何类型。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">maxSalary</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> employees<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>子类型限定通配符</strong>：通配符支持使用<code>extends</code>关键字，限定类型其类型为给定类型的子类型。</p>
<p>例如：限定泛型为Employee及其子类型</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">maxSalary</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> max <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee <span class="token operator">:</span> employees<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Double</span> salary <span class="token operator">=</span> employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> salary<span class="token punctuation">)</span><span class="token punctuation">{</span>
            max <span class="token operator">=</span> salary<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>超类型限定通配符</strong>：通配符还支持使用<code>super</code>关键字，限定其类型为给定类型的超类型，包括<code>Object</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span> <span class="token operator">&amp;</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>类型擦除</h2>
<p>JVM在编译期间，会将泛型"擦除"，使用原始类型代替泛型。</p>
<p><strong>如果类型参数没有限定类型，则原始类型为<code>Object</code></strong></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> legalPerson<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>类型擦除后，原始类型为<code>Object</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> legalPerson<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>如果类型参数有限定类型，则原始类型是其第1个限定类型</strong></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span> <span class="token operator">&amp;</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> legalPerson<span class="token punctuation">;</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>类型擦除后，原始类型为<code>Comparable</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Comparable</span> legalPerson<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java注解</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E6%B3%A8%E8%A7%A3.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E6%B3%A8%E8%A7%A3.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java注解</source>
      <description>Java注解 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Java集合</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E9%9B%86%E5%90%88.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E9%9B%86%E5%90%88.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java集合</source>
      <description>Java集合 Iterable&amp;lt;T&amp;gt; Collection&amp;lt;E&amp;gt; List&amp;lt;E&amp;gt; ArrayList&amp;lt;E&amp;gt; LinkedList&amp;lt;E&amp;gt; Set&amp;lt;E&amp;gt; HashSet&amp;lt;E&amp;gt; LinkedHashSet&amp;lt;E&amp;gt; TreeSet&amp;lt;E&amp;gt; Queue&amp;lt;E&amp;gt; PriorityQueue&amp;lt;E&amp;gt; Deque&amp;lt;E&amp;gt; ArrayDeque&amp;lt;E&amp;gt; Map&amp;lt;K,V&amp;gt; HashM...</description>
      <content:encoded><![CDATA[
<h2><code>Iterable&lt;T&gt;</code></h2>
<h2><code>Collection&lt;E&gt;</code></h2>
<h3><code>List&lt;E&gt;</code></h3>
<h4><code>ArrayList&lt;E&gt;</code></h4>
<h4><code>LinkedList&lt;E&gt;</code></h4>
<h3><code>Set&lt;E&gt;</code></h3>
<h4><code>HashSet&lt;E&gt;</code></h4>
<h4><code>LinkedHashSet&lt;E&gt;</code></h4>
<h4><code>TreeSet&lt;E&gt;</code></h4>
<h3><code>Queue&lt;E&gt;</code></h3>
<h4><code>PriorityQueue&lt;E&gt;</code></h4>
<h3><code>Deque&lt;E&gt;</code></h3>
<h4><code>ArrayDeque&lt;E&gt;</code></h4>
<h2><code>Map&lt;K,V&gt;</code></h2>
<h3><code>HashMap&lt;K,V&gt;</code></h3>
<h3><code>LinkedHashMap&lt;K,V&gt;</code></h3>
<h3><code>TreeMap&lt;K,V&gt;</code></h3>
<h2>历史遗留的集合</h2>
<h3><code>Vector&lt;E&gt;</code></h3>
<h3><code>Stack&lt;E&gt;</code></h3>
<h3><code>Properties</code></h3>
<p>用于处理属性(.properties)文件的类, 继承自<code>Hashtable</code>.</p>
<p>将键值对写入属性文件</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"a.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">"测试数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>从属性文件读取键值对</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> v1 <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> v2 <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"k1=%s, k2=%s%n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3><code>Hashtable&lt;K,V&gt;</code></h3>
<h2><code>Collections</code>和<code>Arrays</code>工具类</h2>
<h3><code>Collections</code></h3>
<h3><code>Arrays</code></h3>
]]></content:encoded>
    </item>
    <item>
      <title>Java面向对象编程核心思想</title>
      <link>https://bitbitpulse.github.io/posts/java/se/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/se/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Java面向对象编程核心思想</source>
      <description>Java面向对象编程核心思想 封装、继承、多态、组合、聚合 方法重载与重写 Java对象初始化过程 当使用new关键字创建1个对象的时候，Java对象初始化过程需要经过：类加载、实例化、构造3个阶段： 1.类加载过程 JVM加载类文件（1个类只会加载1次）： 初始化静态成员变量 按照定义顺序，依次执行静态代码块 如果存在父类，会先加载父类，然后再加载子...</description>
      <content:encoded><![CDATA[
<p>封装、继承、多态、组合、聚合</p>
<h2>方法重载与重写</h2>
<h2>Java对象初始化过程</h2>
<p>当使用<code>new</code>关键字创建1个对象的时候，Java对象初始化过程需要经过：类加载、实例化、构造3个阶段：</p>
<h3>1.类加载过程</h3>
<p>JVM加载类文件（1个类只会加载1次）：</p>
<ul>
<li>初始化静态成员变量</li>
<li>按照定义顺序，依次执行静态代码块</li>
</ul>
<p>如果存在父类，会先加载父类，然后再加载子类。</p>
<h3>2.实例化过程</h3>
<p>在堆内存中为该对象分配内存空间，然后：</p>
<ul>
<li>初始化实例成员变量</li>
</ul>
<p>如果存在父类，会先初始化父类中的实例成员变量，然后再初始化子类成员变量。</p>
<h3>3.构造过程</h3>
<p>执行构造函数：</p>
<ul>
<li>
<p>按照定义顺序，依次执行初始化代码块</p>
</li>
<li>
<p>执行构造函数</p>
</li>
</ul>
<p>如果存在父类，会先执行父类中的初始化代码块和构造函数，然后再执行子类中的初始化代码块和构造函数。</p>
<p>另外，如果子类构造函数中没有显式的调用父类构造函数，默认调用父类的无参构造函数，示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>Java访问修饰符</h2>
<p>访问修饰符用于限定类、变量、方法、构造器的可见范围，包括：</p>
<ul>
<li><code>public</code>，公共访问修饰符</li>
<li><code>protected</code>，保护访问修饰符，可以被同一个包内的类，以及其子类（无论是否在同一个包内）访问</li>
<li><code>default</code>，默认访问修饰符，只能被同一个包内的类访问，因此也称"包访问修饰符"</li>
<li><code>private</code>，私有访问修饰符，只能在类内部访问。</li>
</ul>
<h2><code>static</code>修饰符</h2>
<p><code>static</code>修饰符用于创建类级别的成员：</p>
<ul>
<li>静态变量</li>
<li>静态方法</li>
<li>静态代码块</li>
<li>静态内部类</li>
</ul>
<h2><code>final</code>修饰符</h2>
<ul>
<li><code>final</code>修饰类，则该类不能被继承</li>
<li><code>final</code>修饰方法，则该方法不能被重写</li>
<li><code>final</code>修饰变量，则该变量只能被赋值1次。</li>
</ul>
<p><code>final</code>变量在使用前必须先赋值：</p>
<ul>
<li>对于成员变量，可以在静态代码块、初始化代码块、构造器中进行赋值</li>
<li>对于局部变量，在使用变量前赋值即可</li>
</ul>
<h2><code>==</code>与<code>equals()</code>的区别</h2>
<p><code>==</code> 和 <code>equals()</code> 是用于比较对象的两种不同方式：</p>
<ul>
<li>
<p><code>==</code>运算符比较2个对象的内存地址是否相等，即是否引用同一个对象实例。</p>
</li>
<li>
<p><code>equals()</code>方法比较2个对象的内容是否相同。</p>
</li>
</ul>
<p>默认情况下，<code>equals()</code>比较2个对象的内存地址是否相等，等价于<code>==</code>，<code>Object</code>中的<code>equals()</code>源码如下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>一般情况下，子类需要重写<code>equals()</code>，自定义对象相等性比较规则。</p>
<p>示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">;</span>
    
    <span class="token comment">// getters/setters</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 或者使用instanceof进行判断</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> employee<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
                <span class="token operator">&amp;&amp;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
                <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>hireDay<span class="token punctuation">,</span> employee<span class="token punctuation">.</span>hireDay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Shiro</title>
      <link>https://bitbitpulse.github.io/posts/java/shiro/</link>
      <guid>https://bitbitpulse.github.io/posts/java/shiro/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">Shiro</source>
      <description>Shiro学习笔记</description>
    </item>
    <item>
      <title>SpringBoot</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot</source>
      <description>SpringBoot学习笔记</description>
    </item>
    <item>
      <title>SpringBoot使用事务</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E4%BD%BF%E7%94%A8%E4%BA%8B%E5%8A%A1.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E4%BD%BF%E7%94%A8%E4%BA%8B%E5%8A%A1.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot使用事务</source>
      <description>SpringBoot使用事务 快速开始 1.添加依赖 使用Spring事务需要添加spring-tx，一般只需要引入jdbc相关的依赖，就会自动包含它。 这里使用spring-boot-starter-data-jpa 2.启用事务支持 SpringBoot检测到spring-tx相关依赖时，默认自动启用事务支持。 也可显式的开启，在配置类上使用@En...</description>
      <content:encoded><![CDATA[
<h2>快速开始</h2>
<h3>1.添加依赖</h3>
<p>使用Spring事务需要添加<code>spring-tx</code>，一般只需要引入jdbc相关的依赖，就会自动包含它。</p>
<p>这里使用<code>spring-boot-starter-data-jpa</code></p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>2.启用事务支持</h3>
<p>SpringBoot检测到<code>spring-tx</code>相关依赖时，默认自动启用事务支持。</p>
<p>也可显式的开启，在配置类上使用<code>@EnableTransactionManagement</code>注解</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>3.开启事务</h3>
<p>在涉及数据库操作的业务方法上，使用<code>@Transactional</code>注解</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 钱包充值
 * */</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 创建钱包交易记录...</span>
    
    <span class="token comment">// 更新钱包余额...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>Spring事务抽象模型</h2>
<h3><code>TransactionManager</code></h3>
<p>Spring事务的核心是事务策略，是通过事务管理器<code>TransactionManager</code>接口定义的，它的2个子接口：<code>PlatformTransactionManager</code> 和 <code>ReactiveTransactionManager</code>，分别用于传统的命令式编程和新的响应式编程中。</p>
<p>以<code>PlatformTransactionManager</code>为例，接口定义如下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionManager</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 获取事务状态
     */</span>
    <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 提交事务
     */</span>
	<span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 回滚事务
     */</span>
    <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3><code>TransactionDefinition</code></h3>
<p><code>TransactionDefinition</code>接口用于定义事务：</p>
<ul>
<li>事务传播行为</li>
<li>事务隔离级别</li>
<li>事务超时</li>
<li>是否为只读事务</li>
</ul>
<h3><code>TransactionStatus</code></h3>
<p><code>TransactionStatus</code>接口用于定义事务的状态。</p>
<h2>声明式事务管理</h2>
<p>Spring声明式事务是基于AOP实现的。</p>
<p>使用<code>@Transactional</code>注解声明（也支持在基于xml的配置中，使用<code>tx</code>命名空间的相关标签进行声明）。</p>
<p>这个注解可用在类或方法上，必须是<code>public</code>方法。默认属性如下：</p>
<ul>
<li><code>propagation</code>，事务传播行为，默认<code>Propagation.REQUIRED</code></li>
<li><code>isolation</code>，事务隔离级别，默认为基础数据库的默认隔离级别</li>
<li><code>readOnly</code>，是否为只读事务，默认false，读写</li>
<li><code>timeout</code>，事务超时时间，默认为-1，表示不设置超时</li>
<li><code>rollbackFor</code>，导致回滚的异常，默认回滚<code>RuntimeException</code>和<code>Error</code></li>
</ul>
<h3>Spring事务管理器</h3>
<p>一般情况下，Spring应用只需要使用默认的事务管理器。</p>
<p><code>@Transactional</code>注解的<code>transactionManager</code>属性指定具体事务管理器</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>transactionManager <span class="token operator">=</span> <span class="token string">"txManager"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><h3>Spring事务传播行为</h3>
<p>Spring中的事务传播行为是指一个事务方法被另一个事务方法调用时，如何处理事务的传播行为。</p>
<p><code>@Transactional</code>注解的<code>propagation</code>属性指定事务传播行为，其值在<code>Propagation</code>枚举类中定义，包括：</p>
<ul>
<li><code>REQUIRED</code>，默认行为。如果当前存在事务，就在该事务中执行；否则，新建事务</li>
<li><code>SUPPORTS</code>，如果当前存在事务，就在该事务中执行；否则，不使用事务</li>
<li><code>MANDATORY</code>，如果当前存在事务，就在该事务中执行；否则，抛出异常</li>
<li><code>REQUIRES_NEW</code>，始终开启新的事务；如果当前已存在事务，将其挂起</li>
<li><code>NOT_SUPPORTED</code>，始终以非事务方式执行；如果当前已存在事务，将其挂起</li>
<li><code>NEVER</code>，始终以非事务方式执行；如果当前已存在事务，抛出异常</li>
<li><code>NESTED</code>，如果当前存在事务，则新建1个嵌套事务，它是当前事务的一部分；否则，新建1个事务</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><h3>Spring事务隔离级别</h3>
<p>Spring支持标准数据库事务隔离级别。</p>
<p><code>@Transactional</code>注解的<code>isolation</code>属性指定事务隔离级别，其值在<code>Isolation</code>枚举类中定义，包括：</p>
<ul>
<li><code>DEFAULT</code>，默认值。数据库默认隔离级别，通常是<code>READ_COMMITTED</code></li>
<li><code>READ_UNCOMMITTED</code>，读未提交</li>
<li><code>READ_COMMITTED</code>，读已提交</li>
<li><code>REPEATABLE_READ</code>，可重复读</li>
<li><code>SERIALIZABLE</code>，串行化</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><h3>Spring事务超时</h3>
<p><code>@Transactional</code> 注解的 <code>timeout</code> 属性用于指定事务的超时时间，即事务允许执行的最长时间。如果事务在指定的时间内未能完成，则会被自动回滚。</p>
<p>单位秒，默认为-1，表示不设置超时，直到方法执行完毕或者手动回滚。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><h3>Spring事务回滚</h3>
<p><code>@Transactional</code>注解的<code>rollbackFor</code>和<code>noRollbackFor</code>属性指定方法抛出特定异常时的回滚规则。</p>
<p>默认<code>RuntimeException</code>和<code>Error</code>异常，或者事务超时会导致事务回滚。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> noRollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre></div><h3>Spring只读事务</h3>
<p><code>@Transactional</code>注解的<code>readOnly</code>属性用于指定事务是否为只读。默认false</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre></div><h2>编程式事务管理</h2>
<h3>直接使用<code>TransactionManager</code></h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取TransactionManager    </span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PlatformTransactionManager</span> txManager<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">public</span> <span class="token class-name">WalletService</span><span class="token punctuation">(</span><span class="token class-name">PlatformTransactionManager</span> txManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>txManager <span class="token operator">=</span> txManager<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建TransactionDefinition</span>
    <span class="token class-name">DefaultTransactionDefinition</span> txDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    txDef<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"myTx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    txDef<span class="token punctuation">.</span><span class="token function">setIsolationLevel</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    txDef<span class="token punctuation">.</span><span class="token function">setPropagationBehavior</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    txDef<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    txDef<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 开始事务</span>
    <span class="token class-name">TransactionStatus</span> txStatus <span class="token operator">=</span> txManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txDef<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 回滚事务</span>
        txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>txStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 提交事务</span>
    txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>使用<code>TransactionTemplate</code></h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取TransactionTemplate对象</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TransactionTemplate</span> txTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">public</span> <span class="token class-name">WalletService</span><span class="token punctuation">(</span><span class="token class-name">PlatformTransactionManager</span> txManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>txTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionTemplate</span><span class="token punctuation">(</span>txManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">this</span><span class="token punctuation">.</span>txTemplate<span class="token punctuation">.</span><span class="token function">setPropagationBehavior</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>txTemplate<span class="token punctuation">.</span><span class="token function">setIsolationLevel</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>txTemplate<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>txTemplate<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token class-name">RechargeVO</span> vo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 有返回值时，创建TransactionCallback接口的对象</span>
    <span class="token class-name">Wallet</span> wallet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>txTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Wallet</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Wallet</span> <span class="token function">doInTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// ...</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
                status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> wallet<span class="token punctuation">;</span>
	
    <span class="token comment">// 无返回值时，创建TransactionCallbackWithoutResult接口的对象</span>
    <span class="token comment">/*
    this.txTemplate.execute(new TransactionCallbackWithoutResult() {
        @Override
        protected void doInTransactionWithoutResult(TransactionStatus status) {
            try {
                // ...
            }catch(Throwable ex){
                status.setRollbackOnly();
            }
        }
    });
    */</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>Spring事务失效</h2>
<p>Spring事务失效的几种情况：</p>
<ul>
<li><code>@Transactional</code>注解所在类的对象不是Spring容器管理的Bean</li>
<li><code>@Transactional</code>注解的方法不是public修饰的</li>
<li>抛出的异常不在<code>rollbackFor</code>属性声明的异常列表中，或者在<code>noRollbackFor</code>属性的声明列表中，则事务不会自动回滚</li>
<li>底层数据库不支持事务</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot使用定时任务</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E4%BD%BF%E7%94%A8%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E4%BD%BF%E7%94%A8%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot使用定时任务</source>
      <description>SpringBoot使用定时任务 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot使用异步任务</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot使用异步任务</source>
      <description>SpringBoot使用异步任务 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot使用拦截器</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot使用拦截器</source>
      <description>SpringBoot使用拦截器 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot单元测试</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot单元测试</source>
      <description>SpringBoot单元测试 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot参数校验</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot参数校验</source>
      <description>SpringBoot参数校验 快速开始 0.添加依赖 1.在实体类中需要被校验的字段上添加校验注解 2.在Controller方法参数上使用 @Valid 或 @Validated 注解 4.处理校验错误 可以在控制器方法中获取到参数校验结果，校验结果信息包含在BindingResult对象中 也可以在全局异常处理器中处理校验失败异常，校验失败会抛出M...</description>
      <content:encoded><![CDATA[
<h2>快速开始</h2>
<h3>0.添加依赖</h3>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>1.在实体类中需要被校验的字段上添加校验注解</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostParams</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"文章标题不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"文章正文不能超过4096个字符"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> draft<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"序号不能为负数"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> seq<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>2.在Controller方法参数上使用 <code>@Valid</code> 或 <code>@Validated</code> 注解</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span>
<span class="token keyword">public</span> <span class="token class-name">ApiResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PostVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">addPost</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">PostParams</span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">PostVO</span> data <span class="token operator">=</span> postService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">ApiResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>4.处理校验错误</h3>
<p>可以在控制器方法中获取到参数校验结果，校验结果信息包含在<code>BindingResult</code>对象中</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span>
<span class="token keyword">public</span> <span class="token class-name">ApiResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PostVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">addPost</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">PostParams</span> params<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> bindingResult<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>bindingResult<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ObjectError</span> error <span class="token operator">=</span> bindingResult<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ApiResult</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">PostVO</span> data <span class="token operator">=</span> postService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">ApiResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>也可以在全局异常处理器中处理校验失败异常，校验失败会抛出<code>MethodArgumentNotValidException</code>异常，它是<code>BindException</code>异常的子类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ApiResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BindException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ObjectError</span> error <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">ApiResult</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">ValidationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">ApiResult</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ApiResult</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"系统错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>分组校验</h2>
<p>默认校验都属于<em>jakarta.validation.groups.Default</em>分组接口，可以自定义其它分组校验接口。</p>
<p><code>@GroupSequence</code>注解用于定义校验分组的执行顺序。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GroupSequence</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Default</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Group<span class="token punctuation">.</span>Add</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Group<span class="token punctuation">.</span>Update</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Group<span class="token punctuation">.</span>Delete</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Group<span class="token punctuation">.</span>Query</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Group</span> <span class="token punctuation">{</span>
    <span class="token keyword">interface</span> <span class="token class-name">Add</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">interface</span> <span class="token class-name">Update</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">interface</span> <span class="token class-name">Delete</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">interface</span> <span class="token class-name">Query</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在被校验的字段注解上，使用groups属性指定分组</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostParams</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"文章ID不能为空"</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Group<span class="token punctuation">.</span>Update</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"文章标题不能为空"</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Group<span class="token punctuation">.</span>Add</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"文章正文不能超过4096个字符"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> draft<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"序号不能为负数"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> seq<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在方法参数上，使用 <code>@Validated</code> 注解，并指定要校验的分组</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span>
<span class="token keyword">public</span> <span class="token class-name">ApiResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PostVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">addPost</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Default</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Group<span class="token punctuation">.</span>Add</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token class-name">PostParams</span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">PostVO</span> data <span class="token operator">=</span> postService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">ApiResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>自定义校验注解</h2>
<h3>1.创建自定义校验注解</h3>
<p>在<code>@Constraint</code>注解中，指定要使用的校验器类</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token class-name">CustomValidator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">CustomValidation</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"Invalid value"</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>2.创建自定义校验器类</h3>
<p>创建类，实现<code>ConstraintValidator</code>接口，泛型参数分别是自定义的注解类型，和要检验的值类型</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomValidation</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">CustomValidation</span> constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">ConstraintValidatorContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"summary:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>3.在实体类字段中使用自定义校验注解</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CustomValidation</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"文章摘要必须以summary:开头"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> summary<span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot国际化支持</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%9B%BD%E9%99%85%E5%8C%96%E6%94%AF%E6%8C%81.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%9B%BD%E9%99%85%E5%8C%96%E6%94%AF%E6%8C%81.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot国际化支持</source>
      <description>SpringBoot国际化支持 </description>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot处理JSON数据</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%A4%84%E7%90%86JSON%E6%95%B0%E6%8D%AE.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%A4%84%E7%90%86JSON%E6%95%B0%E6%8D%AE.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot处理JSON数据</source>
      <description>SpringBoot处理JSON数据 SpringBoot提供了与3个库的集成: Jackson Gson JSON-B 集成JSON使用依赖spring-boot-starter-json, 它作为 spring-boot-starter-web 的一部分, 已自动添加. Jackson Jackson是SpringBoot默认的JSON库, 自动注...</description>
      <content:encoded><![CDATA[
<p>SpringBoot提供了与3个库的集成:</p>
<ul>
<li>Jackson</li>
<li>Gson</li>
<li>JSON-B</li>
</ul>
<p>集成JSON使用依赖<code>spring-boot-starter-json</code>, 它作为 <code>spring-boot-starter-web</code> 的一部分, 已自动添加.</p>
<h2>Jackson</h2>
<p>Jackson是SpringBoot默认的JSON库, 自动注入了1个 <code>ObjectMapper</code> Bean.</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jacksonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Person</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> json <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>支持通过application配置文件进行自定义</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.jackson.date-format</span><span class="token punctuation">=</span><span class="token value attr-value">yyyy-MM-dd HH:mm:ss</span>
<span class="token key attr-name">spring.jackson.time-zone</span><span class="token punctuation">=</span><span class="token value attr-value">Asia/Shanghai</span>
</code></pre></div><h2>Gson</h2>
<h2>JSON-B</h2>
]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot快速开始</title>
      <link>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html</link>
      <guid>https://bitbitpulse.github.io/posts/java/springboot/SpringBoot%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html</guid>
      <source url="https://bitbitpulse.github.io/rss.xml">SpringBoot快速开始</source>
      <description>SpringBoot快速开始 版本说明： Java 17 SpringBoot 3.2.2 添加依赖 创建配置文件 application.properties 创建Spring启动引导类 使用 @SpringBootApplication 注解 添加控制器方法 在Java控制器类上使用 @RestController 注解，在控制器方法上使用 @Ge...</description>
      <content:encoded><![CDATA[
<p>版本说明：</p>
<ul>
<li>Java 17</li>
<li>SpringBoot 3.2.2</li>
</ul>
<h2>添加依赖</h2>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerVersion</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerVersion</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>创建配置文件</h2>
<p>application.properties</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080</span>
</code></pre></div><h2>创建Spring启动引导类</h2>
<p>使用 <code>@SpringBootApplication</code> 注解</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickstartApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">QuickstartApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>添加控制器方法</h2>
<p>在Java控制器类上使用 <code>@RestController</code> 注解，在控制器方法上使用 <code>@GetMapping</code> 注解</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickstartApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">QuickstartApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello SpringBoot !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>测试</h2>
<p>启动项目，访问 http://localhost:8080/hello</p>
]]></content:encoded>
    </item>
  </channel>
</rss>